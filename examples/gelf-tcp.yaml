onramp:
  - id: gelf-tcp
    type: tcp
    preprocessors:
      - lines-null
    codec: json
    config:
      # TODO support strings here
      #host: 'localhost'
      host: 127.0.0.1
      port: 12202

offramp:
  - id: console
    type: stdout
    codec: json
    config:
      prefix: 'GELF (TCP): '

binding:
  - id: gelf-tcp
    links:
      '/onramp/gelf-tcp/{instance}/out': [ '/pipeline/main/{instance}/in' ]
      '/pipeline/main/{instance}/out': [ '/offramp/console/{instance}/in' ]
      '/pipeline/main/{instance}/error': [ '/offramp/system::stderr/{instance}/in' ]

mapping:
  /binding/gelf-tcp/01:
    instance: '01'

pipeline:
  - id: main
    interface:
      inputs:
        - in
      outputs:
        - out
        - error
    nodes:
      - id: runtime
        op: runtime::tremor
        config:
          script: |
            match event of
              # if timestamp is not set by clients:
              # http://docs.graylog.org/en/latest/pages/gelf.html#gelf-payload-specification
              case %{absent timestamp} =>
                let event.timestamp = system::ingest_ns() / 1000000000
              default =>
                null
            end;

            # add origin info to the event
            let event = patch event of
              upsert "origin_scheme" => origin::scheme(),
              upsert "origin_host"   => origin::host(),
              upsert "origin_port"   => origin::port(),
              upsert "origin_path"   => origin::path()
            end;

            # alternative to above (if we want all the origin info)
            let event.origin_uri        = origin::as_uri_record();
            let event.origin_uri_string = origin::as_uri_string();

            event;
    links:
      in: [ runtime ]
      runtime: [ out ]
      runtime/error: [ error ]
