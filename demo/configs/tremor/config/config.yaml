onramp:
  - id: blaster
    type: blaster
    config:
      source: /data/data.json.xz
      interval: 4000000 # 250 events/s
    codec: json
  - id: kafka-in
    type: kafka
    codec: json
    config:
      brokers:
        - kafka:9092
      topics:
        - info
        - error
        - snotbadger
      group_id: demo

offramp:
  - id: kafka-error
    type: kafka
    config:
      brokers:
        - kafka:9092
      topic: error
  - id: kafka-info
    type: kafka
    config:
      brokers:
        - kafka:9092
      topic: info
  - id: debug
    type: debug
  - id: elastic
    type: elastic
    config:
      endpoints:
        - http://elastic:9200
  - id: influxdb
    type: rest
    codec: influx
    config:
      endpoints:
        - http://influx:8086/write?db=tremor
      headers:
        "Client": "Tremor"

pipeline:
  - id: loadgen-info
    interface:
      inputs:
        - in
      outputs:
        - out
    nodes:
      - id: r # We run a tremor_script script with two rules on it
        op: runtime::tremor
        config:
          script: |
            emit;
            match event of
              case %{ short_message ~= glob|*info*| } => emit
              default => drop
            end
      - id: bp
        op: generic::backpressure
        config:
          timeout: 100

    links:
      in: [r]
      r: [bp]
      bp: [out]
  - id: loadgen-error
    interface:
      inputs:
        - in
      outputs:
        - out
    nodes:
      - id: r # We run a tremor_script script with two rules on it
        op: runtime::tremor
        config:
          script: |
            match event of
              case %{ short_message ~= glob|*ERROR*| } => emit
              default => drop
            end
    links:
      in: [r]
      r: [out]
  - id: enrich
    interface:
      inputs:
        - in
      outputs:
        - out
    nodes:
      - id: runtime
        op: runtime::tremor
        config:
          script: |
            use tremor::system;
            let event.tags.host = system::hostname();
            emit
      - id: batch
        op: generic::batch
        config:
          count: 50
    links:
      in: [runtime]
      runtime: [batch]
      batch: [out]
  - id: demo
    interface:
      inputs:
        - in
      outputs:
        - out
    nodes:
      - id: runtime # We run a tremor_script script with two rules on it
        op: runtime::tremor
        config:
          script: |
            let $index = "tremor";
            let $doc_type = "log";
            # The first class we define is named `info`,
            # it matches if `short_message`  contains the string `"info"`
            # we configure it to have a rate of 10 events/s
            match event of
              case %{ short_message ~= glob|*info*| } => let $class = "info", let $rate = 10, emit
            # The second class we define is `error`, it matches
            # if  `short_message` contains the string `"ERROR`
            # we configure it to have a rate of 100 events/s 
              case %{ short_message ~= glob|*ERROR*| } => let $class = "error", let $rate = 100, emit
            end;
            # Since we use 'emit' in the previous rules we know that only events that didn't match another
            # rule will arrive here. We're setting class and rate here to 'defaut' and
            # 90 rates.
            let $class = "default";
            let $rate = 90;
            emit
      - id: bucket # Now we limit how much each class is allowed to send per second
        op: grouper::bucket
      - id: bp # Apply back pressure, every time a response is over 100ms we bump the backoff
        op: generic::backpressure
        config:
          timeout: 100
      - id: batch # Batch to 50 events at a time and send them at once
        op: generic::batch
        config:
          count: 50
    links:
      in: [runtime]
      runtime: [bucket]
      bucket: [bp]
      bp: [batch]
      batch: [out]

binding:
  - id: loadgen-info
    links:
      "/onramp/blaster/{instance}/out": ["/pipeline/loadgen-info/{instance}/in"]
      "/pipeline/loadgen-info/{instance}/out":
        ["/offramp/kafka-info/{instance}/in"]
  - id: loadgen-error
    links:
      "/onramp/blaster/{instance}/out":
        ["/pipeline/loadgen-error/{instance}/in"]
      "/pipeline/loadgen-error/{instance}/out":
        ["/offramp/kafka-error/{instance}/in"]
  - id: demo
    links:
      "/onramp/kafka-in/{instance}/out": ["/pipeline/demo/{instance}/in"]
      "/pipeline/demo/{instance}/out": ["/offramp/elastic/{instance}/in"]
  - id: metrics
    links:
      "/pipeline/system::metrics/system/out": ["/pipeline/enrich/system/in"]
      "/pipeline/enrich/system/out":
        ["/offramp/influxdb/system/in", "/offramp/system::stdout/system/in"]

mapping:
  /binding/loadgen-info/loadgen:
    instance: "loadgen"
  /binding/loadgen-error/loadgen:
    instance: "loadgen"
  /binding/demo/demo:
    instance: "demo"
  /binding/metrics/system: {}
