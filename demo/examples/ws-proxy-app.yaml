onramp:
  - id: ws
    type: ws
    codec: string
    preprocessors:
      # TODO lines pre-processor no longer working here (for first connection). investigate
      - lines
    config:
      host: localhost
      port: 9139
      # TODO move this to top level
      link: true

# TODO switch to trickle for this
pipeline:
  - id: main
    interface:
      inputs:
        - in
        - from-offramp
      outputs:
        - out
        - error
        - to-onramp
    nodes:
      - id: request-processing
        op: runtime::tremor
        config:
          script: |
            match event of
              case "ping" =>
                # TODO need to support this usecase
                # don't proxy for ping messages
                emit "pong" => "to-onramp"
              case "snot\n" =>
                # use local (snot-aware) websocket server here
                let $url = "ws://localhost:8139"
              default =>
                null
            end;

            event;
      - id: response-processing
        op: runtime::tremor
        config:
          script: |
            # TODO use event origin uri to set url
            #{
            #  "url": $url,
            #  "data": event
            #}
            event

    links:
      # TODO error output here should bubble up as 500 response for linked onramps
      in: [ request-processing ]
      request-processing: [ out ]
      request-processing/error: [ error ]

      from-offramp: [ response-processing ]
      response-processing: [ to-onramp ]
      response-processing/error: [ error ]

offramp:
  - id: upstream
    type: ws
    codec: string
    postprocessors:
      - lines
    config:
      link: true
      url: "ws://echo.websocket.org"

binding:
  - id: default
    links:
      '/onramp/ws/{instance}/out': [ '/pipeline/main/{instance}/in' ]
      '/pipeline/main/{instance}/out': [
        '/offramp/upstream/{instance}/in',
        #'/offramp/system::stdout/system/in' # for debugging
      ]

      '/pipeline/main/{instance}/error': [ '/offramp/system::stderr/system/in' ]

      # linked offramp that send replies to a pipeline
      '/offramp/upstream/{instance}/out': [ '/pipeline/main/{instance}/from-offramp' ]
      '/pipeline/main/{instance}/to-onramp': [
        # linked onramp that can reply based on pipeline output
        '/onramp/ws/{instance}/in',
        # for debugging purposes
        '/offramp/system::stdout/system/in'
      ]

      # tremor metrics
      #'/pipeline/system::metrics/system/out': [ '/offramp/system::stdout/system/in' ]

mapping:
  /binding/default/01:
    instance: '01'
