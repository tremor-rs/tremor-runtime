onramp:
  - id: gelf-tcp
    metrics_interval_s: 10
    type: tcp
    preprocessors:
      - lines-null
    codec: json
    config:
      # TODO support strings here
      #host: 'localhost'
      host: 127.0.0.1
      port: 12202

offramp:
  - id: console
    #metrics_interval_s: 10
    type: stdout
    codec: json
    config:
      prefix: "GELF (TCP): "
  - id: elastic
    metrics_interval_s: 10
    type: elastic
    codec: json
    config:
      endpoints:
        - "http://127.0.0.1:9200"
  - id: metrics-console
    type: stdout
    codec: yaml
    config:
      prefix: "TREMOR METRICS: "

binding:
  - id: gelf
    links:
      "/onramp/gelf-tcp/{instance}/out":
        - "/pipeline/main/{instance}/in"
      "/pipeline/main/{instance}/out":
        - "/offramp/elastic/{instance}/in"
      "/pipeline/main/{instance}/error":
        - "/offramp/system::stderr/{instance}/in"
  - id: metrics
    links:
      "/pipeline/system::metrics/system/out":
        - "/pipeline/metrics-enrich/system/in"
      "/pipeline/metrics-enrich/system/out":
        - "/offramp/metrics-console/system/in"

mapping:
  /binding/gelf/01:
    instance: "01"
  /binding/metrics/01: {}

pipeline:
  - id: main
    #metrics_interval_s: 10
    interface:
      inputs:
        - in
      outputs:
        - out
        - error
    nodes:
      - id: runtime
        op: runtime::tremor
        config:
          script: |
            match event of
              # if timestamp is not set by clients:
              # http://docs.graylog.org/en/latest/pages/gelf.html#gelf-payload-specification
              case %{absent timestamp} =>
                let event.timestamp = system::ingest_ns() / 1000000000
              default =>
                null
            end;

            # add origin info to the event
            let event = patch event of
              upsert "origin_scheme" => origin::scheme(),
              upsert "origin_host"   => origin::host(),
              upsert "origin_port"   => origin::port(),
              upsert "origin_path"   => origin::path()
            end;

            # alternative to above (if we want all the origin info)
            let event.origin_uri        = origin::as_uri_record();
            let event.origin_uri_string = origin::as_uri_string();

            event;
    links:
      in: [runtime]
      runtime: [out]
      runtime/error: [error]

  - id: metrics-enrich
    interface:
      inputs:
        - in
      outputs:
        - out
        - error
    nodes:
      - id: runtime
        op: runtime::tremor
        config:
          script: |
            let event.tags.tremor_host = system::hostname();

            event;
    links:
      in: [runtime]
      runtime: [out]
      runtime/error: [error]
