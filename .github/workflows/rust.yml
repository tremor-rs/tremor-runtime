name: Rust - Latest

on: [push]

jobs:
  license:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Check license headers
        run: ./checks/copyright.sh
      - uses: wayfair-incubator/cache@v900
        id: cache-cargo-deny
        with:
          path: ~/cargo-deny/
          key: cargo-deny-${{ runner.os }}-0.3.0a
      - name: restore sccache
        if: steps.cache-cargo-deny.outputs.cache-hit == 'true'
        run: cp ~/cargo-deny/* ~/.cargo/bin
      - name: Install clippy-deny
        if: steps.cache-cargo-deny.outputs.cache-hit != 'true'
        run: cargo install -f cargo-deny
      - name: Prepare sccache command bin for cache
        if: steps.cache-cargo-deny.outputs.cache-hit != 'true'
        run: mkdir ~/cargo-deny; cp ~/.cargo/bin/cargo-deny ~/cargo-deny
      - name: Check dependencies
        run: cargo deny check
  sanity:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Safety cheks
        run: ./checks/safety.sh -a
  unused-deps:
    strategy:
      fail-fast: false
      matrix:
        repo:
          - .
          - dissect
          - kv 
          - tremor-pipeline
          - tremor-script
          - tremor-tool
          - remor-api
          - tremor-query
          - tremor-server
          - window
    runs-on: ubuntu-latest
    steps:
      - name: Install deps
        run: sudo snap install remarshal rg
      - uses: actions/checkout@v1
      - name: Check for unused dependencies
        run: ./checks/deps.sh ${{matrix.repo}}
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Check Formatting
        run: cargo fmt --all -- --check
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Install deps
        run: sudo apt-get install -y libssl1.0-dev libssl1.0
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: wayfair-incubator/cache@v900
        id: cache-build
        with:
          path: ~/.cache/sccache
          key: sccache-cache-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            sccache-cache-${{ runner.os }}-
      - uses: wayfair-incubator/cache@v900
        id: cache-sccache
        with:
          path: ~/sccache
          key: sccache-${{ runner.os }}
      - name: restore sccache
        if: steps.cache-sccache.outputs.cache-hit == 'true'
        run: cp ~/sccache/* ~/.cargo/bin
      - name: install sccache
        if: steps.cache-sccache.outputs.cache-hit != 'true'
        run: cargo install sccache
      - name: Prepare sccache command bin for cache
        if: steps.cache-sccache.outputs.cache-hit != 'true'
        run: mkdir ~/sccache; cp ~/.cargo/bin/sccache ~/sccache
      - name: Build
        env:
          RUSTC_WRAPPER: sccache
        run: cargo build --all
      - name: Run tests
        env:
          RUSTC_WRAPPER: sccache
        run: cargo test --all
      - name: Run Integration Tests
        env:
          RUSTC_WRAPPER: sccache
        run: make it
  api-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Install deps
        run: sudo apt-get install -y libssl1.0-dev libssl1.0
      - name: Install coyote
        run: go get github.com/landoop/coyote
      - name: Install yaml2json
        run: go get github.com/bronze1man/yaml2json
      - name: install EQC
        run: curl -O http://quviq-licencer.com/downloads/eqcR21.zip && unzip eqcR21.zip && cd Quviq* && sudo erl -noshell -eval 'eqc_install:install()' -eval 'init:stop()'
      - name: Activate EQC
        run:  erl -noshell -eval 'eqc:registration("${{secrets.EQC_LICENSE}}")' -eval "eqc:start()" -eval "init:stop()"
      - name: generate yaml
        run: ~/go/bin/yaml2json < static/openapi.yaml > static/openapi.json
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: wayfair-incubator/cache@v900
        id: cache-build
        with:
          path: ~/.cache/sccache
          key: sccache-cache-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            sccache-cache-${{ runner.os }}-
      - uses: wayfair-incubator/cache@v900
        id: cache-sccache
        with:
          path: ~/sccache
          key: sccache-${{ runner.os }}
      - name: restore sccache
        if: steps.cache-sccache.outputs.cache-hit == 'true'
        run: cp ~/sccache/* ~/.cargo/bin
      - name: install sccache
        if: steps.cache-sccache.outputs.cache-hit != 'true'
        run: cargo install sccache
      - name: Prepare sccache command bin for cache
        if: steps.cache-sccache.outputs.cache-hit != 'true'
        run: mkdir ~/sccache; cp ~/.cargo/bin/sccache ~/sccache
      - name: Build
        env:
          RUSTC_WRAPPER: sccache
        run: cargo build -p tremor-server -p tremor-tool
      - name: Run curl tests
        run: ./checks/api.sh -c
      - name: Run tremor-tool tests
        run: ./checks/api.sh -t
      - name: Run eqc tests
        run: ./checks/api.sh -e
  clippy-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Install deps
        run: sudo apt-get install -y libssl1.0-dev libssl1.0
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: wayfair-incubator/cache@v900
        id: cache-build
        with:
          path: ~/.cache/sccache
          key: sccache-cache-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            sccache-cache-${{ runner.os }}-
      - uses: wayfair-incubator/cache@v900
        id: cache-sccache
        with:
          path: ~/sccache
          key: sccache-${{ runner.os }}
      - name: restore sccache
        if: steps.cache-sccache.outputs.cache-hit == 'true'
        run: cp ~/sccache/* ~/.cargo/bin
      - name: install sccache
        if: steps.cache-sccache.outputs.cache-hit != 'true'
        run: cargo install sccache
      - name: Prepare sccache command bin for cache
        if: steps.cache-sccache.outputs.cache-hit != 'true'
        run: mkdir ~/sccache; cp ~/.cargo/bin/sccache ~/sccache
      - name: Install clippy
        run: rustup component add clippy
      - uses: actions-rs/clippy-check@v1
        env:
          RUSTC_WRAPPER: sccache
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all
  code-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Install deps
        run: sudo apt-get install -y libssl1.0-dev libssl1.0
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - uses: wayfair-incubator/cache@v900
        id: cache-build
        with:
          path: ~/.cache/sccache
          key: sccache-cache-tarpaulin-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            sccache-cache-${{ runner.os }}-
      - uses: wayfair-incubator/cache@v900
        id: cache-sccache
        with:
          path: ~/sccache
          key: sccache-${{ runner.os }}
      - name: restore sccache
        if: steps.cache-sccache.outputs.cache-hit == 'true'
        run: cp ~/sccache/* ~/.cargo/bin
      - name: install sccache
        if: steps.cache-sccache.outputs.cache-hit != 'true'
        run: cargo install sccache
      - name: Prepare sccache command bin for cache
        if: steps.cache-sccache.outputs.cache-hit != 'true'
        run: mkdir ~/sccache; cp ~/.cargo/bin/sccache ~/sccache
      - name: install tarpaulin
        run: bash <(curl https://raw.githubusercontent.com/xd009642/tarpaulin/master/travis-install.sh)
      - name: run tarpaulin
        env:
          RUSTC_WRAPPER: sccache
        run: cargo tarpaulin -v --out Xml --exclude-files target* --exclude-files depricated/* --all
      - uses: codecov/codecov-action@v1.0.2
        with:
          token: ${{secrets.CODECOV_TOKEN}} #required
          file: ./cobertura.xml
