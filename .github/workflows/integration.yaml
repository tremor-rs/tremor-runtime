name: Integration tests

on: [push]

jobs:
  integration-tests-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Install deps
        run: sudo apt-get install -y libssl1.0-dev libssl1.0
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      #- uses: actions/cache@v1
      #  id: cache-build
      #  with:
      #    path: ~/.cache/sccache
      #    key: sccache-cache-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
      #    restore-keys: |
      #      sccache-cache-${{ runner.os }}-
      #- uses: actions/cache@v1
      #  id: cache-sccache
      #  with:
      #    path: ~/sccache
      #    key: sccache-${{ runner.os }}
      #- name: restore sccache
      #  if: steps.cache-sccache.outputs.cache-hit == 'true'
      #  run: cp ~/sccache/* ~/.cargo/bin
      #- name: install sccache
      #  if: steps.cache-sccache.outputs.cache-hit != 'true'
      #  run: cargo install sccache
      #- name: Prepare sccache command bin for cache
      #  if: steps.cache-sccache.outputs.cache-hit != 'true'
      #  run: mkdir ~/sccache; cp ~/.cargo/bin/sccache ~/sccache
      #- name: Run Integration Tests
      #  env:
      #    RUSTC_WRAPPER: sccache
      #  run: make it
  integration-tests-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      #- uses: actions/cache@v1
      #  id: cache-build
      #  with:
      #    path: ~/.cache/sccache
      #    key: sccache-cache-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
      #    restore-keys: |
      #      sccache-cache-${{ runner.os }}-
      #- uses: actions/cache@v1
      #  id: cache-sccache
      #  with:
      #    path: ~/sccache
      #    key: sccache-${{ runner.os }}
      #- name: restore sccache
      #  if: steps.cache-sccache.outputs.cache-hit == 'true'
      #  run: cp ~/sccache/* ~/.cargo/bin
      #- name: install sccache
      #  if: steps.cache-sccache.outputs.cache-hit != 'true'
      #  run: cargo install sccache
      #- name: Prepare sccache command bin for cache
      #  if: steps.cache-sccache.outputs.cache-hit != 'true'
      #  run: mkdir ~/sccache; cp ~/.cargo/bin/sccache ~/sccache
      #- name: Run Integration Tests
      #  env:
      #    RUSTC_WRAPPER: sccache
      #  run: make it
  api-tests-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1.0.0
      - uses: gleam-lang/setup-erlang@v1.0.0
        with:
          otp-version: 22.1
      - run: rebar3 eunit
      - uses: actions/checkout@v1
      - name: Install deps
        run: sudo apt-get install -y libssl1.0-dev libssl1.0
      - name: Install coyote
        run: go get github.com/landoop/coyote
      - name: Install yaml2json
        run: go get github.com/bronze1man/yaml2json
      - name: install EQC
        run: curl -O http://quviq-licencer.com/downloads/eqcR21.zip && unzip eqcR21.zip && cd Quviq* && sudo erl -noshell -eval 'eqc_install:install()' -eval 'init:stop()'
      - name: Activate EQC
        run:  erl -noshell -eval 'eqc:registration("${{secrets.EQC_LICENSE}}")' -eval "eqc:start()" -eval "init:stop()"
      - name: generate yaml
        run: ~/go/bin/yaml2json < static/openapi.yaml > static/openapi.json
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      #- uses: actions/cache@v1
      #  id: cache-build
      #  with:
      #    path: ~/.cache/sccache
      #    key: sccache-cache-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
      #    restore-keys: |
      #      sccache-cache-${{ runner.os }}-
      #- uses: actions/cache@v1
      #  id: cache-sccache
      #  with:
      #    path: ~/sccache
      #    key: sccache-${{ runner.os }}
      #- name: restore sccache
      #  if: steps.cache-sccache.outputs.cache-hit == 'true'
      #  run: cp ~/sccache/* ~/.cargo/bin
      #- name: install sccache
      #  if: steps.cache-sccache.outputs.cache-hit != 'true'
      #  run: cargo install sccache
      #- name: Prepare sccache command bin for cache
      #  if: steps.cache-sccache.outputs.cache-hit != 'true'
      #  run: mkdir ~/sccache; cp ~/.cargo/bin/sccache ~/sccache
      - name: Build
      # env:
      #   RUSTC_WRAPPER: sccache
        run: cargo build -p tremor-server -p tremor-tool
      - name: Run curl tests
        run: ./.github/checks/api.sh -c
      - name: Run tremor-tool tests
        run: ./.github/checks/api.sh -t
      - name: Run eqc tests
        run: ./.github/checks/api.sh -e
  api-tests-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1
      - run: brew install erlang@21 rebar3
        name: Install Erlang 21
      - run: rebar3 eunit
      - name: Install coyote
        run: go get github.com/landoop/coyote
      - name: Install yaml2json
        run: go get github.com/bronze1man/yaml2json
      - name: install EQC
        run: curl -O http://quviq-licencer.com/downloads/eqcR21.zip && unzip eqcR21.zip && cd Quviq* && sudo erl -noshell -eval 'eqc_install:install()' -eval 'init:stop()'
      - name: Activate EQC
        run:  erl -noshell -eval 'eqc:registration("${{secrets.EQC_LICENSE}}")' -eval "eqc:start()" -eval "init:stop()"
      - name: generate yaml
        run: ~/go/bin/yaml2json < static/openapi.yaml > static/openapi.json
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      #- uses: actions/cache@v1
      #  id: cache-build
      #  with:
      #    path: ~/.cache/sccache
      #    key: sccache-cache-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
      #    restore-keys: |
      #      sccache-cache-${{ runner.os }}-
      #- uses: actions/cache@v1
      #  id: cache-sccache
      #  with:
      #    path: ~/sccache
      #    key: sccache-${{ runner.os }}
      #- name: restore sccache
      #  if: steps.cache-sccache.outputs.cache-hit == 'true'
      #  run: cp ~/sccache/* ~/.cargo/bin
      #- name: install sccache
      #  if: steps.cache-sccache.outputs.cache-hit != 'true'
      #  run: cargo install sccache
      #- name: Prepare sccache command bin for cache
      #  if: steps.cache-sccache.outputs.cache-hit != 'true'
      #  run: mkdir ~/sccache; cp ~/.cargo/bin/sccache ~/sccache
      - name: Build
      # env:
      #   RUSTC_WRAPPER: sccache
        run: cargo build -p tremor-server -p tremor-tool
      - name: Run curl tests
        run: ./.github/checks/api.sh -c
      - name: Run tremor-tool tests
        run: ./.github/checks/api.sh -t
      - name: Run eqc tests
        run: ./.github/checks/api.sh -e
