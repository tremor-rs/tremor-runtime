# Test a realistic workflow including json encoding and decoding
# and connect both the pass and the overflow output to the
# blackhole to acount for the data
---
onramp:
  - id: blaster
    type: blaster
    codec: json
    config:
      source: ./demo/data/applog.json.xz

offramp:
  - id: blackhole
    type: blackhole
    codec: json
    config:
      warmup_secs: 10
      stop_after_secs: 100
      significant_figures: 2

binding:
  - id: bench
    links:
      "/onramp/blaster/{instance}/out": ["/pipeline/main/{instance}/in"]
      "/pipeline/main/{instance}/out": ["/offramp/blackhole/{instance}/in"]
      "/pipeline/main/{instance}/error":
        ["/offramp/system::stderr/{instance}/in"]

pipeline:
  - id: main
    interface:
      inputs:
        - in
      outputs:
        - out
        - error
    nodes:
      - id: runtime
        op: runtime::tremor
        config:
          script: |          
            mod string with
              intrinsic fn len(e) as string::len;
              intrinsic fn substr(e,s,e) as string::substr;
            end;
            mod json with
              intrinsic fn contains(e) as json::encode;
            end;
            mod type with
              intrinsic fn as_string(e) as type::as_string;
            end;
            mod array with
              intrinsic fn contains(a,e) as array::contains;
            end;
            mod record with
              intrinsic fn rename(a,e) as record::rename;
            end;
            mod system with
              intrinsic fn ingest_ns() as system::ingest_ns;
              intrinsic fn hostname() as system::hostname;
            end;
            let event = patch event of
              upsert "message" => event.full_message,
              upsert "tremor" => system::hostname()
            end;

            # require '/etc/logstash/utils/field_formatter'

            const normalized_fields_mapping = {
              "_action": "action",
              "AjaxRequest": "ajax_request",
              "Application": "application",
              "application_name": "application",
              "ApplicationName": "application",
              "app_name": "application",
              "appname": "application",
              "AvailableForDeliveryScheduling": "available_for_delivery_scheduling",
              "BclgID": "bclg_id",
              "BiPEDRank": "bi_ped_rank",
              "dcatFlag": "dcat_flag",
              "CallerApplication": "caller_application",
              "CallerIPaddress": "caller_ip_address",
              "CallerOperation": "caller_operation",
              "CallerSource": "caller_source",
              "CallType": "call_type",
              "CannotShipToPostalCode": "cannot_ship_to_postal_code",
              "ClassName": "class_name",
              "ContainerType": "container_type",
              "_controller": "controller",
              "CSNId": "csnid",
              "CSNUtId": "csnutid",
              "cu_id": "customer_id",
              "CuId": "customer_id",
              "CyID": "cy_id",
              "DbCode": "db_code",
              "DbName": "db_name",
              "DbServer": "db_server",
              "DbUsername": "db_username",
              "employee_id": "user_id",
              "Environment": "environment",
              "ErrorCodes": "error_codes",
              "ErrorHost": "error_host",
              "ErrorReferer": "error_referrer",
              "ErrorURL": "error_url",
              "ErrorURLPath": "error_url_path",
              "ErrorURLQueryString": "error_url_query_string",
              "extranet_user_id": "user_id",
              "GeoIpCityCountryName": "geoip_city_country_name",
              "GeoIpCity": "geoip_city",
              "GeoIpPostalCode": "geoip_postal_code",
              "host": "wf_host",
              "HTTPCode": "http_code",
              "HttpRewriteURL": "http_rewrite_url",
              "hu_id": "handling_unit_id",
              "JenkinsBuildNumber": "jenkins_build_number",
              "JenkinsBuildURL": "jenkins_build_url",
              "JenkinsExecutorNumber": "jenkins_executor_number",
              "JenkinsJobName": "jenkins_job_name",
              "JenkinsNodeName": "jenkins_node_name",
              "JenkinsURL": "jenkins_url",
              "LastSqlMessage": "last_sql_message",
              "logger": "logger_name",
              "loggerName": "logger_name",
              "LoggerName": "logger_name",
              "login_success": "login_success",
              "LogLength_int": "log_length",
              "manufacturer_id": "user_id",
              "@message": "message",
              "MethodName": "method_name",
              "NDC": "ndc",
              "noPXCookie": "no_px_cookie",
              "OpID": "op_id",
              "OpSpID": "op_sp_id",
              "OptionList": "option_list",
              "OpTwoDayGuarantee": "op_two_day_guarantee",
              "Order_id": "order_id",
              "or_id": "order_id",
              "OrID": "order_id",
              "pagetype": "page_type",
              "ParentTXID": "parent_txid",
              "PDOConnectAttempt": "pdo_connect_attempt",
              "PDOConnectTime": "pdo_connect_time",
              "PDODriverName": "pdo_driver_name",
              "PDOErrorMessage": "pdo_error_message",
              "po_number": "purchase_order_number",
              "PONumList": "po_num_list",
              "po_num": "purchase_order_number",
              "PostalCode": "postal_code",
              "PostalCodeRegionID": "postal_code_region_id",
              "PuREST_Method": "method",
              "PuREST_Resource": "purest_resource",
              "PuREST_Service": "purest_service",
              "QTime": "qtime",
              "QtyList": "qty_list",
              "Query": "query",
              "QueryTimeInSec": "query_time",
              "QueryTime": "query_time",
              "RequestedUri": "requested_uri",
              "RequestURI": "request_uri",
              "rf_gun_response_SYS_SHORTMSG": "rf_gun_response_sys_shortmsg",
              "RgID": "rg_id",
              "ScriptFilename": "script_filename",
              "ScriptName": "script_name",
              "dcbrvice": "dcbrvice",
              "ShipSpeed": "ship_speed",
              "ShortQuery": "short_query",
              "SkipCache": "skip_cache",
              "SKUList": "sku_list",
              "SoID": "so_id",
              "source_host": "wf_host_ip",
              "SpIDList": "spl_d_list",
              "StackTrace": "stack_trace",
              "StoreID": "store_id",
              "Store": "store_id",
              "supplier_id": "user_id",
              "tran_log_id": "transaction_log_id",
              "TXID": "txid",
              "UserAgentBrowser": "user_agent_browser",
              "UserAgentDevice": "user_agent_device",
              "UserAgentOS": "user_agent_os",
              "UserAgent": "user_agent",
              "UserAgentVersion": "user_agent_version",
              "UserInfo": "user_info",
              "UserIp": "user_ip",
              "version": "gelf_version",
              "WFdatacenter": "wf_datacenter",
              "WFhostip": "wf_host_ip",
              "WFhost": "wf_host",
              "WFpod": "wf_pod",
              "WFSID": "wf_sid",
              "wh_id": "warehouse_id"
            };

            #... there are more of those

            # set gelf log level

            let event = merge event of match event of
                # If we have log level set and log level is one of the known log levels we are good
                case r = %{ present log_level } when array::contains(["DEBUG", "INFO", "WARN", "ERROR", "FATAL"], r.log_level) => {}
                case r = %{ short_message ~= re|(\\d+\\s)*(?P<log_level>DEBUG\|INFO\|WARN\|ERROR\|FATAL)(_LOG_MESSAGE)| } => r.short_message
                # default to INFO
                default => {"log_level": "INFO"}
              end
            end;


            let event = record::rename(event, normalized_fields_mapping);

            match event of
              case r = %{wf_host_ip ~= dissect|%{wf_host_ip}:%{wf_host_port}|} => let event.wf_host_ip = r.wf_host_ip.wf_host_ip
              default => null # wf_host_port was already been set no need to update it
            end;

            # set defaults;
            # re-set pod and datacenter even if they existed
            # Assumption: cidr/.../ => cidr match
            let event = merge event of match event of
                case %{present wf_datacenter, present wf_pod}                                                                             => {} # don't overwrite existing settings
                case %{wf_host_ip ~= cidr|10.225.128.0/17|}                                                                               => {"wf_pod": "dcbcdca1",    "wf_datacenter": "dca1"}
                case %{wf_host_ip ~= cidr|10.22.0.0/17|}                                                                                  => {"wf_pod": "web01",      "wf_datacenter": "dca3"}
                case %{wf_host_ip ~= cidr|10.21.0.0/17|}                                                                                  => {"wf_pod": "dcbc01",     "wf_datacenter": "dca3"}
                case %{wf_host_ip ~= cidr|10.22.128.0/18,10.22.192.0/19|}                                                                 => {"wf_pod": "cit01",      "wf_datacenter": "dca3"}
                case %{wf_host_ip ~= cidr|10.22.240.0/20|}                                                                                => {"wf_pod": "san01",      "wf_datacenter": "dca3"}
                case %{wf_host_ip ~= cidr|10.60.0.0/17|}                                                                                  => {"wf_pod": "web03",      "wf_datacenter": "dcb2"}
                case %{wf_host_ip ~= cidr|10.61.0.0/17|}                                                                                  => {"wf_pod": "dcbc03",     "wf_datacenter": "dcb2"}
                case %{wf_host_ip ~= cidr|10.60.128.0/18,10.60.192.0/19|}                                                                 => {"wf_pod": "cit03",      "wf_datacenter": "dcb2"}
                case %{wf_host_ip ~= cidr|10.60.240.0/20|}                                                                                => {"wf_pod": "san03",      "wf_datacenter": "dcb2"}
                case %{wf_host_ip ~= cidr|10.236.0.0/17,10.236.128.0/17,10.237.0.0/17,10.238.0.0/16|}                                     => {"wf_pod": "dcc2",       "wf_datacenter": "dcc2"}
                case %{wf_host_ip ~= cidr|10.237.128.0/17|}                                                                               => {"wf_pod": "dcbc04",     "wf_datacenter": "dcc2"}
                case %{wf_host_ip ~= cidr|10.24.0.0/16|}                                                                                  => {"wf_pod": "dev01",      "wf_datacenter": "dev"}
                case %{wf_host_ip ~= cidr|10.228.0.0/15|}                                                                                 => {"wf_pod": "devdca1",    "wf_datacenter": "dev1"}
                case %{wf_host_ip ~= cidr|10.230.196.0/24,10.230.200.0/24,10.230.206.0/24,10.230.208.0/24,10.230.210.0/24,10.231.6.0/24|} => {"wf_pod": "stgdca1",    "wf_datacenter": "stdc11"}
                case %{wf_host_ip ~= cidr|10.230.134.0/24,10.230.136.0/24,10.230.138.0/24,10.231.128.0/24|}                               => {"wf_pod": "dcbcstgdca1", "wf_datacenter": "stdca1"}
                case %{wf_host_ip ~= cidr|10.23.0.0/17|}                                                                                  => {"wf_pod": "web02",      "wf_datacenter": "ep"}
                case %{wf_host_ip ~= cidr|10.20.0.0/17|}                                                                                  => {"wf_pod": "dcbc02",     "wf_datacenter": "ep"}
                case %{wf_host_ip ~= cidr|10.11.0.0/16|}                                                                                  => {"wf_pod": "dcd2",       "wf_datacenter": "dcd2"}
                case %{wf_host_ip ~= cidr|10.28.0.0/16|}                                                                                  => {"wf_pod": "dce1",       "wf_datacenter": "dce"}
                case %{wf_host_ip ~= cidr|10.248.0.0/16,10.249.192.0/19,10.249.0.0/17|}                                                   => {"wf_pod": "dcb1",       "wf_datacenter": "dcb1"}
                case %{wf_host_ip ~= cidr|10.249.128.0/18|}                                                                               => {"wf_pod": "dcbcdcb1",   "wf_datacenter": "dcb1"}
                default                                                                                                                   => {"wf_pod": "dca1",       "wf_datacenter": "dca1"}
              end
            end;

            const stores_fields = {
                "@timestamp": "date",
                "account_id": "string",
                "action": "string",
                "ajax_request": "string",
                "akamai_bot": "string",
                "akamai_reputation": "string",
                "application": "string",
                "dcat_flag": "string",
                "business_account_id": "integer",
                "can_admin_logon": "string",
                "class_name": "string",
                "codebase": "string",
                "combined_query_count": "integer",
                "contact_id": "string",
                "controller": "string",
                "csnid": "string",
                "csnutid": "string",
                "customer_id": "string",
                "db_code": "string",
                "db_name": "string",
                "db_query_count": "string",
                "db_server": "string",
                "db_uncached_query_count": "string",
                "db_username": "string",
                "email_address": "string",
                "engine_data_center": "string",
                "engine_server_host": "string",
                "engine_server_status": "string",
                "environment": "string",
                "error_host": "string",
                "error_message": "string",
                "error_referrer": "string",
                "error_url": "string",
                "error_url_path": "string",
                "error_url_query_string": "string",
                "event_id": "string",
                "feature_toggle_override_set":"string",
                "geoip_city": "string",
                "geoip_city_country_name": "string",
                "geoip_postal_code": "string",
                "graphql_query_id": "string",
                "http_code": "string",
                "http_rewrite_url": "string",
                "key": "string",
                "last_sql_message": "string",
                "lead_id": "string",
                "libra_variations": "string",
                "log_level": "string",
                "logger_name": "string",
                "logger_topic": "string",
                "login_error": "string",
                "login_success": "string",
                "login_type": "string",
                "logstash": "string",
                "logstash_l1": "string",
                "logstash_l1_timestamp": "date",
                "logstash_transform": "string",
                "memcache_query_count": "string",
                "message": "string",
                "message_key": "string",
                "message_key_sanitized": "string",
                "no_px_cookie": "integer",
                "order_id": "string",
                "page": "string",
                "page_type": "string",
                "parent_txid": "string",
                "pdo_connect_attempt": "integer",
                "pdo_connect_time": "float",
                "pdo_driver_name": "string",
                "pdo_error_message": "string",
                "perimeterx_block_action": "string",
                "perimeterx_block_reason": "string",
                "perimeterx_score": "string",
                "perimeterx_uuid": "string",
                "php_cpu_ms": "float",
                "php_hit": "integer",
                "php_tte_ms": "float",
                "purest_resource": "string",
                "query": "string",
                "query_parameters": "string",
                "query_time": "float",
                "redis_query_count": "string",
                "request_uri": "string",
                "script_filename": "string",
                "script_name": "string",
                "dcbrvice_query_count": "string",
                "short_message": "string",
                "short_query": "string",
                "sitespect_variation": "string",
                "sku": "string",
                "stack_trace": "string",
                "store_id": "short",
                "tags": "string",
                "test_case_run_id": "string",
                "test_name": "string",
                "test_session_id": "string",
                "test_suite_run_id": "string",
                "ticket_id": "integer",
                "timer": "float",
                "txid": "string",
                "txid_server_addr": "string",
                "user_agent": "string",
                "user_agent_browser": "string",
                "user_agent_device": "string",
                "user_agent_os": "string",
                "user_agent_version": "string",
                "user_id": "string",
                "user_info": "string",
                "user_ip": "ip",
                "value": "string",
                "wf_datacenter": "string",
                "wf_index_type": "string",
                "wf_host": "string",
                "wf_host_ip": "ip",
                "wf_pod": "string",
                "wf_sid": "string",
                "whitelisted": "string",
                "worker_list": "string",
                "x_distil": "string",
                "x_distil_bot": "string",
                "X_distil_browsertype": "string",
                "x_distil_secure": "string"
              };

            const purest_fields = {
              "@timestamp": "date",
              "account_id": "string",
              "agent_id": "string",
              "application": "string",
              "business_account_id": "integer",
              "contact_id": "string",
              "db_code": "string",
              "db_name": "string",
              "db_server": "string",
              "db_username": "string",
              "delivery_agent_id": "string",
              "environment": "string",
              "error": "string",
              "error_host": "string",
              "error_message":"string",
              "error_referrer": "string",
              "error_url": "string",
              "error_url_path": "string",
              "facility": "string",
              "feature_toggle_override_set":"string",
              "http_rewrite_url": "string",
              "lead_id": "string",
              "level": "string",
              "line": "integer",
              "log_length": "integer",
              "log_level": "string",
              "logger_name": "string",
              "logger_topic": "string",
              "logstash": "string",
              "logstash_l1": "string",
              "logstash_l1_timestamp": "date",
              "logstash_transform": "string",
              "message": "string",
              "message_key": "string",
              "message_key_sanitized": "string",
              "method": "string",
              "order_id": "string",
              "params": "string",
              "parent_txid": "string",
              "pdo_connect_attempt": "integer",
              "pdo_connect_time": "float",
              "pdo_driver_name": "string",
              "pdo_error_message": "string",
              "php_cpu_ms": "float",
              "php_hit": "integer",
              "php_pid": "integer",
              "php_tte_ms": "float",
              "port": "integer",
              "purest_resource": "string",
              "purest_service": "string",
              "query_time": "float",
              "request_uri": "string",
              "script_filename": "string",
              "script_name": "string",
              "short_message": "string",
              "short_query": "string",
              "stack_trace": "string",
              "store_id": "short",
              "tags": "string",
              "ticket_id": "integer",
              "timer": "float",
              "txid": "string",
              "user_agent": "string",
              "user_agent_browser": "string",
              "user_agent_device": "string",
              "user_agent_os": "string",
              "user_id": "string",
              "user_ip": "ip",
              "wf_datacenter": "string",
              "wf_index_type": "string",
              "wf_host": "string",
              "wf_host_ip": "ip",
              "wf_pod": "string",
              "wf_index_type": "string",
              "worker_list": "string"
            };

            const admin_fields = {
              "@timestamp": "date",
              "account_id": "string",
              "action": "string",
              "agent_id": "string",
              "application": "string",
              "business_account_id": "integer",
              "contact_id": "string",
              "controller": "string",
              "csnutid": "string",
              "db_code": "string",
              "db_name": "string",
              "db_server": "string",
              "db_username": "string",
              "delivery_agent_id": "string",
              "environment": "string",
              "error_host": "string",
              "error_message":"string",
              "error_referrer": "string",
              "error_url": "string",
              "error_url_path": "string",
              "event_status": "string",
              "facility": "string",
              "feature_toggle_override_set":"string",
              "finance_process_name": "string",
              "finance_sub_team": "string",
              "http_code": "string",
              "http_rewrite_url": "string",
              "inventory_model": "string",
              "inventory_sync_date": "string",
              "key": "string",
              "last_sql_message": "string",
              "lead_id": "string",
              "level": "string",
              "line": "integer",
              "log_length": "integer",
              "log_level": "string",
              "logger_name": "string",
              "logger_topic": "string",
              "logstash": "string",
              "logstash_l1": "string",
              "logstash_l1_timestamp": "date",
              "logstash_transform": "string",
              "message": "string",
              "message_key": "string",
              "message_key_sanitized": "string",
              "new_inventory": "string",
              "order_id": "string",
              "parent_txid": "string",
              "pdo_connect_attempt": "integer",
              "pdo_connect_time": "float",
              "pdo_driver_name": "string",
              "pdo_error_message": "string",
              "php_cpu_ms": "float",
              "php_hit": "integer",
              "php_pid": "integer",
              "php_tte_ms": "float",
              "previous_inventory": "string",
              "quantity": "integer",
              "query": "string",
              "query_time": "float",
              "request_uri": "string",
              "script_filename": "string",
              "script_name": "string",
              "short_message": "string",
              "short_query": "string",
              "sku": "string",
              "stack_trace": "string",
              "store_id": "short",
              "tags": "string",
              "ticket_id": "integer",
              "timer": "float",
              "txid": "string",
              "use_wms_stock": "string",
              "user_agent": "string",
              "user_agent_browser": "string",
              "user_agent_device": "string",
              "user_agent_os": "string",
              "user_ip": "ip",
              "wf_datacenter": "string",
              "wf_index_type": "string",
              "wf_host": "string",
              "wf_host_ip": "ip",
              "wf_pod": "string",
              "wf_sid": "string",
              "wf_index_type": "string",
              "worker_list": "string"
            };

            const wms_fields = {
              "@timestamp": "date",
              "action": "string",
              "app_open_duration": "integer",
              "application": "string",
              "controller": "string",
              "csnid": "string",
              "csnutid": "string",
              "customer_id": "string",
              "db_code": "string",
              "db_name": "string",
              "db_server": "string",
              "db_username": "string",
              "email_address": "string",
              "engine_data_center": "string",
              "engine_server_host": "string",
              "engine_server_status": "string",
              "environment": "string",
              "error": "string",
              "error_host": "string",
              "error_referrer": "string",
              "error_url": "string",
              "error_url_path": "string",
              "facility": "string",
              "feature_toggle_override_set":"string",
              "handling_unit_id": "string",
              "http_code": "string",
              "http_rewrite_url": "string",
              "last_sql_message": "string",
              "level": "string",
              "log_level": "string",
              "logger_name": "string",
              "logger_topic": "string",
              "logstash": "string",
              "logstash_l1": "string",
              "logstash_l1_timestamp": "date",
              "logstash_transform": "string",
              "memory_used_percent": "integer",
              "message": "string",
              "message_key": "string",
              "message_key_sanitized": "string",
              "method": "string",
              "order_id": "string",
              "page_type": "string",
              "params": "string",
              "parent_txid": "string",
              "pdo_connect_attempt": "integer",
              "pdo_connect_time": "float",
              "pdo_driver_name": "string",
              "pdo_error_message": "string",
              "php_cpu_ms": "float",
              "php_hit": "integer",
              "php_pid": "integer",
              "php_tte_ms": "float",
              "purchase_order_number": "string",
              "purest_resource": "string",
              "purest_service": "string",
              "query": "string",
              "query_time": "float",
              "request_uri": "string",
              "rf_gun_request_controller_name": "string",
              "rf_gun_request_elapsed_seconds": "float",
              "rf_gun_request_input_control_number": "string",
              "rf_gun_request_input_hu_id": "string",
              "rf_gun_request_input_load_id": "string",
              "rf_gun_request_input_user_id": "string",
              "rf_gun_request_input_warehouse_id": "string",
              "rf_gun_request_process_object_name": "string",
              "rf_gun_response_sys_shortmsg": "string",
              "rssi": "integer",
              "script_filename": "string",
              "script_name": "string",
              "short_message": "string",
              "short_query": "string",
              "sku": "string",
              "stack_trace": "string",
              "store_id": "short",
              "tags": "string",
              "timer": "float",
              "transaction_log_id": "string",
              "txid": "string",
              "txid_server_addr": "string",
              "user_agent": "string",
              "user_agent_browser": "string",
              "user_agent_device": "string",
              "user_agent_os": "string",
              "user_agent_version": "string",
              "user_id": "string",
              "user_ip": "ip",
              "warehouse_id": "string",
              "wf_datacenter": "string",
              "wf_index_type": "string",
              "wf_host": "string",
              "wf_host_ip": "ip",
              "wf_pod": "string",
              "wf_sid": "string",
              "zone": "string"
            };

            const trns_fields = {
              "@timestamp": "date",
              "action": "string",
              "application": "string",
              "controller": "string",
              "csnid": "string",
              "csnutid": "string",
              "customer_id": "string",
              "db_code": "string",
              "db_name": "string",
              "db_server": "string",
              "db_username": "string",
              "email_address": "string",
              "engine_data_center": "string",
              "engine_server_host": "string",
              "engine_server_status": "string",
              "environment": "string",
              "error": "string",
              "error_host": "string",
              "error_message": "string",
              "error_referrer": "string",
              "error_url": "string",
              "error_url_path": "string",
              "facility": "string",
              "http_code": "string",
              "http_rewrite_url": "string",
              "last_sql_message": "string",
              "level": "string",
              "log_level": "string",
              "logger_name": "string",
              "logger_topic": "string",
              "logstash": "string",
              "logstash_l1": "string",
              "logstash_l1_timestamp": "date",
              "ls_id": "string",
              "message": "string",
              "message_key": "string",
              "message_key_sanitized": "string",
              "op_id": "string",
              "opc_id": "string",
              "opl_id": "string",
              "order_id": "string",
              "page_type": "string",
              "parent_txid": "string",
              "pdo_connect_attempt": "integer",
              "pdo_connect_time": "float",
              "pdo_driver_name": "string",
              "pdo_error_message": "string",
              "php_cpu_ms": "float",
              "php_hit": "integer",
              "php_pid": "integer",
              "php_tte_ms": "float",
              "po_num": "string",
              "purest_resource": "string",
              "query": "string",
              "query_time": "float",
              "script_filename": "string",
              "script_name": "string",
              "short_message": "string",
              "short_query": "string",
              "sku": "string",
              "slm_id": "string",
              "stack_trace": "string",
              "store_id": "short",
              "timer": "float",
              "transaction_log_id": "string",
              "truck_id": "string",
              "txid": "string",
              "txid_server_addr": "string",
              "user_agent": "string",
              "user_agent_browser": "string",
              "user_agent_device": "string",
              "user_agent_os": "string",
              "user_id": "string",
              "user_ip": "ip",
              "wf_datacenter": "string",
              "wf_index_type": "string",
              "wf_host": "string",
              "wf_host_ip": "ip",
              "wf_pod": "string",
              "wf_sid": "string"
            };

            const supply_chain_services_fields = {
              "@timestamp": "date",
              "account_id": "string",
              "action": "string",
              "akamai_bot": "string",
              "akamai_reputation": "string",
              "application": "string",
              "available_for_delivery_scheduling": "string",
              "bclg_id": "integer",
              "bi_ped_rank": "integer",
              "business_account_id": "integer",
              "call_type": "string",
              "caller_application": "string",
              "caller_ip_address": "string",
              "caller_operation": "string",
              "caller_operation.string": "string",
              "caller_source": "string",
              "cannot_ship_to_postal_code": "string",
              "class_name": "string",
              "contact_id": "string",
              "container_type": "string",
              "controller": "string",
              "csnid": "string",
              "csnutid": "string",
              "customer_id": "string",
              "cy_id": "integer",
              "db_code": "string",
              "db_name": "string",
              "db_server": "string",
              "db_username": "string",
              "email_address": "string",
              "engine_data_center": "string",
              "engine_server_host": "string",
              "engine_server_status": "string",
              "environment": "string",
              "error_codes": "string",
              "error_host": "string",
              "error_message":"string",
              "error_referrer": "string",
              "error_url": "string",
              "error_url_path": "string",
              "finance_process_name": "string",
              "finance_sub_team": "string",
              "http_code": "string",
              "http_rewrite_url": "string",
              "last_sql_message": "string",
              "lead_id": "string",
              "level": "string",
              "log_level": "string",
              "logger_name": "string",
              "logger_topic": "string",
              "logstash": "string",
              "logstash_l1": "string",
              "logstash_l1_timestamp": "date",
              "logstash_transform": "string",
              "message": "string",
              "message_key": "string",
              "message_key_sanitized": "string",
              "method_name": "string",
              "method_name.string": "string",
              "ndc": "string",
              "op_id": "integer",
              "op_sp_id": "integer",
              "op_two_day_guarantee": "string",
              "option_list": "string",
              "order_id": "string",
              "page_type": "string",
              "parent_txid": "string",
              "pdo_connect_attempt": "integer",
              "pdo_connect_time": "float",
              "pdo_driver_name": "string",
              "pdo_error_message": "string",
              "perimeterx_block_reason": "string",
              "perimeterx_score": "string",
              "perimeterx_uuid": "string",
              "php_cpu_ms": "float",
              "php_hit": "integer",
              "php_tte_ms": "float",
              "po_num_list": "string",
              "postal_code": "string",
              "postal_code_region_id": "integer",
              "purest_resource": "string",
              "qty_list": "string",
              "query": "string",
              "query_time": "float",
              "requested_uri": "string",
              "requested_uri.string": "string",
              "rg_id": "string",
              "script_filename": "string",
              "script_name": "string",
              "dcbrvice": "string",
              "ship_speed": "integer",
              "short_message": "string",
              "short_query": "string",
              "skip_cache": "string",
              "sku": "string",
              "sku_list": "string",
              "so_id": "integer",
              "spl_d_list": "string",
              "stack_trace": "string",
              "store_id": "short",
              "tags": "string",
              "timer": "float",
              "txid": "string",
              "txid_server_addr": "string",
              "user_agent": "string",
              "user_agent_browser": "string",
              "user_agent_device": "string",
              "user_agent_os": "string",
              "user_id": "string",
              "user_ip": "ip",
              "wf_datacenter": "string",
              "wf_index_type": "string",
              "wf_host": "string",
              "wf_host_ip": "ip",
              "wf_pod": "string",
              "wf_sid": "string",
              "whitelisted": "string",
              "x_distil": "string",
              "x_distil_bot": "string",
              "x_distil_browsertype": "string",
              "x_distil_secure": "string"
            };

            const solr_fields = {
              "@timestamp": "date",
              "application": "string",
              "collection": "string",
              "facility": "string",
              "hits": "integer",
              "level": "string",
              "log_level": "string",
              "logger_name": "string",
              "logstash": "string",
              "logstash_l1": "string",
              "logstash_l1_timestamp": "date",
              "logstash_transform": "string",
              "message": "string",
              "message_key": "string",
              "message_key_sanitized": "string",
              "qt": "string",
              "qtime": "integer",
              "query": "string",
              "short_message": "string",
              "short_query": "string",
              "status": "integer",
              "tags": "string",
              "wf_datacenter": "string",
              "wf_index_type": "string",
              "wf_host": "string",
              "wf_host_ip": "ip",
              "wf_pod": "string",
              "wf_sid": "string"
            };

            const valid_fields = {
              "@timestamp": "date",
              "account_id": "string",
              "action": "string",
              "agent_id": "string",
              "akamai_bot": "string",
              "akamai_reputation": "string",
              "application": "string",
              "business_account_id": "integer",
              "class_name": "string",
              "contact_id": "string",
              "controller": "string",
              "csnid": "string",
              "csnutid": "string",
              "customer_id": "string",
              "db_code": "string",
              "db_name": "string",
              "db_server": "string",
              "db_username": "string",
              "delivery_agent_id": "string",
              "email_address": "string",
              "engine_data_center": "string",
              "engine_server_host": "string",
              "engine_server_status": "string",
              "environment": "string",
              "error_host": "string",
              "error_message": "string",
              "error_referrer": "string",
              "error_url": "string",
              "error_url_path": "string",
              "feature_toggle_override_set":"string",
              "finance_process_name": "string",
              "finance_sub_team": "string",
              "http_code": "string",
              "http_rewrite_url": "string",
              "last_sql_message": "string",
              "lead_id": "string",
              "level": "string",
              "log_level": "string",
              "logger_name": "string",
              "logger_topic": "string",
              "logstash": "string",
              "logstash_l1": "string",
              "logstash_l1_timestamp": "date",
              "logstash_transform": "string",
              "message": "string",
              "message_key": "string",
              "message_key_sanitized": "string",
              "order_id": "string",
              "page_type": "string",
              "parent_txid": "string",
              "pdo_connect_attempt": "integer",
              "pdo_connect_time": "float",
              "pdo_driver_name": "string",
              "pdo_error_message": "string",
              "perimeterx_block_reason": "string",
              "perimeterx_score": "string",
              "perimeterx_uuid": "string",
              "php_cpu_ms": "float",
              "php_hit": "integer",
              "php_tte_ms": "float",
              "purest_resource": "string",
              "query": "string",
              "query_time": "float",
              "script_filename": "string",
              "script_name": "string",
              "short_message": "string",
              "short_query": "string",
              "sku": "string",
              "stack_trace": "string",
              "store_id": "short",
              "tags": "string",
              "ticket_id": "integer",
              "timer": "float",
              "thread_name": "string",
              "txid": "string",
              "txid_server_addr": "string",
              "user_agent": "string",
              "user_agent_browser": "string",
              "user_agent_device": "string",
              "user_agent_os": "string",
              "user_id": "string",
              "user_ip": "ip",
              "wf_datacenter": "string",
              "wf_index_type": "string",
              "wf_host": "string",
              "wf_host_ip": "ip",
              "wf_pod": "string",
              "wf_sid": "string",
              "whitelisted": "string",
              "worker_list": "string",
              "x_distil": "string",
              "x_distil_bot": "string",
              "x_distil_browsertype": "string",
              "x_distil_secure": "string"
            };
            #... there are more of tose

            # we could make a tester for that?

            # we can't loop or map so we kind of have to do this as a function?

            # remove datatypes like short, long and default them to integer
            # remove datatypes such as double and generalize to float
            # remove dataypte data as it is treated as striong


            let fields = match event of
              case %{logger_topic == "WMS"} => wms_fields
              case %{logger_topic == "TRANS"} => trans_fields
              case %{present logger_topic} => valid_fields
              case %{application == "stores"} => stores_fields
              case %{application == "purest"} => purest_fields
              case %{application == "purestwebsvc"} => purest_fields
              case %{application == "admin"}  => admin_fields
              case %{application == "inventory"} => supply_chain_services_fields
              case %{application == "liteship"} => supply_chain_services_fields
              case %{application == "solrcloud"} => solr_fields
              default => valid_fields
            end;
                        
            let slush = {};            

            for event of
               # this is ugly but since we can't short circut with `and`, and
               # valid_fields[k] will error the execution we have to make a own clause
               # for it.
               case (k, v) when (present fields[k]) =>
                  let t = type::as_string(v),
                  match {"v": v, "e": fields[k], "t": t} of
                    case %{e == t} => null
                    case %{e == "date", t == "string"} => null
                    case %{e == "ip", v ~= cidr ||} => null
                    default => let event = patch event of erase k end, let slush[k] = v
                  end
               case (k, v) => null
            end;
                        
            let slush = json::encode(slush);

            match string::len(slush) > 10000 of
              case true => let event.slush = string::substr(slush, 0, 10000)
              default => null
            end;

            # We dont' have the time function yet as we need to collect examples and see what functions are needed

            let event.start_timestamp = core::datetime::parse(event["@timestamp"], "%Y-%m-%dT%H:%M:%S%.3fZ") / 100;
             
            event
    links:
      in: [runtime]
      runtime: [out]
      runtime/drop: [out]
      runtime/error: [error]
