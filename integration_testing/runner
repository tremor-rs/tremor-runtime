#!/usr/bin/env bash

set -e
set -u
set -o pipefail

BASEDIR=$(dirname "$0")
FEATURES="drop_copy kafka mssql php-runtime"

. ${BASEDIR}/common.sh

help() {
    cat <<EOF
Usage: ${0##*/} [-hd] [-t TARGET] [-c CMD] [TEST]...
tremor-server test runner for basic and property tests
  -h         show this help
  -l         lists all tests
  -n NAME    creates a new basic test from the template
  -d         set -x for tracing
  -t TARGET  selects the build target 'debug', 'release', or 'none'
  -c CMD     command to run for tests, defaults to the command appropriate to the
             build target. Required for 'none'.
EOF
}
while getopts hdlt:c:n: opt; do
    case $opt in
        h)
            help
            exit 0
            ;;
        d)
            set -x
            ;;
        t)
            build_target=$OPTARG
            ;;
        l)
            echo "basic tests:"
            ls -d ${BASEDIR}/basic/*.test | sed -e 's/\.test$//g' -e "s;^${BASEDIR}/basic/;* ;g"
            echo ""
            echo "property tests:"
            ls -d ${BASEDIR}/property/*.test | sed -e 's/\.test$//g' -e "s;^${BASEDIR}/property/;* ;g"
            exit 0
            ;;
        n)
            test=$OPTARG
            if [ -d ${BASEDIR}/basic/${test}.test ]
            then
                echo "Test ${test} already exists"
                exit 1
            fi
            cp -r ${BASEDIR}/basic/template.test ${BASEDIR}/basic/${test}.test
            exit 0
            ;;
        c)
            run_cmd=$OPTARG
            ;;
        *)
            help
            exit 1
            ;;
    esac
done

if [ -z ${build_target+x} ]
then
    build_target=debug
fi

set -ex
case $build_target in
    debug)
        cargo build -p tremor-server --features "${FEATURES}"
        ;;
    release)
        cargo build --p tremor-server --release --features "${FEATURES}"
        ;;
    none)
        ;;
    *)
        echo "Unknown build target `$BUILD_TARGET`"
        exit 1
        ;;
esac
set +ex

shift "$((OPTIND-1))"

set -u
case $build_target in
    debug)
        run_cmd=${run_cmd:-"${BASEDIR}/../target/debug/tremor-server"}
        ;;
    release)
        run_cmd=${run_cmd:-"${BASEDIR}/../target/release/tremor-server"}
        ;;
    none)
        if [ -z ${run_cmd+x} ]
        then
            echo "the run command (-c) needs to be set with the 'none' target."
            exit 1
        fi
esac
set +u

run_cmd="$run_cmd --no-api"

echo $run_cmd


if [ ! -z ${@+x} ]
then
    tests=$@
fi

echo "tests: $tests"

# run the property tests

# if [ -z "${tests}" ]
# then
#     propertytests=$(ls -d ${BASEDIR}/property/*.test | sed -e 's/\.test$//g' -e "s;^${BASEDIR}/property/;;g")
# fi

for test in $propertytests
do

    TEST_DIR="${BASEDIR}/property/${test}.test"

    got_file="${TEST_DIR}/got.json"
    exp_file="${TEST_DIR}/exp.json"
    log_file="${TEST_DIR}/log.txt"

    yaml_file="${TEST_DIR}/config.yaml"
    if [ ! -f "${yaml_file}" ]
    then
        error "${test}: file '${yaml_file}' not found"
        exit 1
    fi

    sed -e "s;{in};${data_file};" -e "s;{out};${gen_file};" -e "s;{dir};${TEST_DIR};" $yaml_file > "${yaml_file}.out";

    readme_file="${TEST_DIR}/README.md"
    if [ ! -f "${readme_file}" ]
    then
        error "${test}: file '${readme_file}' not found"
        exit 1
    fi

    SCRIPT_DIR="${TEST_DIR}/scripts"

    cat ${readme_file}

    # run the setup script
    ${SCRIPT_DIR}/setup.sh ${SCRIPT_DIR} $exp_file

    # start tremor detached
    $run_cmd -m --config "${yaml_file}.out" 2> ${log_file} &
    # get the PID to kill tremor later on
    TREMOR_PID=$!

    # need to let tremor start
    ${SCRIPT_DIR}/check_for_liveness.sh ${SCRIPT_DIR}

    # run the test
    ${SCRIPT_DIR}/run_test.sh ${SCRIPT_DIR}

    # capture the 'got' for comparison against the exp
    ${SCRIPT_DIR}/check_finished.sh ${SCRIPT_DIR} ${got_file}

    if diff ${got_file} ${exp_file} > /dev/null
    then
        ok "${test}: passed"
        PASSED_TESTS="${PASSED_TESTS}$test "
    else
        error "${test}: failed"
        FAILED_TESTS="${FAILED_TESTS}$test "
    fi

    kill -9 $TREMOR_PID

done

# now run basic tests
if [ -z "${tests}" ]
then
    basictests=$(ls -d ${BASEDIR}/basic/*.test | sed -e 's/\.test$//g' -e "s;^${BASEDIR}/basic/;;g")
else
    basictests=$tests
fi

for test in $basictests
do
    TEST_DIR="${BASEDIR}/basic/${test}.test"

    config_file="${TEST_DIR}/config"
    data_file="${TEST_DIR}/in.json"

    gen_file="${TEST_DIR}/gen.json"
    exp_file="${TEST_DIR}/exp.json"
    log_file="${TEST_DIR}/log.txt"
    mapping_file="${TEST_DIR}/../link.yaml"

    if [ ! -d "${TEST_DIR}" ]
    then
        error "${test}: directory '${TEST_DIR}' not found"
        exit 1
    fi

    in_file="${TEST_DIR}/in.json.xz"
    if [ ! -f "${in_file}" ]
    then
        error "${test}: file '${in_file}' not found"
        exit 1
    fi

    yaml_file="${TEST_DIR}/config.yaml"
    if [ ! -f "${yaml_file}" ]
    then
        error "${test}: file '${yaml_file}' not found"
        exit 1
    fi

    out_file="${TEST_DIR}/out.json.xz"
    if [ ! -f "${out_file}" ]
    then
        error "${test}: file '${out_file}' not found"
        exit 1
    fi

    readme_file="${TEST_DIR}/README.md"
    if [ ! -f "${readme_file}" ]
    then
        error "${test}: file '${readme_file}' not found"
        exit 1
    fi

    # reset config
    should_crash=0
    threads=1
    skip=0

    if [ -f "${config_file}" ]
    then
        . ${config_file}
    else
        echo "Missing config file: ${config_file}"
        exit 1
    fi

    sed -e "s;{in};${data_file};" -e "s;{out};${gen_file};" -e "s;{dir};${TEST_DIR};" $yaml_file > "${yaml_file}.out";

    # Limiting Configuration

    cat ${readme_file}
    if [ "${skip}" -eq 1 ]
    then
        warn "${test}:  skipped"
    else
        xzcat $in_file > $data_file
        if $run_cmd --config "${yaml_file}.out" "${mapping_file}" 2> ${log_file}
        then
            if [ "${should_crash}" -eq 0 ] # if we do not wanted this test to crash
            then
                xzcat ${out_file} > ${exp_file}
                rm ${data_file}
                cat ${gen_file} | jq -S -c '.' > ${gen_file}.jq
                cat ${exp_file} | jq -S -c '.' > ${exp_file}.jq
                if diff ${gen_file}.jq ${exp_file}.jq > /dev/null
                then
                    rm ${gen_file} ${exp_file} ${log_file} "${yaml_file}.out"
                    ok "${test}: passed"
                    PASSED_TESTS="${PASSED_TESTS}$test "
                else
                    error "${test}: failed"
                    FAILED_TESTS="${FAILED_TESTS}$test "
                fi
            else
                error "${test}: execution failure expected but success received"
                FAILED_TESTS="${FAILED_TESTS}$test "
            fi
        else
            exit_code=$?
            rm ${data_file}
            if [ ${exit_code} -eq 139 ]
            then
                error "${test}: SEGFAULT"
                FAILED_TESTS="${FAILED_TESTS}$test "
            else
                if [ "${should_crash}" -eq 0 ]
                then
                    error "${test}: execution failed"
                    cat ${log_file}
                    echo
                    echo
                    FAILED_TESTS="${FAILED_TESTS}$test "
                else
                    ok "${test}: execution failure"
                    PASSED_TESTS="${PASSED_TESTS}$test "
                fi
            fi
        fi
    fi
done

if [ ! -z "${PASSED_TESTS+x}" ]
then
    echo "Passed test cases: ${PASSED_TESTS}"
fi

if [ ! -z "${FAILED_TESTS+x}" ]
then
    echo "Failed test cases: ${FAILED_TESTS}"
    exit 1
fi

if [ -z "${PASSED_TESTS+x}" ]
then
    echo "No tests run"
    exit 1
fi
