onramp:
  - id: in
    type: file
    config:
      source: {in}
      close_on_done: true

offramp:
  - id: out
    type: file
    config:
      file: {out}

pipeline:
  - id: main
    interface:
      inputs:
        - in
      outputs:
        - out
    nodes:
      - id: r
        op: runtime::tremor
        config:
          script: |
            #mutate {
            #  rename => { "full_message" => "message" }
            #}
            
            let event = patch event of
              upsert "message" => event.full_message,
              upsert "tremor" => system::hostname()
            end;
            
            # require '/etc/logstash/utils/field_formatter'
            # FieldFormatter.load_gelf_field_lists()
            
            # alternative
            
            # once: execute the following expression during compile time?
            # system::evel(<code_path>, <metadata>, <event_data>);
            # let normalized_fields_mapping = once system::eval("/path/to/normalized_fields_mapping.json", {}, {}); TODO
            const normalized_fields_mapping = {
              "_action": "action",
              "AjaxRequest": "ajax_request",
              "Application": "application",
              "application_name": "application",
              "ApplicationName": "application",
              "app_name": "application",
              "appname": "application",
              "AvailableForDeliveryScheduling": "available_for_delivery_scheduling",
              "BclgID": "bclg_id",
              "BiPEDRank": "bi_ped_rank",
              "BotFlag": "bot_flag",
              "CallerApplication": "caller_application",
              "CallerIPaddress": "caller_ip_address",
              "CallerOperation": "caller_operation",
              "CallerSource": "caller_source",
              "CallType": "call_type",
              "CannotShipToPostalCode": "cannot_ship_to_postal_code",
              "ClassName": "class_name",
              "ContainerType": "container_type",
              "_controller": "controller",
              "CSNId": "csnid",
              "CSNUtId": "csnutid",
              "cu_id": "customer_id",
              "CuId": "customer_id",
              "CyID": "cy_id",
              "DbCode": "db_code",
              "DbName": "db_name",
              "DbServer": "db_server",
              "DbUsername": "db_username",
              "employee_id": "user_id",
              "Environment": "environment",
              "ErrorCodes": "error_codes",
              "ErrorHost": "error_host",
              "ErrorReferer": "error_referrer",
              "ErrorURL": "error_url",
              "ErrorURLPath": "error_url_path",
              "ErrorURLQueryString": "error_url_query_string",
              "extranet_user_id": "user_id",
              "GeoIpCityCountryName": "geoip_city_country_name",
              "GeoIpCity": "geoip_city",
              "GeoIpPostalCode": "geoip_postal_code",
              "host": "wf_host",
              "HTTPCode": "http_code",
              "HttpRewriteURL": "http_rewrite_url",
              "hu_id": "handling_unit_id",
              "JenkinsBuildNumber": "jenkins_build_number",
              "JenkinsBuildURL": "jenkins_build_url",
              "JenkinsExecutorNumber": "jenkins_executor_number",
              "JenkinsJobName": "jenkins_job_name",
              "JenkinsNodeName": "jenkins_node_name",
              "JenkinsURL": "jenkins_url",
              "LastSqlMessage": "last_sql_message",
              "logger": "logger_name",
              "loggerName": "logger_name",
              "LoggerName": "logger_name",
              "login_success": "login_success",
              "LogLength_int": "log_length",
              "manufacturer_id": "user_id",
              "@message": "message",
              "MethodName": "method_name",
              "NDC": "ndc",
              "noPXCookie": "no_px_cookie",
              "OpID": "op_id",
              "OpSpID": "op_sp_id",
              "OptionList": "option_list",
              "OpTwoDayGuarantee": "op_two_day_guarantee",
              "Order_id": "order_id",
              "or_id": "order_id",
              "OrID": "order_id",
              "pagetype": "page_type",
              "ParentTXID": "parent_txid",
              "PDOConnectAttempt": "pdo_connect_attempt",
              "PDOConnectTime": "pdo_connect_time",
              "PDODriverName": "pdo_driver_name",
              "PDOErrorMessage": "pdo_error_message",
              "po_number": "purchase_order_number",
              "PONumList": "po_num_list",
              "po_num": "purchase_order_number",
              "PostalCode": "postal_code",
              "PostalCodeRegionID": "postal_code_region_id",
              "PuREST_Method": "method",
              "PuREST_Resource": "purest_resource",
              "PuREST_Service": "purest_service",
              "QTime": "qtime",
              "QtyList": "qty_list",
              "Query": "query",
              "QueryTimeInSec": "query_time",
              "QueryTime": "query_time",
              "RequestedUri": "requested_uri",
              "RequestURI": "request_uri",
              "rf_gun_response_SYS_SHORTMSG": "rf_gun_response_sys_shortmsg",
              "RgID": "rg_id",
              "ScriptFilename": "script_filename",
              "ScriptName": "script_name",
              "service": "service",
              "ShipSpeed": "ship_speed",
              "ShortQuery": "short_query",
              "SkipCache": "skip_cache",
              "SKUList": "sku_list",
              "SoID": "so_id",
              "source_host": "wf_host_ip",
              "SpIDList": "spl_d_list",
              "StackTrace": "stack_trace",
              "StoreID": "store_id",
              "Store": "store_id",
              "supplier_id": "user_id",
              "tran_log_id": "transaction_log_id",
              "TXID": "txid",
              "UserAgentBrowser": "user_agent_browser",
              "UserAgentDevice": "user_agent_device",
              "UserAgentOS": "user_agent_os",
              "UserAgent": "user_agent",
              "UserAgentVersion": "user_agent_version",
              "UserInfo": "user_info",
              "UserIp": "user_ip",
              "version": "gelf_version",
              "WFdatacenter": "wf_datacenter",
              "WFhostip": "wf_host_ip",
              "WFhost": "wf_host",
              "WFpod": "wf_pod",
              "WFSID": "wf_sid",
              "wh_id": "warehouse_id"
            };
            
            #... there are more of those
            
            # # set gelf log level
            # FieldFormatter.set_gelf_log_level(event)
            
            # 105   def self.set_gelf_log_level(event)
            # 106     if (!event.get('log_level').nil? && !(/(DEBUG|INFO|WARN|ERROR|FATAL)/ =~ event.get('log_level')).nil?)
            # 107       # log_level is already set, nothing needs to be done
            # 108     elsif (!event.get('short_message').nil? && !(match_data = event.get('short_message').scan(/(\d+\s)*(DEBUG|INFO|WARN|ERROR|FATAL)(_LOG_MESSAGE)*/)).empty?)
            # 109       # attempt to copy log_level from short_message (most cases)
            # 110       event.set('log_level', match_data[0][1])
            # 111     else
            # 112       # if all fails, default log_level to INFO
            # 113       event.set('log_level', 'INFO')
            # 114     end
            # 115   end
            
            # Idea: contained tester that parses it's argument as a  if a value
            #       is contained in the parameters
            # contained|["DEBUG", "INFO", "WARN", "ERROR", "FATAL"]|
            
            
            let event = merge event of match event of
                # If we have log level set and log level is one of the known log levels we are good
                case r = %{ present log_level } when array::contains(["DEBUG", "INFO", "WARN", "ERROR", "FATAL"], r.log_level) => {}
                ## with contains bar
                # case r = %{ log_level = log_level ~= contained|["DEBUG", "INFO", "WARN", "ERROR", "FATAL"]| } => r.log_level
                # If short message is set and contains a known log level use that
                # case _ when re::is_match("(\\d+\\s)*(DEBUG|INFO|WARN|ERROR|FATAL)(_LOG_MESSAGE)*", event.short_message) => re::replace("(\\d+\\s)*(?P<loglevel>DEBUG|INFO|WARN|ERROR|FATAL)(_LOG_MESSAGE)*", event.short_message, "$loglevel");
                case r = %{ short_message ~= re|(\\d+\\s)*(?P<log_level>DEBUG\|INFO\|WARN\|ERROR\|FATAL)(_LOG_MESSAGE)| } => r.short_message
                # default to INFO
                default => {"log_level": "INFO"}
              end
            end;
            
            
            # # normalize field names
            # FieldFormatter.normalize_gelf_field_names(event)
            
            # 117   def self.normalize_gelf_field_names(event)
            # 118     for key in @@normalized_fields_mapping.keys
            # 119       if (!event.get(key).nil? && event.get(@@normalized_fields_mapping[key]).nil?) then
            # 120         event.set(@@normalized_fields_mapping[key], event.get(key))
            # 121         remove_event_field(event, key)
            # 122       end
            # 123     end
            # 124   end
            
            # Only keep keys we know about
            # let event = record::select(event, record::keys(normalized_fields_mapping));
            
            # or as a comprehension combining the two above.
            # assumption <array>[<key>] returns nil if key isn't present
            # TODO: nil vs null: now do we describe 'exists' ?

            let event = record::rename(event, normalized_fields_mapping);
            #for normalized_fields_mapping of 
            #  case (from, to) => let event = patch event of move from => to end
            #end;

            # # create wf_* fields
            # FieldFormatter.update_wf_host_details(event)
            
            # 33     # Keep the following list in sync with modules/wayfair/lib/facter/pod.rb
            # 34     locations = {
            # 35       '10.22.0.0/17'    => {pod: 'web01', datacenter: 'bo3'},
            # 36       '10.21.0.0/17'    => {pod: 'sec01', datacenter: 'bo3'},
            # 37       '10.224.0.0/16'   => {pod: 'bo1', datacenter: 'bo1'},
            # 38       '10.225.0.0/17'   => {pod: 'bo1', datacenter: 'bo1'},
            # 39       '10.225.128.0/17' => {pod: 'secbo1', datacenter: 'bo1'},
            # 40       '10.60.0.0/17'    => {pod: 'web03', datacenter: 'se2'},
            # 41       '10.61.0.0/17'    => {pod: 'sec03', datacenter: 'se2'},
            # 42       '10.236.0.0/17'   => {pod: 'ie2', datacenter: 'ie2'},
            # 43       '10.236.128.0/17' => {pod: 'ie2', datacenter: 'ie2'},
            # 44       '10.237.0.0/17'   => {pod: 'ie2', datacenter: 'ie2'},
            # 45       '10.238.0.0/16'   => {pod: 'ie2', datacenter: 'ie2'},
            # 46       '10.237.128.0/17' => {pod: 'sec04', datacenter: 'ie2'},
            # 47       '10.22.128.0/18'  => {pod: 'cit01', datacenter: 'bo3'},
            # 48       '10.22.192.0/19'  => {pod: 'cit01', datacenter: 'bo3'},
            # 49       '10.22.240.0/20'  => {pod: 'san01', datacenter: 'bo3'},
            # 50       '10.24.0.0/16'    => {pod: 'dev01', datacenter: 'dev'},
            # 51       '10.228.0.0/15'   => {pod: 'devbo1', datacenter: 'devbo1'},
            # 52       '10.230.196.0/24' => {pod: 'stgbo1', datacenter: 'stbo1'},
            # 53       '10.230.200.0/24' => {pod: 'stgbo1', datacenter: 'stbo1'},
            # 54       '10.230.206.0/24' => {pod: 'stgbo1', datacenter: 'stbo1'},
            # 55       '10.230.208.0/24' => {pod: 'stgbo1', datacenter: 'stbo1'},
            # 56       '10.230.210.0/24' => {pod: 'stgbo1', datacenter: 'stbo1'},
            # 57       '10.231.6.0/24'   => {pod: 'stgbo1', datacenter: 'stbo1'},
            # 58       '10.230.134.0/24' => {pod: 'secstgbo1', datacenter: 'stbo1'},
            # 59       '10.230.136.0/24' => {pod: 'secstgbo1', datacenter: 'stbo1'},
            # 60       '10.230.138.0/24' => {pod: 'secstgbo1', datacenter: 'stbo1'},
            # 61       '10.231.128.0/24' => {pod: 'secstgbo1', datacenter: 'stbo1'},
            # 62       '10.60.128.0/18'  => {pod: 'cit03', datacenter: 'se2'},
            # 63       '10.60.192.0/19'  => {pod: 'cit03', datacenter: 'se2'},
            # 64       '10.60.240.0/20'  => {pod: 'san03', datacenter: 'se2'},
            # 65       '10.23.0.0/17'    => {pod: 'web02', datacenter: 'ep'},
            # 66       '10.20.0.0/17'    => {pod: 'sec02', datacenter: 'ep'},
            # 67       '10.11.0.0/16'    => {pod: 'ma2', datacenter: 'ma2'},
            # 68       '10.28.0.0/16'    => {pod: 'ny1', datacenter: 'ny1'},
            # 69       '10.248.0.0/16'   => {pod: 'se1', datacenter: 'se1'},
            # 70       '10.249.0.0/17'   => {pod: 'se1', datacenter: 'se1'},
            # 71       '10.249.128.0/18' => {pod: 'secse1', datacenter: 'se1'},
            # 72       '10.249.192.0/19' => {pod: 'se1', datacenter: 'se1'}
            # 73     }
            # 74 
            # 75     if /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d+)?$/.match(event.get('wf_host_ip'))
            # 76       ip_addr, port = event.get('wf_host_ip').split(':')
            # 77       event.set('wf_host_ip', ip_addr)
            # 78       if (event.get('wf_host_port').nil?)
            # 79         event.set('wf_host_port', port)
            # 80       end
            # 81       source_ip = IPAddr.new(event.get('wf_host_ip'), Socket::AF_INET)
            # 82       locations.each do |ip_addr, location|
            # 83         if (IPAddr.new(ip_addr).include?(source_ip))
            # 84           if (event.get('wf_pod').nil?)
            # 85             event.set('wf_pod', location[:pod])
            # 86           end
            # 87           if (event.get('wf_datacenter').nil?)
            # 88             event.set('wf_datacenter', location[:datacenter])
            # 89           end
            # 90           break
            # 91         end
            # 92       end
            # 93     end
            # 94 
            # 95     # if coudn't determine use logstash's datacenter and pod
            # 96     if (event.get('wf_pod').nil?)
            # 97       event.set('wf_pod', 'bo1')
            # 98     end
            # 99     if (event.get('wf_datacenter').nil?)
            # 100       event.set('wf_datacenter', 'bo1')
            # 101     end
            # 102 
            # 103   end
            

            match event of
              case r = %{wf_host_ip ~= dissect|%{wf_host_ip}:%{wf_host_port}|} => let event.wf_host_ip = r.wf_host_ip.wf_host_ip
              default => null # wf_host_port was already been set no need to update it
            end;
            
            # set defaults;
            # re-set pod and datacenter even if they existed
            # Assumption: cidr/.../ => cidr match
            let event = merge event of match event of
                case %{present wf_datacenter, present wf_pod}                                                                             => {} # don't overwrite existing settings
                case %{wf_host_ip ~= cidr|10.225.128.0/17|}                                                                               => {"wf_pod": "secbo1",    "wf_datacenter": "bo1"}
                case %{wf_host_ip ~= cidr|10.22.0.0/17|}                                                                                  => {"wf_pod": "web01",     "wf_datacenter": "bo3"}
                case %{wf_host_ip ~= cidr|10.21.0.0/17|}                                                                                  => {"wf_pod": "sec01",     "wf_datacenter": "bo3"}
                case %{wf_host_ip ~= cidr|10.22.128.0/18,10.22.192.0/19|}                                                                 => {"wf_pod": "cit01",     "wf_datacenter": "bo3"}
                case %{wf_host_ip ~= cidr|10.22.240.0/20|}                                                                                => {"wf_pod": "san01",     "wf_datacenter": "bo3"}
                case %{wf_host_ip ~= cidr|10.60.0.0/17|}                                                                                  => {"wf_pod": "web03",     "wf_datacenter": "se2"}
                case %{wf_host_ip ~= cidr|10.61.0.0/17|}                                                                                  => {"wf_pod": "sec03",     "wf_datacenter": "se2"}
                case %{wf_host_ip ~= cidr|10.60.128.0/18,10.60.192.0/19|}                                                                 => {"wf_pod": "cit03",     "wf_datacenter": "se2"}
                case %{wf_host_ip ~= cidr|10.60.240.0/20|}                                                                                => {"wf_pod": "san03",     "wf_datacenter": "se2"}
                case %{wf_host_ip ~= cidr|10.236.0.0/17,10.236.128.0/17,10.237.0.0/17,10.238.0.0/16|}                                     => {"wf_pod": "ie2",       "wf_datacenter": "ie2"}
                case %{wf_host_ip ~= cidr|10.237.128.0/17|}                                                                               => {"wf_pod": "sec04",     "wf_datacenter": "ie2"}
                case %{wf_host_ip ~= cidr|10.24.0.0/16|}                                                                                  => {"wf_pod": "dev01",     "wf_datacenter": "dev"}
                case %{wf_host_ip ~= cidr|10.228.0.0/15|}                                                                                 => {"wf_pod": "devbo1",    "wf_datacenter": "devbo1"}
                case %{wf_host_ip ~= cidr|10.230.196.0/24,10.230.200.0/24,10.230.206.0/24,10.230.208.0/24,10.230.210.0/24,10.231.6.0/24|} => {"wf_pod": "stgbo1",    "wf_datacenter": "stbo1"}
                case %{wf_host_ip ~= cidr|10.230.134.0/24,10.230.136.0/24,10.230.138.0/24,10.231.128.0/24|}                               => {"wf_pod": "secstgbo1", "wf_datacenter": "stbo1"}
                case %{wf_host_ip ~= cidr|10.23.0.0/17|}                                                                                  => {"wf_pod": "web02",     "wf_datacenter": "ep"}
                case %{wf_host_ip ~= cidr|10.20.0.0/17|}                                                                                  => {"wf_pod": "sec02",     "wf_datacenter": "ep"}
                case %{wf_host_ip ~= cidr|10.11.0.0/16|}                                                                                  => {"wf_pod": "ma2",       "wf_datacenter": "ma2"}
                case %{wf_host_ip ~= cidr|10.28.0.0/16|}                                                                                  => {"wf_pod": "ny1",       "wf_datacenter": "ny1"}
                case %{wf_host_ip ~= cidr|10.248.0.0/16,10.249.192.0/19,10.249.0.0/17|}                                                   => {"wf_pod": "se1",       "wf_datacenter": "se1"}
                case %{wf_host_ip ~= cidr|10.249.128.0/18|}                                                                               => {"wf_pod": "secse1",    "wf_datacenter": "se1"}
                #case %{wf_host_ip ~= cidr|10.224.0.0/16|}                                                                                => {"wf_pod": "bo1",       "wf_datacenter": "bo1"}
                #case %{wf_host_ip ~= cidr|10.225.0.0/17|}                                                                                => {"wf_pod": "bo1",       "wf_datacenter": "bo1"}
                default                                                                                                                   => {"wf_pod": "bo1",       "wf_datacenter": "bo1"}
              end
            end;
            
            # # create slush
            # FieldFormatter.create_slush(event)
            
            # 126   def self.create_slush(event)
            # 127     slush_fields = Hash.new
            # 128     event_valid_fields = Hash.new
            # 129     event_fields = event.to_hash.keys
            # 130     # Checking for the application field/logger topic allows us to determine different valid fields to split off indices
            # 131     if event_fields.include? 'logger_topic'
            # 132       if event.get('logger_topic').to_s == 'WMS'
            # 133         event_valid_fields = @@wms_fields
            # 134       elsif event.get('logger_topic').to_s == 'TRNS'
            # 135         event_valid_fields = @@trns_fields
            # 136       else
            # 137         event_valid_fields = @@valid_fields
            # 138       end
            # 139     elsif event_fields.include? 'application'
            # 140       if event.get('application').to_s == 'stores'
            # 141         event_valid_fields = @@stores_fields
            # 142       elsif event.get('application').to_s == 'purest' || event.get('application').to_s == 'purestwebsvc'
            # 143         event_valid_fields = @@purest_fields
            # 144       elsif event.get('application').to_s == 'admin'
            # 145         event_valid_fields = @@admin_fields
            # 146       elsif event.get('application').to_s == 'inventory' || event.get('application').to_s == 'liteship'
            # 147         event_valid_fields = @@supply_chain_services_fields
            # 148       elsif event.get('application').to_s == 'solrcloud'
            # 149         event_valid_fields = @@solr_fields
            # 150       else
            # 151         event_valid_fields = @@valid_fields
            # 152       end
            # 153     else
            # 154       event_valid_fields = @@valid_fields
            # 155     end
            # 156     for field_name in event_fields
            # 157       if event_valid_fields.include? (field_name)
            # 158         field_type = event_valid_fields[field_name]
            # 159         # if this is a valid field and the field type is correct, skip to the next iteration
            # 160         if ((['string', 'date'].include? field_type) \
            # 161           || (['short', 'long', 'integer'].include? field_type and (Integer(event.get(field_name).to_s) rescue nil)) \
            # 162           || (['float', 'double'].include? field_type and (Float(event.get(field_name).to_s) rescue nil)) \
            # 163           || (['ip',].include? field_type and (IPAddr.new(event.get(field_name)) rescue nil)))
            # 164           next
            # 165         end
            # 166       end
            # 167       # otherwise, insert into slush
            # 168       slush_fields[field_name] = event.get(field_name)
            # 169       remove_event_field(event, field_name)
            # 170     end
            # 171     event.set('slush', slush_fields.map { |e| e.join('=') }.join("\n"))
            # 172     truncate_field(event, 'slush', 10000) # truncate slush field to 10,000 chars
            # 173     truncate_field(event, 'error', 5000)  # truncate error field to 5k chars
            # 174   end
            
            # let store_field_types = once system::eval("/path/to/store_field_types.json", {}, {}); TODO
            
            const stores_fields = {
                "@timestamp": "date",
                "account_id": "string",
                "action": "string",
                "ajax_request": "string",
                "akamai_bot": "string",
                "akamai_reputation": "string",
                "application": "string",
                "bot_flag": "string",
                "business_account_id": "integer",
                "can_admin_logon": "string",
                "class_name": "string",
                "codebase": "string",
                "combined_query_count": "integer",
                "contact_id": "string",
                "controller": "string",
                "csnid": "string",
                "csnutid": "string",
                "customer_id": "string",
                "db_code": "string",
                "db_name": "string",
                "db_query_count": "string",
                "db_server": "string",
                "db_uncached_query_count": "string",
                "db_username": "string",
                "email_address": "string",
                "engine_data_center": "string",
                "engine_server_host": "string",
                "engine_server_status": "string",
                "environment": "string",
                "error_host": "string",
                "error_message": "string",
                "error_referrer": "string",
                "error_url": "string",
                "error_url_path": "string",
                "error_url_query_string": "string",
                "event_id": "string",
                "feature_toggle_override_set":"string",
                "geoip_city": "string",
                "geoip_city_country_name": "string",
                "geoip_postal_code": "string",
                "graphql_query_id": "string",
                "http_code": "string",
                "http_rewrite_url": "string",
                "key": "string",
                "last_sql_message": "string",
                "lead_id": "string",
                "libra_variations": "string",
                "log_level": "string",
                "logger_name": "string",
                "logger_topic": "string",
                "login_error": "string",
                "login_success": "string",
                "login_type": "string",
                "logstash": "string",
                "logstash_l1": "string",
                "logstash_l1_timestamp": "date",
                "logstash_transform": "string",
                "memcache_query_count": "string",
                "message": "string",
                "message_key": "string",
                "message_key_sanitized": "string",
                "no_px_cookie": "integer",
                "order_id": "string",
                "page": "string",
                "page_type": "string",
                "parent_txid": "string",
                "pdo_connect_attempt": "integer",
                "pdo_connect_time": "float",
                "pdo_driver_name": "string",
                "pdo_error_message": "string",
                "perimeterx_block_action": "string",
                "perimeterx_block_reason": "string",
                "perimeterx_score": "string",
                "perimeterx_uuid": "string",
                "php_cpu_ms": "float",
                "php_hit": "integer",
                "php_tte_ms": "float",
                "purest_resource": "string",
                "query": "string",
                "query_parameters": "string",
                "query_time": "float",
                "redis_query_count": "string",
                "request_uri": "string",
                "script_filename": "string",
                "script_name": "string",
                "service_query_count": "string",
                "short_message": "string",
                "short_query": "string",
                "sitespect_variation": "string",
                "sku": "string",
                "stack_trace": "string",
                "store_id": "short",
                "tags": "string",
                "test_case_run_id": "string",
                "test_name": "string",
                "test_session_id": "string",
                "test_suite_run_id": "string",
                "ticket_id": "integer",
                "timer": "float",
                "txid": "string",
                "txid_server_addr": "string",
                "user_agent": "string",
                "user_agent_browser": "string",
                "user_agent_device": "string",
                "user_agent_os": "string",
                "user_agent_version": "string",
                "user_id": "string",
                "user_info": "string",
                "user_ip": "ip",
                "value": "string",
                "wf_datacenter": "string",
                "wf_index_type": "string",
                "wf_host": "string",
                "wf_host_ip": "ip",
                "wf_pod": "string",
                "wf_sid": "string",
                "whitelisted": "string",
                "worker_list": "string",
                "x_distil": "string",
                "x_distil_bot": "string",
                "X_distil_browsertype": "string",
                "x_distil_secure": "string"
              };
            
            const purest_fields = {
              "@timestamp": "date",
              "account_id": "string",
              "agent_id": "string",
              "application": "string",
              "business_account_id": "integer",
              "contact_id": "string",
              "db_code": "string",
              "db_name": "string",
              "db_server": "string",
              "db_username": "string",
              "delivery_agent_id": "string",
              "environment": "string",
              "error": "string",
              "error_host": "string",
              "error_message":"string",
              "error_referrer": "string",
              "error_url": "string",
              "error_url_path": "string",
              "facility": "string",
              "feature_toggle_override_set":"string",
              "http_rewrite_url": "string",
              "lead_id": "string",
              "level": "string",
              "line": "integer",
              "log_length": "integer",
              "log_level": "string",
              "logger_name": "string",
              "logger_topic": "string",
              "logstash": "string",
              "logstash_l1": "string",
              "logstash_l1_timestamp": "date",
              "logstash_transform": "string",
              "message": "string",
              "message_key": "string",
              "message_key_sanitized": "string",
              "method": "string",
              "order_id": "string",
              "params": "string",
              "parent_txid": "string",
              "pdo_connect_attempt": "integer",
              "pdo_connect_time": "float",
              "pdo_driver_name": "string",
              "pdo_error_message": "string",
              "php_cpu_ms": "float",
              "php_hit": "integer",
              "php_pid": "integer",
              "php_tte_ms": "float",
              "port": "integer",
              "purest_resource": "string",
              "purest_service": "string",
              "query_time": "float",
              "request_uri": "string",
              "script_filename": "string",
              "script_name": "string",
              "short_message": "string",
              "short_query": "string",
              "stack_trace": "string",
              "store_id": "short",
              "tags": "string",
              "ticket_id": "integer",
              "timer": "float",
              "txid": "string",
              "user_agent": "string",
              "user_agent_browser": "string",
              "user_agent_device": "string",
              "user_agent_os": "string",
              "user_id": "string",
              "user_ip": "ip",
              "wf_datacenter": "string",
              "wf_index_type": "string",
              "wf_host": "string",
              "wf_host_ip": "ip",
              "wf_pod": "string",
              "wf_index_type": "string",
              "worker_list": "string"
            };
            
            const admin_fields = {
              "@timestamp": "date",
              "account_id": "string",
              "action": "string",
              "agent_id": "string",
              "application": "string",
              "business_account_id": "integer",
              "contact_id": "string",
              "controller": "string",
              "csnutid": "string",
              "db_code": "string",
              "db_name": "string",
              "db_server": "string",
              "db_username": "string",
              "delivery_agent_id": "string",
              "environment": "string",
              "error_host": "string",
              "error_message":"string",
              "error_referrer": "string",
              "error_url": "string",
              "error_url_path": "string",
              "event_status": "string",
              "facility": "string",
              "feature_toggle_override_set":"string",
              "finance_process_name": "string",
              "finance_sub_team": "string",
              "http_code": "string",
              "http_rewrite_url": "string",
              "inventory_model": "string",
              "inventory_sync_date": "string",
              "key": "string",
              "last_sql_message": "string",
              "lead_id": "string",
              "level": "string",
              "line": "integer",
              "log_length": "integer",
              "log_level": "string",
              "logger_name": "string",
              "logger_topic": "string",
              "logstash": "string",
              "logstash_l1": "string",
              "logstash_l1_timestamp": "date",
              "logstash_transform": "string",
              "message": "string",
              "message_key": "string",
              "message_key_sanitized": "string",
              "new_inventory": "string",
              "order_id": "string",
              "parent_txid": "string",
              "pdo_connect_attempt": "integer",
              "pdo_connect_time": "float",
              "pdo_driver_name": "string",
              "pdo_error_message": "string",
              "php_cpu_ms": "float",
              "php_hit": "integer",
              "php_pid": "integer",
              "php_tte_ms": "float",
              "previous_inventory": "string",
              "quantity": "integer",
              "query": "string",
              "query_time": "float",
              "request_uri": "string",
              "script_filename": "string",
              "script_name": "string",
              "short_message": "string",
              "short_query": "string",
              "sku": "string",
              "stack_trace": "string",
              "store_id": "short",
              "tags": "string",
              "ticket_id": "integer",
              "timer": "float",
              "txid": "string",
              "use_wms_stock": "string",
              "user_agent": "string",
              "user_agent_browser": "string",
              "user_agent_device": "string",
              "user_agent_os": "string",
              "user_ip": "ip",
              "wf_datacenter": "string",
              "wf_index_type": "string",
              "wf_host": "string",
              "wf_host_ip": "ip",
              "wf_pod": "string",
              "wf_sid": "string",
              "wf_index_type": "string",
              "worker_list": "string"
            };
            
            const wms_fields = {
              "@timestamp": "date",
              "action": "string",
              "app_open_duration": "integer",
              "application": "string",
              "controller": "string",
              "csnid": "string",
              "csnutid": "string",
              "customer_id": "string",
              "db_code": "string",
              "db_name": "string",
              "db_server": "string",
              "db_username": "string",
              "email_address": "string",
              "engine_data_center": "string",
              "engine_server_host": "string",
              "engine_server_status": "string",
              "environment": "string",
              "error": "string",
              "error_host": "string",
              "error_referrer": "string",
              "error_url": "string",
              "error_url_path": "string",
              "facility": "string",
              "feature_toggle_override_set":"string",
              "handling_unit_id": "string",
              "http_code": "string",
              "http_rewrite_url": "string",
              "last_sql_message": "string",
              "level": "string",
              "log_level": "string",
              "logger_name": "string",
              "logger_topic": "string",
              "logstash": "string",
              "logstash_l1": "string",
              "logstash_l1_timestamp": "date",
              "logstash_transform": "string",
              "memory_used_percent": "integer",
              "message": "string",
              "message_key": "string",
              "message_key_sanitized": "string",
              "method": "string",
              "order_id": "string",
              "page_type": "string",
              "params": "string",
              "parent_txid": "string",
              "pdo_connect_attempt": "integer",
              "pdo_connect_time": "float",
              "pdo_driver_name": "string",
              "pdo_error_message": "string",
              "php_cpu_ms": "float",
              "php_hit": "integer",
              "php_pid": "integer",
              "php_tte_ms": "float",
              "purchase_order_number": "string",
              "purest_resource": "string",
              "purest_service": "string",
              "query": "string",
              "query_time": "float",
              "request_uri": "string",
              "rf_gun_request_controller_name": "string",
              "rf_gun_request_elapsed_seconds": "float",
              "rf_gun_request_input_control_number": "string",
              "rf_gun_request_input_hu_id": "string",
              "rf_gun_request_input_load_id": "string",
              "rf_gun_request_input_user_id": "string",
              "rf_gun_request_input_warehouse_id": "string",
              "rf_gun_request_process_object_name": "string",
              "rf_gun_response_sys_shortmsg": "string",
              "rssi": "integer",
              "script_filename": "string",
              "script_name": "string",
              "short_message": "string",
              "short_query": "string",
              "sku": "string",
              "stack_trace": "string",
              "store_id": "short",
              "tags": "string",
              "timer": "float",
              "transaction_log_id": "string",
              "txid": "string",
              "txid_server_addr": "string",
              "user_agent": "string",
              "user_agent_browser": "string",
              "user_agent_device": "string",
              "user_agent_os": "string",
              "user_agent_version": "string",
              "user_id": "string",
              "user_ip": "ip",
              "warehouse_id": "string",
              "wf_datacenter": "string",
              "wf_index_type": "string",
              "wf_host": "string",
              "wf_host_ip": "ip",
              "wf_pod": "string",
              "wf_sid": "string",
              "zone": "string"
            };
            
            const trns_fields = {
              "@timestamp": "date",
              "action": "string",
              "application": "string",
              "controller": "string",
              "csnid": "string",
              "csnutid": "string",
              "customer_id": "string",
              "db_code": "string",
              "db_name": "string",
              "db_server": "string",
              "db_username": "string",
              "email_address": "string",
              "engine_data_center": "string",
              "engine_server_host": "string",
              "engine_server_status": "string",
              "environment": "string",
              "error": "string",
              "error_host": "string",
              "error_message": "string",
              "error_referrer": "string",
              "error_url": "string",
              "error_url_path": "string",
              "facility": "string",
              "http_code": "string",
              "http_rewrite_url": "string",
              "last_sql_message": "string",
              "level": "string",
              "log_level": "string",
              "logger_name": "string",
              "logger_topic": "string",
              "logstash": "string",
              "logstash_l1": "string",
              "logstash_l1_timestamp": "date",
              "ls_id": "string",
              "message": "string",
              "message_key": "string",
              "message_key_sanitized": "string",
              "op_id": "string",
              "opc_id": "string",
              "opl_id": "string",
              "order_id": "string",
              "page_type": "string",
              "parent_txid": "string",
              "pdo_connect_attempt": "integer",
              "pdo_connect_time": "float",
              "pdo_driver_name": "string",
              "pdo_error_message": "string",
              "php_cpu_ms": "float",
              "php_hit": "integer",
              "php_pid": "integer",
              "php_tte_ms": "float",
              "po_num": "string",
              "purest_resource": "string",
              "query": "string",
              "query_time": "float",
              "script_filename": "string",
              "script_name": "string",
              "short_message": "string",
              "short_query": "string",
              "sku": "string",
              "slm_id": "string",
              "stack_trace": "string",
              "store_id": "short",
              "timer": "float",
              "transaction_log_id": "string",
              "truck_id": "string",
              "txid": "string",
              "txid_server_addr": "string",
              "user_agent": "string",
              "user_agent_browser": "string",
              "user_agent_device": "string",
              "user_agent_os": "string",
              "user_id": "string",
              "user_ip": "ip",
              "wf_datacenter": "string",
              "wf_index_type": "string",
              "wf_host": "string",
              "wf_host_ip": "ip",
              "wf_pod": "string",
              "wf_sid": "string"
            };
            
            const supply_chain_services_fields = {
              "@timestamp": "date",
              "account_id": "string",
              "action": "string",
              "akamai_bot": "string",
              "akamai_reputation": "string",
              "application": "string",
              "available_for_delivery_scheduling": "string",
              "bclg_id": "integer",
              "bi_ped_rank": "integer",
              "business_account_id": "integer",
              "call_type": "string",
              "caller_application": "string",
              "caller_ip_address": "string",
              "caller_operation": "string",
              "caller_operation.string": "string",
              "caller_source": "string",
              "cannot_ship_to_postal_code": "string",
              "class_name": "string",
              "contact_id": "string",
              "container_type": "string",
              "controller": "string",
              "csnid": "string",
              "csnutid": "string",
              "customer_id": "string",
              "cy_id": "integer",
              "db_code": "string",
              "db_name": "string",
              "db_server": "string",
              "db_username": "string",
              "email_address": "string",
              "engine_data_center": "string",
              "engine_server_host": "string",
              "engine_server_status": "string",
              "environment": "string",
              "error_codes": "string",
              "error_host": "string",
              "error_message":"string",
              "error_referrer": "string",
              "error_url": "string",
              "error_url_path": "string",
              "finance_process_name": "string",
              "finance_sub_team": "string",
              "http_code": "string",
              "http_rewrite_url": "string",
              "last_sql_message": "string",
              "lead_id": "string",
              "level": "string",
              "log_level": "string",
              "logger_name": "string",
              "logger_topic": "string",
              "logstash": "string",
              "logstash_l1": "string",
              "logstash_l1_timestamp": "date",
              "logstash_transform": "string",
              "message": "string",
              "message_key": "string",
              "message_key_sanitized": "string",
              "method_name": "string",
              "method_name.string": "string",
              "ndc": "string",
              "op_id": "integer",
              "op_sp_id": "integer",
              "op_two_day_guarantee": "string",
              "option_list": "string",
              "order_id": "string",
              "page_type": "string",
              "parent_txid": "string",
              "pdo_connect_attempt": "integer",
              "pdo_connect_time": "float",
              "pdo_driver_name": "string",
              "pdo_error_message": "string",
              "perimeterx_block_reason": "string",
              "perimeterx_score": "string",
              "perimeterx_uuid": "string",
              "php_cpu_ms": "float",
              "php_hit": "integer",
              "php_tte_ms": "float",
              "po_num_list": "string",
              "postal_code": "string",
              "postal_code_region_id": "integer",
              "purest_resource": "string",
              "qty_list": "string",
              "query": "string",
              "query_time": "float",
              "requested_uri": "string",
              "requested_uri.string": "string",
              "rg_id": "string",
              "script_filename": "string",
              "script_name": "string",
              "service": "string",
              "ship_speed": "integer",
              "short_message": "string",
              "short_query": "string",
              "skip_cache": "string",
              "sku": "string",
              "sku_list": "string",
              "so_id": "integer",
              "spl_d_list": "string",
              "stack_trace": "string",
              "store_id": "short",
              "tags": "string",
              "timer": "float",
              "txid": "string",
              "txid_server_addr": "string",
              "user_agent": "string",
              "user_agent_browser": "string",
              "user_agent_device": "string",
              "user_agent_os": "string",
              "user_id": "string",
              "user_ip": "ip",
              "wf_datacenter": "string",
              "wf_index_type": "string",
              "wf_host": "string",
              "wf_host_ip": "ip",
              "wf_pod": "string",
              "wf_sid": "string",
              "whitelisted": "string",
              "x_distil": "string",
              "x_distil_bot": "string",
              "x_distil_browsertype": "string",
              "x_distil_secure": "string"
            };
            
            const solr_fields = {
              "@timestamp": "date",
              "application": "string",
              "collection": "string",
              "facility": "string",
              "hits": "integer",
              "level": "string",
              "log_level": "string",
              "logger_name": "string",
              "logstash": "string",
              "logstash_l1": "string",
              "logstash_l1_timestamp": "date",
              "logstash_transform": "string",
              "message": "string",
              "message_key": "string",
              "message_key_sanitized": "string",
              "qt": "string",
              "qtime": "integer",
              "query": "string",
              "short_message": "string",
              "short_query": "string",
              "status": "integer",
              "tags": "string",
              "wf_datacenter": "string",
              "wf_index_type": "string",
              "wf_host": "string",
              "wf_host_ip": "ip",
              "wf_pod": "string",
              "wf_sid": "string"
            };
            
            const valid_fields = {
              "@timestamp": "date",
              "account_id": "string",
              "action": "string",
              "agent_id": "string",
              "akamai_bot": "string",
              "akamai_reputation": "string",
              "application": "string",
              "business_account_id": "integer",
              "class_name": "string",
              "contact_id": "string",
              "controller": "string",
              "csnid": "string",
              "csnutid": "string",
              "customer_id": "string",
              "db_code": "string",
              "db_name": "string",
              "db_server": "string",
              "db_username": "string",
              "delivery_agent_id": "string",
              "email_address": "string",
              "engine_data_center": "string",
              "engine_server_host": "string",
              "engine_server_status": "string",
              "environment": "string",
              "error_host": "string",
              "error_message": "string",
              "error_referrer": "string",
              "error_url": "string",
              "error_url_path": "string",
              "feature_toggle_override_set":"string",
              "finance_process_name": "string",
              "finance_sub_team": "string",
              "http_code": "string",
              "http_rewrite_url": "string",
              "last_sql_message": "string",
              "lead_id": "string",
              "level": "string",
              "log_level": "string",
              "logger_name": "string",
              "logger_topic": "string",
              "logstash": "string",
              "logstash_l1": "string",
              "logstash_l1_timestamp": "date",
              "logstash_transform": "string",
              "message": "string",
              "message_key": "string",
              "message_key_sanitized": "string",
              "order_id": "string",
              "page_type": "string",
              "parent_txid": "string",
              "pdo_connect_attempt": "integer",
              "pdo_connect_time": "float",
              "pdo_driver_name": "string",
              "pdo_error_message": "string",
              "perimeterx_block_reason": "string",
              "perimeterx_score": "string",
              "perimeterx_uuid": "string",
              "php_cpu_ms": "float",
              "php_hit": "integer",
              "php_tte_ms": "float",
              "purest_resource": "string",
              "query": "string",
              "query_time": "float",
              "script_filename": "string",
              "script_name": "string",
              "short_message": "string",
              "short_query": "string",
              "sku": "string",
              "stack_trace": "string",
              "store_id": "short",
              "tags": "string",
              "ticket_id": "integer",
              "timer": "float",
              "thread_name": "string",
              "txid": "string",
              "txid_server_addr": "string",
              "user_agent": "string",
              "user_agent_browser": "string",
              "user_agent_device": "string",
              "user_agent_os": "string",
              "user_id": "string",
              "user_ip": "ip",
              "wf_datacenter": "string",
              "wf_index_type": "string",
              "wf_host": "string",
              "wf_host_ip": "ip",
              "wf_pod": "string",
              "wf_sid": "string",
              "whitelisted": "string",
              "worker_list": "string",
              "x_distil": "string",
              "x_distil_bot": "string",
              "x_distil_browsertype": "string",
              "x_distil_secure": "string"
            };
            #... there are more of tose
            
            # we could make a tester for that?
            
            # we can't loop or map so we kind of have to do this as a function?
            
            # remove datatypes like short, long and default them to integer
            # remove datatypes such as double and generalize to float
            # remove dataypte data as it is treated as striong
            
            
            let fields = match event of
              case %{logger_topic == "WMS"} => wms_fields
              case %{logger_topic == "TRANS"} => trans_fields
              case %{present logger_topic} => valid_fields
              case %{application == "stores"} => stores_fields
              case %{application == "purest"} => purest_fields
              case %{application == "purestwebsvc"} => purest_fields
              case %{application == "admin"}  => admin_fields
              case %{application == "inventory"} => supply_chain_services_fields
              case %{application == "liteship"} => supply_chain_services_fields
              case %{application == "solrcloud"} => solr_fields
              default => valid_fields
            end;
                        
            let slush = {};            

            for event of
               # this is ugly but since we can't short circut with `and`, and
               # valid_fields[k] will error the execution we have to make a own clause
               # for it.
               case (k, v) when (present fields[k]) =>
                  let t = type::as_string(v),
                  match {"v": v, "e": fields[k], "t": t} of
                    case %{e == t} => null
                    case %{e == "date", t == "string"} => null
                    case %{e == "ip", v ~= cidr ||} => null
                    default => let event = patch event of erase k end, let slush[k] = v
                  end
               case (k, v) => null
            end;
                        
            let slush = json::encode(slush);
            
            match string::len(slush) > 10000 of
              case true => let event.slush = string::substr(slush, 0, 10000)
              default => let event.slush = slush
            end;
            
            # We dont' have the time function yet as we need to collect examples and see what functions are needed
            # event_time = event.get('@timestamp').to_s.gsub(/\.\d+Z$/, '+00:00')
            # event_time = DateTime.strptime(event_time, '%Y-%m-%dT%H:%M:%S%z').to_time.utc.to_i
            # event.set('start_timestamp', event_time)
            
            # let event.start_timestamp = datetime::parse(re::replace("\\.\\d+Z$", event["@timestamp"], "+00:00"), "%Y-%m-%dT%H:%M:%S%z");
            let event.start_timestamp = datetime::parse(event["@timestamp"], "%Y-%m-%dT%H:%M:%S%.3fZ") / 100;
             
            event         
    links:
      in: [ r ]
      r: [ out ]

binding:
  - id: test
    links:
      '/onramp/in/{instance}/out': [ '/pipeline/main/{instance}/in' ]
      '/pipeline/main/{instance}/out': [ '/offramp/out/{instance}/in' ]

