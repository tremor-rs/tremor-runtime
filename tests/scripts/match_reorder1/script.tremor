let event = match event of
  case 2 => {"k": "two"}
  case 1 => {"k": "one"}
  case 3 => {"k": "three"}
  case 4 => {"k": "four"}
  case 5 => {"k": "five"}
  case 6 => {"k": "six"}
  case 7 => {"k": "seven"}
  case 8 => {"k": "eight"}
  case 9 => {"k": "nine"}
  case 10 => {"k": "ten"}
  case 11 => {"k": "eleven"}
  case _ => {"k": event}
end;

match event of
  case %{v == 1} => let event = "snot"
  case %{v == 2} => let event = "snot"
  case %{k == 4} => let event = "four"
  case %{k ~= glob|two*|} => let event = 2
  case %{k == 6} => let event = "six"
  case %{k ~= re|one+|} => let event = 1
  case %{k == 5} => let event = "five"
  case %{k == 7} => let event = 7
  case %{k == 8} => let event = 8
  case %{present k} => let event = event.k
  case _ => null
end;

let event = {"k": match event of
  case 1 => 1
  case 2 => 2
  case 3 => 3
  case 4 => 4
  case 5 => 1
  case 6 => 2
  case 70 => "snot"
  case 80 => "badger"
  case ~ glob|five| => 5
  case "six" => 6
  case 7 => "seven"
  case ~ re|four| => 4
  case 8 => "eight"
  case "nine" => 9
  case _ => event
end};

let a = match event of 
  case %{k ~= re|snot|} => "snot"
  case %{k == 1} => "one"
  case %{k ~= re|badger|} => "badger"
  case %{k == 2} => "two"
  case %{absent k} => "snot"
  case %{k == 3} => "three"
  case %{k ~= glob|*six|} => 6
  case %{k ~= glob|eight*|} => 8
  case a = _ => match a.k of
      case 4 => a.k
      case 5 => "five"
      case _ => a.k
    end
end;

let event = match match event of
  case %{k ~= re|snot|} => "snot"
  case %{k == 1} => "one"
  case %{k ~= re|badger|} => "badger"
  case %{k == 2} => "two"
  case %{k == 3} => "three"
  case %{k ~= glob|*six|} => 6
  case %{k ~= glob|eight*|} => 8
  case _ => event.k
end of
  case a = _ => match a of
      case 4 => a
      case 5 => "five"
      case _ => a
    end
end;

match a of
  case event => event
  case _ => "snot: #{a}"
end