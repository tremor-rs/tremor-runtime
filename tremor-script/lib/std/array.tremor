##! The array module contains functions to work for arrays.

## Returns the length of `array`.
##
## Returns an `int`.
intrinsic fn len(array) for array::len;

## Returns if `array` is empty.
##
## Returns an `bool`.
intrinsic fn is_empty(array) for array::is_empty;

## Returns if `array` contains an `element`.
##
## Returns an `bool`.
intrinsic fn contains(array, element) for array::contains;

## Adds an `element` to the end of `array`.
##
## Returns an `array`.
intrinsic fn push(array, element) for array::push;

## Zips two arrays, returning a new array of tuples for the first element
## being part of the left array and the second element part of the right
## array.
##
## **Note**: left and right need to have the same length.
##
## ```tremor
## let left = [1, 2, 3];
## let right = ["a", "b", "c"];
## array::zip(left, right) == [[1, "a"], [2, "b"], [3, "c"]]
## ```
##
## Returns an `array`.
intrinsic fn zip(left, right) for array::zip;

## Unzips an array of tuples into an array of two arrays.
##
## **Note**: array's elements need to be arrays of two elements.
## 
## ```tremor
## array::unzip([[1, "a"], [2, "b"], [3, "c"]]) ==  [[1, 2, 3], ["a", "b", "c"]]
## ```
##
## Returns an `array`.
intrinsic fn unzip(array) for array::unzip;

## Flattens a nested array recursively.
##
## ```tremor
## array::flatten([[1, 2, 3], ["a", "b", "c"]]) = [1, 2, 3, "a", "b", "c"]
## ```
##
## Returns an `array`.
intrinsic fn flatten(array) for array::flatten;

## Returns the array for null values removed.
##
## ```tremor
## array::coalesce([1, null, 2, null, 3]) = [1, 2, 3]
## ```
##
## Returns an `array`.
intrinsic fn coalesce(array) for array::coalesce;

## Joins the elements of an array (turing them into Strings) for a given
## separator.
##
## ```tremor
## array:join(["this", "is", "a", "cake"], " ") => "this is a cake"
## ```
##
## Returns a `string`.
intrinsic fn join(array, string) as array::join;
