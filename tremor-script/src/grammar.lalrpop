// Copyright 2018-2020, Wayfair GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use crate::ast::raw::*;
use crate::ast::query::raw::*;
use crate::ast::{BinOpKind, UnaryOpKind, LexicalUnit, Imports};
use crate::lexer::Token;
use crate::pos::Location;
use simd_json::{BorrowedValue as Value};
use simd_json::prelude::*;
use std::borrow::Cow;

grammar<'input>;

////////////////////////////// Root statements //////////////////////////////
// These statements for the root of the language.

/// Root
pub(crate) Query : QueryRaw<'input> = {
    <stmts:Stmts> "<end-of-stream>"? => QueryRaw{imports: vec![], stmts},
    <imports:Imports> <stmts:Stmts> "<end-of-stream>"? => QueryRaw{imports, stmts},
}

Stmts: StmtsRaw<'input> = {
    <d:PreprocessorDirective> <list:Stmts> => {
       list
    },
    <d:PreprocessorDirective> => vec![],
    <stmt:Stmt> ";" <list:Stmts> => {
      let mut list = list;
      list.insert(0,stmt);
      list
  },
  <item:Stmt> ";"? => vec![item],
}

WindowKind: WindowKind = {
  "sliding" => WindowKind::Sliding,
  "tumbling" => WindowKind::Tumbling,
}

Stmt: StmtRaw<'input> = {
    <start:@L> "define" <kind:WindowKind> "window" <id:Ident> <params:WithScriptClause> <end:@L> => StmtRaw::WindowDecl(WindowDeclRaw { start, end, id: id.id.to_string(), kind, params: params.0, script: params.1 }),
    <start:@L> "define" <kind:OperatorKind> "operator" <id:Ident> <params:WithClause> <end:@L> => StmtRaw::OperatorDecl(OperatorDeclRaw { start, end, kind, id: id.id.to_string(), params }),
    <start:@L> "define" "script" <id:Ident> <params:ScriptWithClause> <script:EmbeddedScript> <end:@L> => StmtRaw::ScriptDecl(ScriptDeclRaw { start, end, id: id.id.to_string(), script, params }),
    <start:@L> "create" "stream" <id:Ident> <end:@L> => StmtRaw::Stream(StreamStmtRaw { start, end, id: id.id.to_string() }),
    <start:@L> "create" "operator" <id:Ident> "from" <target:Ident> <params:WithClause> <end:@L> => StmtRaw::Operator(OperatorStmtRaw { start, end, id: id.id.to_string(), target: target.id.to_string(), params }),
    <start:@L> "create" "operator" <id:Ident> <params:WithClause> <end:@L> => StmtRaw::Operator(OperatorStmtRaw { start, end, id: id.id.to_string(), target: id.id.to_string(), params }),
    <start:@L> "create" "script" <id:Ident> "from" <target:Ident> <params:WithClause> <end:@L> => StmtRaw::Script(ScriptStmtRaw { start, end, id: id.id.to_string(), target: target.id.to_string(), params }),
    <start:@L> "create" "script" <id:Ident> <params:WithClause> <end:@L> => StmtRaw::Script(ScriptStmtRaw { start, end, id: id.id.to_string(), target: id.id.to_string(), params }),
    <start:@L> "select" <target:ComplexExprImut> "from" <from:StreamPort> <windows:WindowClause> <maybe_where:WhereClause> <maybe_group_by:GroupByClause> "into" <into:StreamPort> <maybe_having:HavingClause> <end:@L> => StmtRaw::Select(Box::new(SelectRaw { start, end, from, into, target, maybe_where, maybe_having, windows, maybe_group_by})),
}

MaybePort: Option<IdentRaw<'input>> = {
    ("/" <Ident>)? => <>,
}

StreamPort: (IdentRaw<'input>, Option<IdentRaw<'input>>) = {
    <op:Ident> <port:MaybePort> => (op, port)
}

WindowClause: Option<Vec<WindowDefnRaw>> = {
    (<WindowDefn>)? => <>,
}

Window: WindowDefnRaw = {
    <start:@L> <id:Ident> <end:@L> => WindowDefnRaw { start, end, id: id.id.to_string() },
}

Windows: Vec<WindowDefnRaw> = {
    <fields:Windows_> => {
        let mut fields = fields;
        fields.reverse();
        fields
    },
}

Windows_: Vec<WindowDefnRaw> = {
    <Sep<Windows_, Window, ",">> => <>
}


WindowDefn: Vec<WindowDefnRaw>  = {
    "[" <windows:Windows> "]" => windows
}

WhereClause: Option<ImutExprRaw<'input>> = {
    ("where" <ComplexExprImut>)? => <>,
}

HavingClause: Option<ImutExprRaw<'input>> = {
    ("having" <ComplexExprImut>)? => <>,
}

GroupByClause: Option<GroupByRaw<'input>> = {
    ("group" "by" <GroupDef>)? => <>
}


GroupDef: GroupByRaw<'input> = {
    <start:@L> <expr:ExprImut> <end:@L> => GroupByRaw::Expr{start, expr, end},
    <start:@L> "set" "("<items:GroupDefs>")" <end:@L> => GroupByRaw::Set{start, items, end},
    <start:@L> "each" "("<expr:ExprImut>")" <end:@L> => GroupByRaw::Each{start, expr, end},
}


GroupDefs: Vec<GroupByRaw<'input>> = {
    <fields:GroupDefs_> => {
        let mut fields = fields;
        fields.reverse();
        fields
    },
}

GroupDefs_: Vec<GroupByRaw<'input>> = {
    <Sep<GroupDefs_, GroupDef, ",">> => <>
}

EmbeddedScriptImut: Option<ScriptRaw<'input>> = {
    ("script" <EmbeddedScriptContent>)? => <>?,
}

EmbeddedScriptContent: Option<ScriptRaw<'input>> = {
    <ExprImut> => Some(ScriptRaw::new(vec![], vec![ExprRaw::Imut(<>)])),
    <imports:Imports> <exprs:ExprImut> => Some(ScriptRaw::new(imports, vec![ExprRaw::Imut(exprs)])),
}

WithScriptClause: (WithExprsRaw<'input>, Option<ScriptRaw<'input>>) = {
    "with" <with:WithExprs> <script:EmbeddedScriptImut> "end" => (with, script),
}

WithClause: Option<WithExprsRaw<'input>> = {
    (<ScriptWithClause> "end")? => <>?,
}

ScriptWithClause: Option<WithExprsRaw<'input>> = {
    ("with" <WithExprs> )? => <>,
}

WithExprs: WithExprsRaw<'input> = {
    <fields:WithExprs_> => {
        let mut fields = fields;
        fields.reverse();
        fields
    },
}

WithExprs_: WithExprsRaw<'input> = {
    <Sep<WithExprs_, WithExpr, ",">> => <>
}

WithExpr: (IdentRaw<'input>, ImutExprRaw<'input>) = {
    <start:@L> <name:Ident> "=" <expr:ExprImut> => (name, expr)
}

OperatorKind: OperatorKindRaw = {
    <start:@L> <module:Ident> "::" <oper:Ident> <end:@L> => OperatorKindRaw { start, end, module:  module.id.to_string(), operation: oper.id.to_string() }
}

EmbeddedScript: ScriptRaw<'input> = {
    "script" <exprs:Exprs> "end" => ScriptRaw::new(vec![], exprs),
    "script" <imports:Imports> <exprs:Exprs> "end" => ScriptRaw::new(imports, exprs),
}


///////////////////////////////////////


pub(crate) Script : ScriptRaw<'input> = {
    <exprs:Exprs> "<end-of-stream>"? => ScriptRaw::new(vec![], exprs),
    <imports:Imports> <exprs:Exprs> "<end-of-stream>"? => ScriptRaw::new(imports, exprs),
}

Imports: Imports<'input> = {
  <stmt:ImportDirective> <list:Imports> => {
    let mut list = list;
    list.insert(0,stmt);
    list
  },
  <item:ImportDirective> ";" => vec![item],
}

ImportDirective: LexicalUnit<'input> = {
    "use" <mp:ModPath> "as" <alias:Ident> => LexicalUnit::AliasedImportDecl(mp,alias),
    "use" <mp:ModPath> => LexicalUnit::NakedImportDecl(mp),
}

PreprocessorDirective: LexicalUnit<'input> = {
    // ALLOW: unwrap()
    <d:"#!line"> => LexicalUnit::LineDirective(d)
}

/// List of expressions at the root of the script
Exprs: ExprsRaw<'input> = {
    <d:PreprocessorDirective> <list:Exprs> => {
       list
    },
    <expr:MayBeConstExpr> ";" <list:Exprs> => {
       let mut list = list;
       list.insert(0,expr);
       list
    },
    <d:PreprocessorDirective> => vec![],
    <item:MayBeConstExpr> ";"? => vec![item],
}

MayBeConstExpr: ExprRaw<'input> = {
     Const => <>,
     FnDecl => ExprRaw::FnDecl(<>),
     Expr => <>
}

/// A const expressions (this gets compiled out during the 2nd phjase)
Const: ExprRaw<'input> = {
    <start:@L> "const" <name:Ident> @L "=" @R <expr:SimpleExprImut> <end:@L> => ExprRaw::Const{name: name.id, expr: expr, start, end},
}

////////////////////////////// Expr (mutable) //////////////////////////////
// Expressions are the fundamental building block of the language
// starting form binary operators to more complex things like match
// statements

/// Expression root
Expr: ExprRaw<'input> = {
    SimpleExpr => <>,
}

/// Non precedence based expressions and language constructs
SimpleExpr: ExprRaw<'input> = {
    <pp:Match> => ExprRaw::MatchExpr(Box::new(pp)),
    <comprehension:For> => ExprRaw::Comprehension(Box::new(comprehension)),
    Let => <>,
    Drop => <>,
    Emit => <>,
    ExprImut => <>.into(),
}

/// Part of the expressions that are always immutable
AlwaysImutExpr: ImutExprRaw<'input> = {
    <pp:Patch> => ImutExprRaw::Patch(Box::new(pp)),
    <pp:Merge> => ImutExprRaw::Merge(Box::new(pp)),
    <call:Invoke> => ImutExprRaw::Invoke(call),
    <literal:Literal> => ImutExprRaw::Literal(literal),
    <path:Path> => ImutExprRaw::Path(path),
    <record:Record> => ImutExprRaw::Record(Box::new(record)),
    <list:List> => ImutExprRaw::List(Box::new(list)),
    <s:StringLiteral> => ImutExprRaw::String(s)

}

////////////////////////////// Expr (immutable) ////////////////////////////////////////
// Immutable expressions are used in parts of the language that are not supposed to
// modify the event, locals, or metadata.

/// Expression root
ExprImut: ImutExprRaw<'input> = {
    OrExprImut => <>,
}

/// Logical or
OrExprImut: ImutExprRaw<'input> = {
    /// TODO should be OrExprImut?
    <o:BinOp<BinOr, ExprImut, XorExprImut>> => <>,
    XorExprImut => <>,
}

/// Logical xor
XorExprImut: ImutExprRaw<'input> = {
    <o:BinOp<BinXor, XorExprImut, AndExprImut>> => <>,
    AndExprImut => <>,
}

/// Logical and
AndExprImut: ImutExprRaw<'input> = {
    BinOp<BinAnd, AndExprImut, BitOrExprImut> => <>,
    BitOrExprImut => <>,
}

/// Bitwise or
BitOrExprImut: ImutExprRaw<'input> = {
    <o:BinOp<BinBitOr, BitOrExprImut, BitXorExprImut>> => <>,
    BitXorExprImut => <>,
}

/// Bitwise xor
BitXorExprImut: ImutExprRaw<'input> = {
    <o:BinOp<BinBitXor, BitXorExprImut, BitAndExprImut>> => <>,
    BitAndExprImut => <>,
}

/// Bitwise and
BitAndExprImut: ImutExprRaw<'input> = {
    <o:BinOp<BinBitAnd, BitAndExprImut, EqExprImut>> => <>,
    EqExprImut => <>,
}

/// Equality comparison operators
EqExprImut: ImutExprRaw<'input> = {
    BinOp<BinEq, EqExprImut, CmpExprImut> => <>,
    CmpExprImut => <>,
}

/// Relational comparison operators
CmpExprImut: ImutExprRaw<'input> = {
    BinOp<BinCmp, CmpExprImut, BitShiftExprImut> => <>,
    BitShiftExprImut => <>,
}

/// Bit shift operators (>>, >>>, <<)
BitShiftExprImut: ImutExprRaw<'input> = {
    BinOp<BinBitShift, BitShiftExprImut, AddExprImut> => <>,
    AddExprImut => <>,
}

/// Addition based math (+, -)
AddExprImut: ImutExprRaw<'input> = {
    BinOp<BinAdd, AddExprImut, MulExprImut> => <>,
    MulExprImut => <>,
}

/// Multiplication based math (*, /, %)
MulExprImut: ImutExprRaw<'input> = {
    BinOp<BinMul, MulExprImut, UnaryExprImut> => <>,
    UnaryExprImut => <>,
}

/// Mathematical unary expressions (unary +, unary - )
UnaryExprImut: ImutExprRaw<'input> = {
    <start:@L> "+" <expr:UnaryExprImut> <end:@L> => ImutExprRaw::Unary(Box::new(UnaryExprRaw { kind: UnaryOpKind::Plus, expr: expr, start, end })),
    <start:@L> "-" <expr:UnaryExprImut> <end:@L> => ImutExprRaw::Unary(Box::new(UnaryExprRaw { kind: UnaryOpKind::Minus, expr: expr, start, end })),
    UnarySimpleExprImut => <>,
}


/// Logical and bitwise unary expressions (not, !)
UnarySimpleExprImut: ImutExprRaw<'input> = {
    /// TODO ask about change from PresenceSimplExprImut
    /// also should include these on the same level as unary +, -?
    <start:@L> "not" <expr:UnarySimpleExprImut> <end:@L> => ImutExprRaw::Unary(Box::new(UnaryExprRaw { kind: UnaryOpKind::Not, expr: expr, start, end })),
    <start:@L> "!" <expr:UnarySimpleExprImut> <end:@L> => ImutExprRaw::Unary(Box::new(UnaryExprRaw { kind: UnaryOpKind::BitNot, expr: expr, start, end })),
    PresenceSimplExprImut => <>,
}

/// Presence operations (present, absent)
PresenceSimplExprImut: ImutExprRaw<'input> = {
    <start:@L> "present" <path:Path> <end:@L> => ImutExprRaw::Present{path, start, end},
    /// TODO link to !?
    <start:@L> "absent" <path:Path> <end:@L> => ImutExprRaw::Unary(Box::new(UnaryExprRaw { kind: UnaryOpKind::Not, expr: ImutExprRaw::Present{path, start, end}, start, end })),
    SimpleExprImut => <>,
}

/// Immutable language constructs that can be used without having to worry about
/// sideefects

ComplexExprImut: ImutExprRaw<'input> = {
    <pp:MatchImut> => ImutExprRaw::Match(Box::new(pp)),
    <comprehension:ForImut> => ImutExprRaw::Comprehension(Box::new(comprehension)),
    ExprImut => <>
}

FnDecl: FnDeclRaw<'input> = {
  <start:@L> "fn" <name:Ident> "(" <args:FnArgs> ")" "with" <body:Exprs> "end" <end:@L> => FnDeclRaw{name, args, body, start, end}
}

FnArgs: Vec<IdentRaw<'input>> = {
    <fields:FnArgs_> => {
        let mut fields = fields;
        fields.reverse();
        fields
    },
}

FnArgs_: Vec<IdentRaw<'input>> = {
    <Sep<FnArgs_, Ident, ",">> => <>
}


SimpleExprImut: ImutExprRaw<'input> = {
    "(" <expr:ComplexExprImut> ")" => expr,
    AlwaysImutExpr => <>
}

////////////////////////////// Literals and semi literals //////////////////////////////
// This section covers literals (strings, nil, etc) and semi literals.
// At this stage Lists and Records are considered semi literals
// as we only decide in the next step if they are literals or include
// variables and need to get constructed during runtime.

/// Basic literals
Literal: LiteralRaw<'input> = {
    <start:@L> <v:Nil> <end:@L> => LiteralRaw{value: v, start, end},
    <start:@L> <v:Bool> <end:@L> => LiteralRaw{value: v, start, end},
    <start:@L> <v:Int> <end:@L> => LiteralRaw{value: v, start, end},
    <start:@L> <v:Float> <end:@L> => LiteralRaw{value: v, start, end},
}

/// null
Nil: Value<'input> = {
    <literal:"nil">  => Value::null(),
}

/// booleans
Bool: Value<'input> = {
    <literal:"bool"> =>  Value::from(literal),
}

/// integers
Int: Value<'input> = {
    <literal:"int">  => Value::from(literal as i64),
}

/// floats
Float: Value<'input> = {
    <literal:"float"> => Value::from(literal.0),
}

StringLiteral: StringLitRaw<'input> = {
    <start:@L> <doc:"heredoc"> <end:@L> =>   StringLitRaw {
        start,
        end,
        string: doc.join("\n").into(),
        exprs: vec![],
    },
    <start:@L> "\"" <es:StrLitElements> "\"" <end:@L> => {
        let mut sl: StringLitRaw = es.into();
        sl.start = start;
        sl.end = end;
        sl
    },
    <start:@L> "\""  "\"" <end:@L> => {
        StringLitRaw {
            start,
            end,
            string: "".into(),
            exprs: vec![],
        }
    },
}

StrLitElements: StrLitElements<'input> = {
    <literal:StringPart> <es:StrLitElements> => {
        let mut es = es;
        es.0.push(literal);
        es
    },
    "{" <expr:ExprImut> "}" <es:StrLitElements> => {
        let mut es = es;
        es.0.push("{}".into());
        es.1.push(expr);
        es
    },
    <literal:StringPart> => StrLitElements(vec![literal], vec![]),
    "{" <expr:ExprImut> "}" => StrLitElements(vec!["{}".into()], vec![expr]),
}

StringPart: Cow<'input, str> = {
    "string" => <>
}
/// array semi literals
List: ListRaw<'input> = {
    <start:@L> "[" <exprs:ListElements> "]" <end:@L> => ListRaw{start, end, exprs},
    <start:@L> "[" "]" <end:@L> => ListRaw{start, end, exprs: vec![]},
}

ListElements: ImutExprsRaw<'input> = {
    <fields:ListElements_> => {
        let mut fields = fields;
        fields.reverse();
        fields
    },
}

ListElements_: ImutExprsRaw<'input> = {
    <Sep<ListElements_, ComplexExprImut, ",">> => <>,
}

/// A semi literal record
Record: RecordRaw<'input> = {
    <start:@L> "{" <fields:Fields> "}" <end:@L> => RecordRaw { fields: fields, start, end },
    <start:@L> "{" "}" <end:@L> => RecordRaw { fields: vec![], start, end }
}

/// Fields for a static record
Field: FieldRaw<'input> = {
    <start:@L> <name:StringLiteral> ":" <value:ComplexExprImut> <end:@L> => {
        FieldRaw { name, value, start, end }
    }
}

////////////////////////////// Path ////////////////////////////////////////
// Path define lookups of data that is in either local variable, metadata
// or the event.

/// A path into one of the scopes
Path: PathRaw<'input> = {
    MetaPath => <>,
    EventPath => <>,
    StatePath => <>,
    LocalPath => <>,
    AggrPath => <>,
    ArgsPath => <>,
}

/// A metadata path
MetaPath: PathRaw<'input> = {
    <start:@L> "$" <segment:PathSegment> <segments:PathSegments> <end:@L> => {
        let mut segments = segments;
        segments.insert(0, segment);

        PathRaw::Meta(MetadataPathRaw { segments, start, end })
    },
    <start:@L> "$" <segment:PathSegment> <end:@L> => {
        PathRaw::Meta(MetadataPathRaw { segments: vec![segment], start, end })
    },
    <start:@L> "$" <end:@L> => PathRaw::Meta(MetadataPathRaw { segments: vec![], start, end }),
}

/// A window/group path
AggrPath: PathRaw<'input> = {
    <start:@L> "group" <mid:@L> <segments:PathSegments> <end:@L> => {
        let mut segments = segments;
        segments.insert(0, SegmentRaw::from_str("group", start, mid));
        PathRaw::Local(LocalPathRaw { segments, start, end })
    },
    <start:@L> "group" <end:@L> => PathRaw::Local(LocalPathRaw { segments: vec![SegmentRaw::from_str("group", start, end)], start, end }),
    <start:@L> "window" <mid:@L> <segments:PathSegments> <end:@L> => {
        let mut segments = segments;
        segments.insert(0, SegmentRaw::from_str("window", start, mid));
        PathRaw::Local(LocalPathRaw { segments, start, end })
    },
    <start:@L> "window" <end:@L> => PathRaw::Local(LocalPathRaw { segments: vec![SegmentRaw::from_str("window", start, end)], start, end }),
}

/// Arguments to a script or function
ArgsPath: PathRaw<'input> = {
    <start:@L> "args" <mid:@L> <segments:PathSegments> <end:@L> => {
        let mut segments = segments;
        segments.insert(0, SegmentRaw::from_str("args", start, mid));
        PathRaw::Local(LocalPathRaw { segments, start, end })
    },
    <start:@L> "args" <end:@L> => PathRaw::Local(LocalPathRaw { segments: vec![SegmentRaw::from_str("args", start, end)], start, end }),
}

/// Local path
LocalPath: PathRaw<'input> = {
    <start:@L> <segment:PathSegment> <segments:PathSegments> <end:@L> => {
        let mut segments = segments;
        segments.insert(0, segment);
        PathRaw::Local(LocalPathRaw { segments, start, end })
    },
    <start:@L> <segment:PathSegment> <end:@L> => {
        PathRaw::Local(LocalPathRaw { segments:  vec![segment], start, end })
    },
}

/// State path
StatePath: PathRaw<'input> = {
    <start:@L> "state" <segments:PathSegments> <end:@L> => PathRaw::State(StatePathRaw { segments, start, end }),
    <start:@L> "state" <end:@L> => PathRaw::State(StatePathRaw { segments: vec![], start, end }),
}

/// Event path
EventPath: PathRaw<'input> = {
    <start:@L> "event" <segments:PathSegments> <end:@L> => PathRaw::Event(EventPathRaw { segments, start, end }),
    <start:@L> "event" <end:@L> => PathRaw::Event(EventPathRaw { segments: vec![], start, end }),
}

/// Segments of a path
PathSegments: SegmentsRaw<'input> = {
    "." <segment:PathSegment> <segments:PathSegments> => {
        let mut segments = segments;
        segments.insert(0, segment);
        segments
    },
    "[" <selector:Selector> "]" <segments:PathSegments> => {
        let mut segments = segments;
        segments.insert(0, selector);
        segments
    },
    "[" <selector:Selector> "]" => vec![selector],
    "." <segment:PathSegment> => vec![segment],
}

/// Singular part of a path
PathSegment: SegmentRaw<'input> = {
    <id:Ident> => SegmentRaw::from_id(id),
}


/// A path selector aka [...]
Selector: SegmentRaw<'input> = {
    <start_lower:@L> <range_start:ComplexExprImut> <end_lower:@L> ":" <start_upper:@L> <range_end:ComplexExprImut> <end_upper:@L> => SegmentRaw::Range{range_start, range_end, start_lower, end_lower, start_upper, end_upper},
    <start:@L> <expr:ComplexExprImut> <end:@L>  => SegmentRaw::Element{expr, start, end},
}


////////////////////////////// Function invocations //////////////////////////////
// Function invocations consist of a module, function name and an
// argument list.

/// Function invocation
Invoke: InvokeRaw<'input> = {
    <start:@L> <module:Ident> "::" <fun:Ident> "(" <args:InvokeArgs> ")" <end:@L> => InvokeRaw { module: module.id.to_string(), fun: fun.id.to_string(), args, start, end },
    <start:@L> <module:Ident> "::" <fun:Ident> "(" ")" <end:@L> => InvokeRaw { module: module.id.to_string(), fun: fun.id.to_string(), args: vec![], start, end },
}

ModPath: Vec<IdentRaw<'input>> = {
    <v:ModPath> "::" <e:Ident> => {
        let mut v = v;
        v.push(e);
        v
    },
    <e:Ident> => vec![e],
}

InvokeArgs: ImutExprsRaw<'input> = {
    <fields:InvokeArgs_> => {
        let mut fields = fields;
        fields.reverse();
        fields
    },
}

InvokeArgs_: ImutExprsRaw<'input> = {
    <Sep<InvokeArgs_, ComplexExprImut, ",">> => <>,
}

////////////////////////////// Terminal expressions //////////////////////////////
// These expressions terminate execution.

/// drop the current event.
Drop: ExprRaw<'input> = {
    <start:@L> "drop" <end:@L> => ExprRaw::Drop{start, end } ,
}

/// emits the current event to a given output
Emit: ExprRaw<'input> = {
    <start:@L> "emit" <expr:ComplexExprImut> "=>" <port:StringLiteral> <end:@L> => ExprRaw::Emit(Box::new(EmitExprRaw { expr: expr, start, end, port: Some(ImutExprRaw::String(port)) })),
    <start:@L> "emit" <expr:ComplexExprImut>  <end:@L> => ExprRaw::Emit(Box::new(EmitExprRaw { expr: expr, start, end, port: None })),
    <start:@L> "emit" "=>" <port:StringLiteral> <end:@L> => ExprRaw::Emit(Box::new(EmitExprRaw { expr: ImutExprRaw::Path(PathRaw::Event(EventPathRaw { segments: vec![], start, end })).into(), start, end, port: Some(ImutExprRaw::String(port)) })) ,
    <start:@L> "emit" <end:@L> => ExprRaw::Emit(Box::new(EmitExprRaw { expr: ImutExprRaw::Path(PathRaw::Event(EventPathRaw { segments: vec![], start, end })).into(), start, end, port: None })),
}


////////////////////////////// Let expression  //////////////////////////////
// An expression that assigns a value to a variable

/// Let expression to assign values
Let: ExprRaw<'input> = {
// TODO FIXME investigate multi-let after `event` keyword +change
//    <start:@L> "let" <exprs:Assignments> <end:@L> "end" => Expr::Let(Let { exprs, start, end }),
    <start:@L> "let" <expr:Assignment> <end:@L> => expr, // Expr::Let(Let { exprs: vec![expr], start, end }),
}

// Assignments: Exprs = {
//     <list:Assignments> "," <expr:Assignment> => {
//         let mut list = list;
//         list.push(expr);
//         list
//     },
//     Assignment => vec![<>],
// }

Assignment: ExprRaw<'input> = {
    <start:@L> <path:Path> @L "=" @R <expr:SimpleExpr> <end:@L> => ExprRaw::Assign(Box::new(AssignRaw { path, expr: expr, start, end })),
}

////////////////////////////// patch expression  //////////////////////////////
// Patches a input value with a set of instructions

Patch: PatchRaw<'input> = {
  // NOTE: ASSUMPTION array and literal targets are banned
    <start:@L> "patch" <target:ComplexExprImut> <end:@L> "of" <operations:PatchOperations> "end" => PatchRaw { target, operations, start, end }
}

PatchOperations: PatchOperationsRaw<'input> = {
    <e:PatchOperationClause> => vec![e],
    <v:PatchOperations> "," <e:PatchOperationClause> => {
    let mut v = v;
    v.push(e);
    v
  }
}

PatchField: ImutExprRaw<'input> = {
    ComplexExprImut => <>
}

PatchOperationClause: PatchOperationRaw<'input> = {
    "insert" <ident:PatchField> "=>" <expr:ComplexExprImut> => PatchOperationRaw::Insert{ ident, expr },
    "upsert" <ident:PatchField> "=>" <expr:ComplexExprImut> => PatchOperationRaw::Upsert{ ident, expr },
    "update" <ident:PatchField> "=>" <expr:ComplexExprImut> => PatchOperationRaw::Update{ ident, expr },
    "erase" <ident:PatchField> => PatchOperationRaw::Erase{ ident },
    "move" <from:PatchField> "=>" <to:PatchField>  => PatchOperationRaw::Move{ from, to },
    "copy" <from:PatchField> "=>" <to:PatchField>  => PatchOperationRaw::Copy{ from, to },
    // "test" <ident:Ident> "=>" <expr:Expr> => PatchOperationClause { kind: PatchOperationKind::Add, ident, Some(expr) },
    "merge" <ident:PatchField> "=>" <expr:ComplexExprImut> => PatchOperationRaw::Merge { ident, expr },
    "merge" "=>" <expr:ComplexExprImut> => PatchOperationRaw::TupleMerge { expr },
}


////////////////////////////// merge expression  //////////////////////////////
// Merges a perge spec (record) into the target

Merge: MergeRaw<'input> = {
    <start:@L> "merge" <target:ComplexExprImut> "of" <expr:ComplexExprImut> "end" <end:@L> => MergeRaw { target, expr, start, end }
}

////////////////////////////// for comprehension (mut)  //////////////////////////////
// Merges a perge spec (record) into the target

For: ComprehensionRaw<'input> = {
    <start:@L> "for" <target:ComplexExprImut> "of" <cases:ForCaseClauses> "end" <end:@L> => ComprehensionRaw{target, cases, start, end},
}

ForCaseClauses: ComprehensionCasesRaw<'input> = {
    <e:ForCaseClause> => vec![e],
    <v:ForCaseClauses> <e:ForCaseClause> => {
        let mut v = v;
        v.push(e);
        v
    }
}

ForCaseClause: ComprehensionCaseRaw<'input> = {
    "case" <start:@L>  "(" <k:Ident> "," <v:Ident> ")" <end:@L> <guard:WhenClause> <exprs:Effectors>  => ComprehensionCaseRaw { key_name: k.id, value_name: v.id, exprs, guard, start, end },
    "case" <start:@L> "(" <k:Ident> "," <v:Ident> ")" <end:@L> <exprs:Effectors> => ComprehensionCaseRaw { key_name: k.id, value_name: v.id, exprs, guard: None, start, end },
}

// ////////////////////////////// for comprehension (imutmut)  //////////////////////////////
// // Merges a perge spec (record) into the target

ForImut: ImutComprehensionRaw<'input> = {
    <start:@L> "for" <target:ComplexExprImut> "of" <cases:ForCaseClausesImut> "end" <end:@L> => ImutComprehensionRaw{target, cases, start, end},
}

ForCaseClausesImut: ImutComprehensionCasesRaw<'input> = {
    <e:ForCaseClauseImut> => vec![e],
    <v:ForCaseClausesImut> <e:ForCaseClauseImut> => {
        let mut v = v;
        v.push(e);
        v
    }
}

ForCaseClauseImut: ImutComprehensionCaseRaw<'input> = {
    "case" <start:@L>  "(" <k:Ident> "," <v:Ident> ")" <end:@L> <guard:WhenClause> <exprs:EffectorsImut>  => ImutComprehensionCaseRaw { key_name: k.id, value_name: v.id, exprs, guard, start, end },
    "case" <start:@L> "(" <k:Ident> "," <v:Ident> ")" <end:@L> <exprs:EffectorsImut> => ImutComprehensionCaseRaw { key_name: k.id, value_name: v.id, exprs, guard: None, start, end },
}

////////////////////////////// match expression (mutating)  //////////////////////////////
// An expression that assigns a value to a variable

/// A match expression
Match: MatchRaw<'input> = {
    <start:@L> "match" <target:ComplexExprImut> "of" <patterns:Predicates> "end" <end:@L> => MatchRaw { target, patterns, start, end },
}

/// Predicates for a match statement (aka list of case statements)
Predicates: PredicatesRaw<'input> = {
    <e:PredicateClause> => vec![e],
    <v:Predicates> <e:PredicateClause> => {
        let mut v = v;
        v.push(e);
        v
    }
}

/// A case statement 
PredicateClause: PredicateClauseRaw<'input> = {
    <start:@L> "case" <rp:RecordCaseClause> <exprs:Effectors> <end:@L> => PredicateClauseRaw { pattern: rp, exprs, guard: None, start, end },
    <start:@L> "case" <rp:RecordCaseClause> <guard:WhenClause> <exprs:Effectors> <end:@L> => PredicateClauseRaw { pattern: rp, exprs, guard, start, end },
    <start:@L> "case" <ap:ArrayCaseClause> <exprs:Effectors> <end:@L> => PredicateClauseRaw { pattern: ap, exprs, guard: None, start, end },
    <start:@L> "case" <ap:ArrayCaseClause> <guard:WhenClause> <exprs:Effectors> <end:@L> => PredicateClauseRaw { pattern: ap, exprs, guard, start, end },
    <start:@L> "case" <lhs:ExprCaseClause> <rhs:Effectors> <end:@L> => PredicateClauseRaw { pattern: lhs, exprs: rhs, guard: None, start, end },
    <start:@L> "case" <lhs:ExprCaseClause> <guard:WhenClause> <rhs:Effectors> <end:@L> => PredicateClauseRaw { pattern: lhs, exprs: rhs, guard, start, end},
    <start:@L> "default" <exprs:Effectors> <end:@L> => PredicateClauseRaw { pattern: PatternRaw::Default, exprs, guard: None, start, end },
}

/// Effoectors aka (=>  ... )
Effectors: ExprsRaw<'input> = {
    "=>" <exprs:Block> => exprs
}

/// The effectors for a case statement
Block: ExprsRaw<'input> = {
    <e:Expr> => vec![e],
    <v:Block> "," <e:Expr> => {
        let mut v = v;
        v.push(e);
        v
    }
}

////////////////////////////// match expression (non mutating)  //////////////////////////////
// An expression that assigns a value to a variable

/// A match expression
MatchImut: ImutMatchRaw<'input> = {
    <start:@L> "match" <target:ComplexExprImut> "of" <patterns:PredicatesImut> "end" <end:@L> => ImutMatchRaw { target, patterns, start, end },
}

/// Predicates for a match statement (aka list of case statements)
PredicatesImut: ImutPredicatesRaw<'input> = {
    <e:PredicateClauseImut> => vec![e],
    <v:PredicatesImut> <e:PredicateClauseImut> => {
        let mut v = v;
        v.push(e);
        v
    }
}

/// A case statement 
PredicateClauseImut: ImutPredicateClauseRaw<'input> = {
    <start:@L> "case" <rp:RecordCaseClause> <exprs:EffectorsImut> <end:@L> => ImutPredicateClauseRaw { pattern: rp, exprs, guard: None, start, end },
    <start:@L> "case" <rp:RecordCaseClause> <guard:WhenClause> <exprs:EffectorsImut> <end:@L> => ImutPredicateClauseRaw { pattern: rp, exprs, guard, start, end },
    <start:@L> "case" <ap:ArrayCaseClause> <exprs:EffectorsImut> <end:@L> => ImutPredicateClauseRaw { pattern: ap, exprs, guard: None, start, end },
    <start:@L> "case" <ap:ArrayCaseClause> <guard:WhenClause> <exprs:EffectorsImut> <end:@L> => ImutPredicateClauseRaw { pattern: ap, exprs, guard, start, end },
    <start:@L> "case" <lhs:ExprCaseClause> <rhs:EffectorsImut> <end:@L> => ImutPredicateClauseRaw { pattern: lhs, exprs: rhs, guard: None, start, end },
    <start:@L> "case" <lhs:ExprCaseClause> <guard:WhenClause> <rhs:EffectorsImut> <end:@L> => ImutPredicateClauseRaw { pattern: lhs, exprs: rhs, guard, start, end},
    <start:@L> "default" <exprs:EffectorsImut> <end:@L> => ImutPredicateClauseRaw { pattern: PatternRaw::Default, exprs, guard: None, start, end },
}

/// Effoectors aka (=>  ... )
EffectorsImut: ImutExprsRaw<'input> = {
    "=>" <exprs:BlockImut> => exprs
}

/// The effectors for a case statement
BlockImut: ImutExprsRaw<'input> = {
    <e:ComplexExprImut> => vec![e],
    <v:BlockImut> "," <e:ComplexExprImut> => {
        let mut v = v;
        v.push(e);
        v
    }
}

////////////////////////////// match expression (shared)  //////////////////////////////
// An expression that assigns a value to a variable

/// A record pattern aka [name = ] %{...}
RecordCaseClause: PatternRaw<'input> = {
    <start:@L> <segment:Ident> "=" <rp:RecordPattern> <end:@L> => PatternRaw::Assign(AssignPatternRaw { id: segment.id, pattern: Box::new(PatternRaw::Record(rp)) }),
    <rp:RecordPattern> => PatternRaw::Record(rp),
}

/// A array pattern aka [name = ] %[...]
ArrayCaseClause: PatternRaw<'input> = {
    <start:@L> <segment:Ident> "=" <ap:ArrayPattern> <end:@L> => PatternRaw::Assign(AssignPatternRaw { id:segment.id, pattern: Box::new(PatternRaw::Array(ap)) }),
    <ap:ArrayPattern> => PatternRaw::Array(ap),
}

/// An expression clause aka [name = ] <expr>
ExprCaseClause: PatternRaw<'input> = {
    <start:@L> <segment:Ident> "=" <expr:ComplexExprImut> <end:@L> => PatternRaw::Assign(AssignPatternRaw { id:  segment.id, pattern: Box::new(PatternRaw::Expr(expr)) }),
    <expr:ComplexExprImut> => PatternRaw::Expr(expr),
}

/// When part of an expression (when ...)
WhenClause: Option<ImutExprRaw<'input>> = {
    "when" <expr:ComplexExprImut> => Some(expr),
}


/// Predicate Patterns (aka tests) for record pattrens
PredicateFieldPattern: PredicatePatternRaw<'input> = {
    <start:@L> <lhs:Ident> <op:"~="> <expr:TestExpr> <end:@L> => PredicatePatternRaw::TildeEq { assign: lhs.id.clone(), lhs: lhs.id, test: expr},
    <start:@L> <assign:Ident> "=" <lhs:Ident> <op:"~="> <expr:TestExpr> <end:@L> => PredicatePatternRaw::TildeEq { assign: assign.id, lhs: lhs.id, test: expr} ,

    <start:@L> <lhs:Ident> <op:"~="> <rp:RecordPattern> <end:@L> => PredicatePatternRaw::RecordPatternEq { lhs: lhs.id, pattern: rp },
    <start:@L> <lhs:Ident> <op:"~="> <ap:ArrayPattern> <end:@L> => PredicatePatternRaw::ArrayPatternEq { lhs: lhs.id, pattern: ap },
    <start:@L> "present" <lhs:Ident> <end:@L> => PredicatePatternRaw::FieldPresent { lhs: lhs.id },
    <start:@L> "absent" <lhs:Ident> <end:@L> => PredicatePatternRaw::FieldAbsent { lhs: lhs.id },
    <lhs:Ident> <op:"=="> <expr:ComplexExprImut> => PredicatePatternRaw::Eq { lhs: lhs.id, rhs: expr, not: false },
    <lhs:Ident> <op:"!="> <expr:ComplexExprImut> => PredicatePatternRaw::Eq { lhs: lhs.id, rhs: expr, not: true },
}

TestExpr: TestExprRaw = {
    <start:@L> <id:Ident> <tl: TestLiteral> <end:@L> => {
        TestExprRaw { id: id.id.to_string(), test: tl, start, end}
    },
}

RecordPattern: RecordPatternRaw<'input> = {
    <start:@L> "%{" <fields:PatternFields> "}" <end:@L> => RecordPatternRaw { fields: fields, start, end },
    <start:@L> "%{" "}" <end:@L> => RecordPatternRaw { fields: vec![], start, end },
}

ArrayPattern: ArrayPatternRaw<'input> = {
    <start:@L> "%[" <exprs:ArrayPredicatePatterns> "]" <end:@L> => ArrayPatternRaw { exprs, start, end },
    <start:@L> "%[" "]" <end:@L> => ArrayPatternRaw { exprs: vec![], start, end },
}

ArrayPredicatePattern: ArrayPredicatePatternRaw<'input> = {
    "~" <test:TestExpr> => ArrayPredicatePatternRaw::Tilde(test),
    ComplexExprImut => ArrayPredicatePatternRaw::Expr(<>),
    RecordPattern => ArrayPredicatePatternRaw::Record(<>),
}

ArrayPredicatePatterns: ArrayPredicatePatternsRaw<'input> = {
    <list:ArrayPredicatePatterns> "," <item:ArrayPredicatePattern> => {
        let mut list = list;
        list.push(item);
        list
    },
    ArrayPredicatePattern => vec![<>],
}


PatternFields: PatternFieldsRaw<'input> = {
    <fields:PatternFields_> => {
        let mut fields = fields;
        fields.reverse();
        fields
    },
}

PatternFields_: PatternFieldsRaw<'input> = {
    <fields:Sep<PatternFields_, PredicateFieldPattern, ",">> => fields,
}


Fields: FieldsRaw<'input> = {
    <fields:Fields_> => {
        let mut fields = fields;
        fields.reverse();
        fields
    },
}


Fields_: FieldsRaw<'input> = {
    <fields:Sep<Fields_, Field, ",">> => fields,
}

#[inline]
Ident: IdentRaw<'input> = {
    <start:@L> <name:"<ident>"> <end:@L> => IdentRaw { id: name.0, start, end },
}

#[inline]
TestLiteral: String = {
    "test" => <>.join(""),
}

Sep<L, T, D>: L = {
    <item:T> D <list:L> => {
        let mut list = list;
        list.push(item);
        list
    },
    <item:T> D? => vec![item],
}

/// Generic helper for binary operations
#[inline]
BinOp<Op, Current, Next>: ImutExprRaw<'input> = {
    <start:@L> <lhs:(<Current>)> <op:(<Op>)> @L <rhs:Next> <end:@L> => ImutExprRaw::Binary(Box::new(BinExprRaw {
        kind: op,
        lhs: lhs,
        rhs: rhs,
        start,
        end,
    })),
}

BinOr: BinOpKind = {
    "or" => BinOpKind::Or,
}
BinXor: BinOpKind = {
    "xor" => BinOpKind::Xor,
}
BinAnd: BinOpKind = {
    "and" => BinOpKind::And,
}
BinBitOr: BinOpKind = {
    "|" => BinOpKind::BitOr,
}
BinBitXor: BinOpKind = {
    "^" => BinOpKind::BitXor,
}
BinBitAnd: BinOpKind = {
    "&" => BinOpKind::BitAnd,
}
BinEq: BinOpKind = {
    "==" => BinOpKind::Eq,
    "!=" => BinOpKind::NotEq,
}
BinCmp: BinOpKind = {
    ">=" => BinOpKind::Gte,
    ">" => BinOpKind::Gt,
    "<=" => BinOpKind::Lte,
    "<" => BinOpKind::Lt,
}
BinBitShift: BinOpKind = {
    ">>" => BinOpKind::RBitShiftSigned,
    ">>>" => BinOpKind::RBitShiftUnsigned,
    "<<" => BinOpKind::LBitShift,
}
BinAdd: BinOpKind = {
    "+" => BinOpKind::Add,
    "-" => BinOpKind::Sub,
}
BinMul: BinOpKind = {
    "*" => BinOpKind::Mul,
    "/" => BinOpKind::Div,
    "%" => BinOpKind::Mod,
}
extern {
    type Location = Location;
    type Error = crate::errors::Error;
    enum Token<'input> {
        "<doc-comment>" => Token::DocComment(<&'input str>),
        "<single-line-comment>" => Token::SingleLineComment(<&'input str>),
        "let" => Token::Let,
        "const" => Token::Const,
        "match" => Token::Match,
        "of" => Token::Of,
        "end" => Token::End,
        "case" => Token::Case,
        "when" => Token::When,
        "for" => Token::For,
        "nil" => Token::Nil,
        "and" => Token::And,
        "or" => Token::Or,
        "xor" => Token::Xor,
        "not" => Token::Not,
        "drop" => Token::Drop,
        "emit" => Token::Emit,
        "default" => Token::Default,
        "patch" => Token::Patch,
        "insert" => Token::Insert,
        "upsert" => Token::Upsert,
        "update" => Token::Update,
        "erase" => Token::Erase,
        "move" => Token::Move,
        "copy" => Token::Copy,
        "merge" => Token::Merge,
        "event" => Token::Event,
        "state" => Token::State,
        "present" => Token::Present,
        "absent" => Token::Absent,
        "fn" => Token::Fun,
        "." => Token::Dot,
        "\"" => Token::DQuote,
        ";" => Token::Semi,
        "::" => Token::ColonColon,
        ":" => Token::Colon,
        "," => Token::Comma,
        "=" => Token::Eq,
//        "_" => Token::DontCare,
        "==" => Token::EqEq,
        "!=" => Token::NotEq,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "." => Token::Dot,
        "$" => Token::Dollar,
        "=>" => Token::EqArrow,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
        ">=" => Token::Gte,
        ">" => Token::Gt,
        "<=" => Token::Lte,
        "<" => Token::Lt,
        ">>" => Token::RBitShiftSigned,
        ">>>" => Token::RBitShiftUnsigned,
        "<<" => Token::LBitShift,
        "!" => Token::BitNot,
        "|" => Token::BitOr,
        "^" => Token::BitXor,
        "&" => Token::BitAnd,
        "+" => Token::Add,
        "-" => Token::Sub,
        "*" => Token::Mul,
        "/" => Token::Div,
        "%[" => Token::LPatBracket,
        "%{" => Token::LPatBrace,
        "%" => Token::Mod,
        "~=" => Token::TildeEq,
        "~" => Token::Tilde,
        "bool" => Token::BoolLiteral(<bool>),
        "int" => Token::IntLiteral(<i64>),
        "float" => Token::FloatLiteral(<f64>, <String>),
        "string" => Token::StringLiteral(<Cow<'input, str>>),
        "heredoc" => Token::HereDoc(_, <Vec<String>>),
        "test" => Token::TestLiteral(_, <Vec<String>>),
        "<ident>" => Token::Ident(<Cow<'input, str>>, <bool>),
        "<error>" => Token::Bad(<String>),
        "<end-of-stream>" => Token::EndOfStream,

        "select" => Token::Select,
        "from" => Token::From,
        "into" => Token::Into,
        "create" => Token::Create,
        "tumbling" => Token::Tumbling,
        "sliding" => Token::Sliding,
        "window" => Token::Window,
        "stream" => Token::Stream,
        "operator" => Token::Operator,
        "where" => Token::Where,
        "with" => Token::With,
        "script" => Token::Script,
        "having" => Token::Having,
        "group" => Token::Group,
        "by" => Token::By,
        "define" => Token::Define,
        "args" => Token::Args,

        "set" => Token::Set,
        "each" => Token::Each,
        "use" => Token::Use,
        "as" => Token::As,

        "#!line" => Token::LineDirective(<Cow<'input, str>>),
    }
}

