let input = [
    {"name": "dir1", "type": "d", "children": [
       {"name": "dir2", "type": "d", "children": [
          {"name": "file1", "type": "f"},
          {"name": "file2", "type": "f"}
        ]}
     ]},
    {"name": "dir3", "type": "d", "children": []},
    {"name": "file3", "type": "f"}
  ];


## list all files

let stack = object::to_array(in);
let result = [];
while not array::is_empty(stack) ->
  let current = stack[-1];
  let stack = stack[..-1];
  match current ->
    case r = %{type == "f"} => let result := array::push(result, c.name);
    case r = %{type == "d"} => let stack := array::append(stack, c.children)
    default => break;
  end;
end



let stack = object::to_array(in);
let result = [];
loop in ->
  let current = stack[-1];
  match current ->
    case r = %{type == "f"} => let result := array::push(result, c.name);
    case r = %{type == "d"} => recurse c.children;
    default => break;
  end;
end



loop in ->
  recurse [1]
end


dfs (p, value) over input ->

  match p[-1] ->
    "type" => ;# we are in a type value;
    "name" => ;# we are n a name value
    x when type::is_number(x) => ; # we are in an array
  end

  # body
  
end


([], input);
([0], {"name": "dir1", "type": "d", "children": [
         {"name": "dir2", "type": "d", "children": [
            {"name": "file1", "type": "f"},
            {"name": "file2", "type": "f"}
          ]},
       ]}});
([0, "name"], "dir1");
([0, "type"], "d");

([0, "children"], [
  {"name": "dir2", "type": "d", "children": [
     {"name": "file1", "type": "f"},
     {"name": "file2", "type": "f"}
   ]},
]);

([0, "children", 0], 
  {"name": "dir2", "type": "d", "children": [
     {"name": "file1", "type": "f"},
     {"name": "file2", "type": "f"}
   ]});
