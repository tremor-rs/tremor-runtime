use std::array; 

define connector bench from bench
args
  codec = "json",
  config = {
    "source": "../../../../demo/data/data.json.xz",
    "stop_after_secs": 100,
    "significant_figures": 2,
    "warmup_secs": 10,
  }
end;

define pipeline main
pipeline
  define script runtime
  script
    use std::array;
    match event.application of
      case "app1" => let $class = "applog_app1", let $rate = 1250, let $dimension = event.application, emit event
      case "app2" => let $class = "applog_app1", let $rate = 2500, let $dimension = event.application, emit event
      case "app3" => let $class = "applog_app1", let $rate = 18750, let $dimension = event.application, emit event
      case "app4" => let $class = "applog_app1", let $rate = 750, let $dimension = event.application, emit event
      case "app5" => let $class = "applog_app1", let $rate = 18750, let $dimension = event.application, emit event
      default => null
    end;
    match event.index_type of
      case "applog_app6" => let $class = "applog_app6", let $rate = 4500, let $dimensions = event.logger_name, emit event
      case "syslog_app1" => let $class = "syslog_app1", let $rate = 2500, let $dimensions = event.syslog_hostname, emit event
      default => null
    end;
    match array::contains(event.tags, "tag1") of
      case true => let $class = "syslog_app2", let $rate = 125, let $dimensions = event.syslog_hostname, emit event
      default => null
    end;
    match event.index_type of
      case "syslog_app3" => let $class = "syslog_app3", let $rate = 1750, let $dimensions = event.syslog_hostname
      case "syslog_app4" => let $class = "syslog_app4", let $rate = 7500, let $dimensions = event.syslog_hostname
      case "syslog_app5" => let $class = "syslog_app5", let $rate = 125, let $dimensions = event.syslog_hostname
      case "syslog_app6" => let $class = "syslog_app6", let $rate = 3750, let $dimensions = event.syslog_hostname
      default => let $class = "default", let $rate = 250
    end;
    event
  end;

  define operator grouper from grouper::bucket;

  create script runtime;
  create operator grouper;

  select event from in into runtime;
  select event from runtime into grouper;
  select event from grouper into out;
  select event from grouper/overflow into out;
end;



define flow wiring
links
  create pipeline main;
  create connector bench;

  #         | what we measure |
  # bench ->        main       -> bench


  connect /connector/bench/bench/out to /pipeline/main/main/in;
  connect /pipeline/main/main/out to /connector/bench/bench/in;
end;

deploy wiring;
