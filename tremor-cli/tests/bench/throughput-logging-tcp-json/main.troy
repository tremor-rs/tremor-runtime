define flow main
flow
  use tremor::{connectors, pipelines};
  use std::time::nanos;
  use bench;

  # connectors
  define connector client from tcp_client
  with
    metrics_interval_s = 2,
    reconnect = {
      "retry": {
        "interval_ms": 1000,
        "max_retries": 10
      }
    },
    codec = "json",
    postprocessors = [ "separate" ],
    config = {
      "url": "localhost:12345",
      "buf_size": 32768
    }
  end;
  create connector client;

  define connector server from tcp_server
  with
    metrics_interval_s = 2,
    reconnect = {
      "retry": {
        "interval_ms": 1000,
        "max_retries": 10
      }
    },
    codec = "json",
    preprocessors = [
      {
        "name": "separate",
        "config": {
          "separator": "\n",
          "max_length": 32768,
          "buffered": true
        }
      }
    ],
    config = {
      "url": "0.0.0.0:12345",
      "buf_size": 32768
    }
  end;

  define pipeline from_server
  pipeline
    define script runtime
    script
      use std::array;
      match event.application of
        case "app1" => let $class = "applog_app1"; let $rate = 1250; let $dimension = event.application; emit event
        case "app2" => let $class = "applog_app1"; let $rate = 2500; let $dimension = event.application; emit event
        case "app3" => let $class = "applog_app1"; let $rate = 18750; let $dimension = event.application; emit event
        case "app4" => let $class = "applog_app1"; let $rate = 750; let $dimension = event.application; emit event
        case "app5" => let $class = "applog_app1"; let $rate = 18750; let $dimension = event.application; emit event
        case _ => null
      end;
      match event.index_type of
        case "applog_app6" => let $class = "applog_app6"; let $rate = 4500; let $dimensions = event.logger_name; emit event
        case "syslog_app1" => let $class = "syslog_app1"; let $rate = 2500; let $dimensions = event.syslog_hostname; emit event
        case _ => null
      end;
      match array::contains(event.tags, "tag1") of
        case true => let $class = "syslog_app2"; let $rate = 125; let $dimensions = event.syslog_hostname; emit event
        case _ => null
      end;
      match event.index_type of
        case "syslog_app3" => let $class = "syslog_app3"; let $rate = 1750; let $dimensions = event.syslog_hostname
        case "syslog_app4" => let $class = "syslog_app4"; let $rate = 7500; let $dimensions = event.syslog_hostname
        case "syslog_app5" => let $class = "syslog_app5"; let $rate = 125; let $dimensions = event.syslog_hostname
        case "syslog_app6" => let $class = "syslog_app6"; let $rate = 3750; let $dimensions = event.syslog_hostname
        case _ => let $class = "default"; let $rate = 250
      end;
      event
    end;

    define operator grouper from grouper::bucket;

    create script runtime;
    create operator grouper;

    select event from in into runtime;
    select event from runtime into grouper;
    select event from grouper into out;
    select event from grouper/overflow into out;
  end;

  create connector server;
  create connector console from connectors::console;
  create connector metrics from connectors::metrics;
  create connector bench from bench::bench;

  # pipelines
  create pipeline to_client from pipelines::passthrough;
  create pipeline from_server;
  create pipeline metrics from pipelines::passthrough;

  # from bench to tcp_client
  connect /connector/bench to /pipeline/to_client;
  connect /pipeline/to_client to /connector/client;

  # from tcp_server to bench
  connect /connector/server to /pipeline/from_server;
  connect /pipeline/from_server to /connector/bench;
  connect /pipeline/from_server/err to /connector/console/stderr;

  #connect /connector/metrics to /pipeline/metrics;
  #connect /pipeline/metrics to /connector/console/stdout;


end;

deploy flow main;