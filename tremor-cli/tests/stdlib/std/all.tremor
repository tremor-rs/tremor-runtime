use std::{
  array,
  base64,
  binary,
  datetime,
  float,
  integer,
  json,
  math,
  path,
  random,
  range,
  re,
  record,
  string,
  test,
  type,
  url
};
use std::time::nanos;
use tremor::system;

fn as_string(arr) with
  for arr of
    case (i,e) => type::as_string(e)
  end
end;

fn lenbytes(arr) with
  for arr of
    case (i,e) => [ string::len(e), string::bytes(e)]
  end
end;

test::suite({
  "name": "Array library tests",
  "tags": [ "array" ],
  "tests": [
    test::test({
      "name": "array sort 1",
      "test": test::assert("array sort 1", array::sort([1,4,3]),[1,3,4])
    }),
    test::test({
      "name": "array sort 2",
      "test": test::assert("array sort 2", array::sort(["b","a","parrot"]),["a","b","parrot"])
    }),
    test::test({
      "name": "array reverse 1",
      "test": test::assert("array reverse 1", array::reverse([1,2,3]),[3,2,1])
    }),
    test::test({
      "name": "array reverse 2",
      "test": test::assert("array reverse 2", array::reverse(["fudge","brownies"]),["brownies","fudge"])
    }),
    test::test({
      "name": "array len 1",
      "test": test::assert("array len 1", array::len([]),0)
    }),
    test::test({
      "name": "array len 2",
      "test": test::assert("array len 2", array::len(["snot"]),1)
    }),
    test::test({
      "name": "array len 3",
      "test": test::assert("array len 3", array::len(["snot", "badger"]),2)
    }),
    test::test({
      "name": "array is empty 1",
      "test": test::assert("array is empty 1", array::is_empty([]),true)
    }),
    test::test({
      "name": "array is not empty 1",
      "test": test::assert("array is not empty 1", array::is_empty([1]),false)
    }),
    test::test({
      "name": "array is not empty 2",
      "test": test::assert("array is not empty 2", array::is_empty([1,2]),false)
    }),
    test::test({
      "name": "array contains 1",
      "test": test::assert("array contains 1", array::contains([],1),false)
    }),
    test::test({
      "name": "array contains 2",
      "test": test::assert("array contains 2", array::contains([1],1),true)
    }),
    test::test({
      "name": "array contains 3",
      "test": test::assert("array contains 3", array::contains([1,2],2),true)
    }),
    test::test({
      "name": "array push 1",
      "test": test::assert("array push 1", array::push([1,2],3),[1,2,3])
    }),
    test::test({
      "name": "array zip 1",
      "test": test::assert("array zip 1", array::zip(["a","b"],[1,2]), [["a", 1], ["b", 2]])
    }),
    test::test({
      "name": "array unzip 1",
      "test": test::assert("array unzip 1", array::unzip([["a", 1], ["b", 2]]), [["a","b"],[1,2]] )
    }),
    test::test({
      "name": "array flatten 1",
      "test": test::assert("array flatten 1", array::flatten([["a","b"],[1,2], [[3, 4, null, {}], [[5, 6], [[7, 8], [], 9]]]]), [ "a", "b", 1, 2, 3, 4, null, {}, 5, 6, 7, 8, 9] )
    }),
    test::test({
      "name": "array flatten 2",
      "test": test::assert("array flatten 2", array::flatten([]), [] )
    }),
    test::test({
      "name": "array flatten 3",
      "test": test::assert("array flatten 2", array::flatten([false, [], [[], [[[]], [[], [null]]]], true]), [false, null, true] )
    }),
    test::test({
      "name": "array coalesce 1",
      "test": test::assert("array coalesce 1", array::coalesce([1,2,null,3]), [ 1, 2, 3] )
    }),
    test::test({
      "name": "array join",
      "test": test::assert("array join 1", array::join([1,2,3], " "), "1 2 3" )
    }),
  ],
});

test::suite({
  "name": "Float library tests",
  "tags": [ "float", "numeric" ],
  "tests": [
    test::test({
      "name": "float parse",
      "test": test::assert("integer max", float::parse("42.42"), 42.42)
    }),
  ]

});

test::suite({
  "name": "Integer library tests",
  "tags": [ "integer", "numeric" ],
  "tests": [
    test::test({
      "name": "integer min",
      "test": test::assert("integer signed min", integer::signed::MIN, -9_223_372_036_854_775_808)
    }),
    test::test({
      "name": "integer max",
      "test": test::assert("integer signed max", integer::signed::MAX, 9_223_372_036_854_775_807)
    }),
    test::test({
      "name": "integer min",
      "test": test::assert("integer unsigned min", integer::unsigned::MIN, 0)
    }),
    test::test({
      "name": "integer max",
      "test": test::assert("integer unsignedmax", integer::unsigned::MAX, 18_446_744_073_709_551_615)
    }),
    test::test({
      "name": "integer parse",
      "test": test::assert("integer parse", integer::parse("42"), 42)
    }),
  ]
});

test::suite({
  "name": "Json library tests",
  "tags": [ "json" ],
  "tests": [
    test::test({
      "name": "json encode",
      "test": test::assert("json encode", json::encode(1), "1")
    }),
    test::test({
      "name": "json encode pretty",
      "test": test::assert("json encode pretty", json::encode_pretty([1,2,3]), "[\n  1,\n  2,\n  3\n]")
    }),
    test::test({
      "name": "json decode",
      "test": test::assert("json decode", json::decode(json::encode_pretty([3,2,1])), [3,2,1])
    }),
  ]
});

test::suite({
  "name": "Math library tests",
  "tags": [ "math", "numeric" ],
  "tests": [
    test::test({
      "name": "floor",
      "test": test::assert("math floor", math::floor(42.9), 42)
    }),
    test::test({
      "name": "ceil",
      "test": test::assert("math ceiling", math::ceil(42.9), 43)
    }),
    test::test({
      "name": "round 1",
      "test": test::assert("math round 1", math::round(42.4), 42)
    }),
    test::test({
      "name": "trunc",
      "test": test::assert("math trunc", math::trunc(42.5), 42)
    }),
    test::test({
      "name": "max 2",
      "test": test::assert("math max", math::max(42.6, 42.5), 42.6)
    }),
    test::test({
      "name": "min 1",
      "test": test::assert("math min", math::min(42.5, 42.6), 42.5)
    }),
    test::test({
      "name": "min 2",
      "test": test::assert("math min", math::min(42.6, 42.5), 42.5)
    }),
  ]
});

test::suite({
  "name": "Random library tests",
  "tags": [ "random", "generator" ],
  "tests": [
    test::test({
      "name": "random bool",
      "test": test::assert("random bool", type::is_bool(random::bool()), true)
    }),
    test::test({
      "name": "random string",
      "test": test::assert("random string", type::is_string(random::string(16)), true)
    }),
    test::test({
      "name": "random integer",
      "test": test::assert("random integer", type::is_integer(random::integer(0,100)), true)
    }),
    test::test({
      "name": "random float",
      "test": test::assert("random float", type::is_float(random::float(0,100)), true)
    }),
  ]
});

test::suite({
  "name": "Range generator library tests",
  "tags": [ "range", "generator" ],
  "tests": [
    test::test({
      "name": "range 1",
      "test": test::assert("range 1", range::range(0, 5), [0,1,2,3,4])
    }),
    test::test({
      "name": "contains 1",
      "test": test::assert("contains 1", range::contains(range::range(0, 5), -1), false)
    }),
    test::test({
      "name": "contains 2",
      "test": test::assert("contains 2", range::contains(range::range(0, 5), 3), true)
    }),
    test::test({
      "name": "contains 3",
      "test": test::assert("contains 3", range::contains(range::range(0, 5), 4), true)
    }),
    test::test({
      "name": "contains 4",
      "test": test::assert("contains 4", range::contains(range::range(0, 5), 5), false)
    }),
  ]
});

test::suite({
  "name": "Regular expression library tests",
  "tags": [ "regex" ],
  "tests": [
    test::test({
      "name": "regex replace first occurance 1",
      "test": test::assert("record replace first occurance 1", re::replace("c", "abaca", "b"), "ababa")
    }),
    test::test({
      "name": "regex replace first occurance 2",
      "test": test::assert("record replace first occurance 2", re::replace("c", "abacacaca", "b"), "ababacaca")
    }),
    test::test({
      "name": "regex replace all occurances 1",
      "test": test::assert("record replace all occurances 1", re::replace_all("c", "abacacaca", "b"), "ababababa")
    }),
    test::test({
      "name": "regex is match 1",
      "test": test::assert("record is match 1", re::is_match("(a?)+a?", "abacacaca"), true)
    }),
    test::test({
      "name": "regex split 1",
      "test": test::assert("record split 1", 
        re::split(
          "a[abc]", 
          "snotabsnotacsnotacsnotacsnotaabadger"), 
          ["snot", "snot", "snot", "snot", "snot", "badger"]
        )
    }),
  ]
});

test::suite({
  "name": "Record library tests",
  "tags": [ "record" ],
  "tests": [
    test::test({
      "name": "record length 1",
      "test": test::assert("record length 1", record::len({}), 0)
    }),
    test::test({
      "name": "record length 2",
      "test": test::assert("record length 2", record::len({"a": 1}), 1)
    }),
    test::test({
      "name": "record length 3",
      "test": test::assert("record length 3", record::len({ "a": 1, "b": 2}), 2)
    }),
    test::test({
      "name": "record is empty 1",
      "test": test::assert("record is empty 1", record::is_empty({}), true)
    }),
    test::test({
      "name": "record is empty 2",
      "test": test::assert("record is empty 2", record::is_empty({"a": 1}), false)
    }),
    test::test({
      "name": "record contains 1",
      "test": test::assert("record contains 1", record::contains({}, "snot"), false)
    }),
    test::test({
      "name": "record contains 2",
      "test": test::assert("record contains 2", record::contains({"a": 1}, "a"), true)
    }),
    test::test({
      "name": "record keys 1",
      "test": test::assert("record keys 1", record::keys({}), [])
    }),
    test::test({
      "name": "record keys 2",
      "test": test::assert("record keys 2", record::keys({"a": 1}), ["a"])
    }),
    test::test({
      "name": "record keys 3",
      "test": test::assert("record keys 3", array::len(record::keys({"a": 1, "b": 2})), 2)
    }),
    test::test({
      "name": "record values 1",
      "test": test::assert("record values 1", record::values({}), [])
    }),
    test::test({
      "name": "record values 2",
      "test": test::assert("record values 2", record::values({"a": 1}), [1])
    }),
    test::test({
      "name": "record values 3",
      "test": test::assert("record values 3", array::len(record::values({"a": 1, "b": 2})), 2)
    }),
    test::test({
      "name": "record to array 1",
      "test": test::assert("record to array 1", record::to_array({}), [])
    }),
    test::test({
      "name": "record to array 2",
      "test": test::assert("record to array 2", record::to_array({"a": 1}), [["a", 1]])
    }),
    test::test({
      "name": "record from array 1",
      "test": test::assert("record from array 1", record::from_array([]), {})
    }),
    test::test({
      "name": "record from array 2",
      "test": test::assert("record from array 2", record::from_array([["a", 1]]), {"a": 1})
    }),
    test::test({
      "name": "record extract 1",
      "test": test::assert("record extract 1", record::extract({"a": 1}, ["c"]), {})
    }),
    test::test({
      "name": "record extract 2",
      "test": test::assert("record extract 2", record::extract({"a": 1}, ["a"]), {"a": 1})
    }),
    test::test({
      "name": "record combine 1",
      "test": test::assert("record combine 1", record::combine({"a": 1}, {"a": 2}), {"a": 2})
    }),
    test::test({
      "name": "record combine 2",
      "test": test::assert("record combine 2", record::combine({"a": 1}, {"b": 2}), {"a": 1, "b": 2})
    }),
    test::test({
      "name": "record rename 1",
      "test": test::assert("record rename 1", record::rename({"a": 1}, {"a": "A"}), {"A": 1})
    }),
    test::test({
      "name": "record rename 2",
      "test": test::assert("record rename 1", record::rename({"a": 1}, {"b": "Badger"}), {"a": 1})
    }),
  ]
});

test::suite({
  "name": "String library tests",
  "tags": [ "string" ],
  "tests": [
    test::test({
      "name": "reverse",
      "test": test::assert("reverse", string::reverse("cats"), "stac")
    }),
    test::test({
      "name": "from_butf8_lossy",
      "test": test::assert("from_butf8_lossy", string::from_utf8_lossy(<< 115, 110, 111, 116 >>), "snot")
    }),
    test::test({
      "name": "into_binary",
      "test": test::assert("into_binary", string::into_binary("snot"), << 115, 110, 111, 116 >>)
    }),
    test::test({
      "name": "format 1",
      "test": test::assert("format 1", string::format("blah"), "blah")
    }),
    test::test({
      "name": "format 2",
      "test": test::assert("format 2", string::format("{}", "snot"), "snot")
    }),
    test::test({
      "name": "format 3",
      "test": test::assert("format 3", string::format("the {} is {}", "meaning of life", 42), "the meaning of life is 42")
    }),
    test::test({
      "name": "len(string) and bytes(string)",
      "test": test::assert(
        "string::len(string) and string::bytes(string)", 
        lenbytes(["snot", "badger", "💩👻💀👽👾🤖🎃"]),
        [ [4, 4], [6, 6], [7, 7 * 4] ] # 7 emoji each with 4 bytes per codepoint = 28 bytes
      ),
    }),
    test::test({
      "name": "replace 1",
      "test": test::assert("replace 1", string::replace("snot badger", "badger", "snot"), "snot snot")
    }),
    test::test({
      "name": "replace 2",
      "test": test::assert("replace 2", string::replace("snot snot", "snot", "badger"), "badger badger")
    }),
    test::test({
      "name": "trim 1",
      "test": test::assert("trim 1", string::trim("    foo    "), "foo")
    }),
    test::test({
      "name": "trim 2",
      "test": test::assert("trim 2", string::trim("\n\n  foo\n\n  "), "foo")
    }),
    test::test({
      "name": "trim_start 1",
      "test": test::assert("trim_start 1", string::trim_start("    foo    "), "foo    ")
    }),
    test::test({
      "name": "trim_start 2",
      "test": test::assert("trim_start 2", string::trim_start("\n\n  foo\n\n  "), "foo\n\n  ")
    }),
    test::test({
      "name": "trim_end 1",
      "test": test::assert("trim_end 1", string::trim_end("    foo    "), "    foo")
    }),
    test::test({
      "name": "trim_end 2",
      "test": test::assert("trim_end 2", string::trim_end("\n\n  foo\n\n  "), "\n\n  foo")
    }),
    test::test({
      "name": "lowercase 1",
      "test": test::assert("lowercase 1", string::lowercase("SnOt BaDgEr"), "snot badger")
    }),
    test::test({
      "name": "lowercase 2",
      "test": test::assert("lowercase 2", string::lowercase("SNOT BADGER"), "snot badger")
    }),
    test::test({
      "name": "uppercase 1",
      "test": test::assert("uppercase 1", string::uppercase("SnOt BaDgEr"), "SNOT BADGER")
    }),
    test::test({
      "name": "uppercase 2",
      "test": test::assert("uppercase 2", string::uppercase("snot badger"), "SNOT BADGER")
    }),
    test::test({
      "name": "capitalize 1",
      "test": test::assert("capitalize 1", string::capitalize("SnOt BaDgEr"), "SnOt BaDgEr")
    }),
    test::test({
      "name": "capitalize 2",
      "test": test::assert("capitalize 2", string::capitalize("snot badger"), "Snot badger")
    }),
    test::test({
      "name": "substr 1",
      "test": test::assert("substr 1", string::substr("SnOt BaDgEr", 0, 4), "SnOt")
    }),
    test::test({
      "name": "substr 2",
      "test": test::assert("substr 2", string::substr("snot badger", 5, 10), "badge")
    }),
    test::test({
      "name": "split 1",
      "test": test::assert("split 1", string::split("", " "), [ "" ])
    }),
    test::test({
      "name": "split 2",
      "test": test::assert("split 2", string::split("snot badger", " "), [ "snot", "badger"])
    }),
    test::test({
      "name": "contains 1",
      "test": test::assert("contains 1", string::contains("snot badger", "snot"), true)
    }),
    test::test({
      "name": "contains 2",
      "test": test::assert("contains 2", string::contains("snot badger", "aardvark"), false)
    }),
  ],
});

test::suite({
  "name": "Type system tests",
  "tags": [ "type" ],
  "tests": [
    test::test({
      "name": "as_string(null)",
      "test": test::assert("as_string(null)", type::as_string(null), "null"),
    }),
    test::test({
      "name": "as_string(bool)",
      "test": test::assert("as_string(bool)", as_string([ true, false ]), [ "bool", "bool" ])
    }),
    test::test({
      "name": "as_string(int)",
      "test": test::assert("as_string(int)", as_string([ -1, 0, 1]), [ "integer", "integer", "integer" ])
    }),
    test::test({
      "name": "as_string(float)",
      "test": test::assert("as_string(float)", as_string([ -1.01, 0.01, 1.01]), [ "float", "float", "float" ])
    }),
    test::test({
      "name": "as_string(string)",
      "test": test::assert("as_string(string)", as_string([ "snot", "badger" ]), [ "string", "string" ])
    }),
    test::test({
      "name": "as_string([])",
      "test": test::assert("as_string([])", as_string([ [], ["snot"] ]), [ "array", "array" ])
    }),
    test::test({
      "name": "as_string({})",
      "test": test::assert("as_string({})", as_string([ {}, {"snot": "badger" }]), [ "record", "record" ])
    }),
    test::test({
      "name": "is_null(null)",
      "test": test::assert("is_null(null)", type::is_null(null), true)
    }),
    test::test({
      "name": "is_null(true)",
      "test": test::assert("is_null(true)", type::is_null(true), false)
    }),
    test::test({
      "name": "is_bool(null)",
      "test": test::assert("is_bool(null)", type::is_bool(null), false)
    }),
    test::test({
      "name": "is_bool(true)",
      "test": test::assert("is_bool(true)", type::is_bool(true), true)
    }),
    test::test({
      "name": "is_integer(null)",
      "test": test::assert("is_integer(null)", type::is_integer(null), false)
    }),
    test::test({
      "name": "is_integer(true)",
      "test": test::assert("is_integer(1)", type::is_integer(1), true)
    }),
    test::test({
      "name": "is_float(null)",
      "test": test::assert("is_float(null)", type::is_float(null), false)
    }),
    test::test({
      "name": "is_float(true)",
      "test": test::assert("is_float(1.0)", type::is_float(1.0), true)
    }),
    test::test({
      "name": "is_number(null)",
      "test": test::assert("is_number(null)", type::is_number(null), false)
    }),
    test::test({
      "name": "is_number(true)",
      "test": test::assert("is_number(1.0)", type::is_number(1.0), true)
    }),
    test::test({
      "name": "is_number(true)",
      "test": test::assert("is_number(1)", type::is_number(1), true)
    }),
    test::test({
      "name": "is_string(null)",
      "test": test::assert("is_string(null)", type::is_string(null), false)
    }),
    test::test({
      "name": "is_string(true)",
      "test": test::assert("is_string(\"snot\")", type::is_string("snot"), true)
    }),
    test::test({
      "name": "is_array(null)",
      "test": test::assert("is_array(null)", type::is_array(null), false)
    }),
    test::test({
      "name": "is_array([])",
      "test": test::assert("is_array([])", type::is_array([]), true)
    }),
    test::test({
      "name": "is_record(null)",
      "test": test::assert("is_record(null)", type::is_record(null), false)
    }),
    test::test({
      "name": "is_record({})",
      "test": test::assert("is_record({})", type::is_record({}), true)
    }),
    test::test({
      "name": "is_binary(null)",
      "test": test::assert("is_binary(null)", type::is_binary(null), false)
    }),
    test::test({
      "name": "is_binary(<<>>)",
      "test": test::assert("is_binary(<<>>)", type::is_binary(<<>>), true)
    }),
  ]
});

test::suite({
  "name": "URL Encoding and decoding tests",
  "tags": [ "url", "encode" ],
  "tests": [
    test::test({
      "name": "Test encoded characters in std::url::encode",
      "test": test::assert("url::encode", url::encode("!*'();:@&=+$,/?#[]"), "%21%2A%27%28%29%3B%3A%40%26%3D%2B%24%2C%2F%3F%23%5B%5D"),
    }),
    test::test({
      "name": "Test decoded characters in std::url::encode",
      "test": test::assert("url::decode", url::decode("%21%2A%27%28%29%3B%3A%40%26%3D%2B%24%2C%2F%3F%23%5B%5D"), "!*'();:@&=+$,/?#[]"),
    }),
  ],
});

test::suite({
  "name": "base64 Encoding and decoding tests",
  "tags": [ "base64", "encode", "binary" ],
  "tests": [
    test::test({
      "name": "Test encoded binary to a base64 string",
      "test": test::assert("base64::encode", base64::encode(<< 115, 110, 111, 116 >>), "c25vdA=="),
    }),
    test::test({
      "name": "Test decoded a base64 string",
      "test": test::assert("base64::decode", base64::decode("c25vdA=="), << 115, 110, 111, 116 >>),
    }),
  ],
});

test::suite({
  "name": "binary type utility functions",
  "tags": [ "binary" ],
  "tests": [
    test::test({
      "name": "Tests the len function",
      "test": test::assert("binary::len", binary::len(<< 115, 110, 111, 116 >>), 4),
    }),
    test::test({ 
      "name": "Tests the from_bytes function",
      "test": test::assert("binary::from_bytes", binary::from_bytes([115, 110, 111, 116]), << 115, 110, 111, 116 >>),
    }),
    test::test({
      "name": "Tests the into_bytes function",
      "test": test::assert("binary::into_bytes", binary::into_bytes(<< 115, 110, 111, 116 >>), [115, 110, 111, 116]),
    }),
    test::test({
      "name": "Tests the into_bytes function",
      "test": test::assert("binary::into_bytes", binary::into_bytes(<< 1:16 >>), [0, 1]),
    }),
  ],
});

test::suite({
  "name": "path utility functions",
  "tags": [ "path" ],
  "tests": [
    test::test({
      "name": "Path resolve or default 0",
      "test": test::assert("path::try_default", path::try_default(null, ["snot"], "horse"), "horse")
    }),
    test::test({
      "name": "Path resolve or default 0",
      "test": test::assert("path::try_default", path::try_default(null, [], "horse"), "horse")
    }),
    test::test({
      "name": "Path resolve or default 1",
      "test": test::assert("path::try_default", path::try_default({"snort": "badger"}, ["snot"], "horse"), "horse")
    }),
    test::test({
      "name": "Path resolve or default 1",
      "test": test::assert("path::try_default", path::try_default({"snot": [ "badger" ]}, ["snot"], "horse"), [ "badger" ])
    }),
    test::test({
      "name": "Path resolve or default 1",
      "test": test::assert("path::try_default", path::try_default({"snot": [ "badger" ]}, ["snort"], "horse"), "horse")
    }),
    test::test({
      "name": "Path resolve or default 1",
      "test": test::assert("path::try_default", path::try_default({"snot": [ "badger" ]}, ["snot", 0], "horse"), "badger")
    }),
  ],
});

test::suite({
  "name": "time::nanos utility functions",
  "tags": ["time", "nanos"],
  "tests": [
    test::test({
      "name": "from_weeks",
      "test": test::assert("time::nanos::from_weeks", nanos::to_weeks(nanos::from_weeks(42)), 42)
    }),
    test::test({
      "name": "from_days",
      "test": test::assert("time::nanos::from_days", nanos::to_days(nanos::from_days(42)), 42)
    }),
    test::test({
      "name": "from_hours",
      "test": test::assert("time::nanos::from_hours", nanos::to_hours(nanos::from_hours(42)), 42)
    }),
    test::test({
      "name": "from_minutes",
      "test": test::assert("time::nanos::from_minutes", nanos::to_minutes(nanos::from_minutes(42)), 42)
    }),
    test::test({
      "name": "from_seconds",
      "test": test::assert("time::nanos::from_seconds", nanos::to_seconds(nanos::from_seconds(42)), 42)
    }),
    test::test({
      "name": "from_millis",
      "test": test::assert("time::nanos::from_millis", nanos::to_millis(nanos::from_millis(42)), 42)
    }),
    test::test({
      "name": "from_micros",
      "test": test::assert("time::nanos::from_micros", nanos::to_micros(nanos::from_micros(42)), 42)
    }),
    test::test({
      "name": "truncate_micros",
      "test": test::assert("time::nanos::truncate_micros", nanos::truncate_micros(9_999), 9_000)
    }),
    test::test({
      "name": "truncate_millis",
      "test": test::assert("time::nanos::truncate_millis", nanos::truncate_millis(9_999_999), 9_000_000)
    }),
    test::test({
      "name": "truncate_seconds",
      "test": test::assert("time::nanos::truncate_seconds", nanos::truncate_seconds(9_999_999_999), 9_000_000_000)
    }),
    test::test({
      "name": "truncate_minutes",
      "test": test::assert("time::nanos::truncate_minutes", nanos::truncate_minutes(69_999_999_999), 60_000_000_000)
    }),
    test::test({
      "name": "truncate_hours",
      "test": test::assert("time::nanos::truncate_hours", nanos::truncate_hours(3_699_999_999_999), 3_600_000_000_000)
    }),
    test::test({
      "name": "truncate_hours_negative",
      "test": test::assert("time::nanos::truncate_hours", nanos::truncate_hours(-1), -3_600_000_000_000)
    }),
    test::test({
      "name": "truncate_days",
      "test": test::assert("time::nanos::truncate_days", nanos::truncate_days(86_499_999_999_999), 86_400_000_000_000)
    }),
  ]
});

test::suite({
  "name": "datetime",
  "tags": ["datetime"],
  "tests": [
    test::test({
      "name": "rfc3339",
      "test": test::assert("datetime::rfc3339", datetime::rfc3339(0), "1970-01-01T00:00:00+00:00")
    }),
    test::test({
      "name": "rfc3339",
      "test": test::assert("datetime::rfc2282", datetime::rfc2822(0), "Thu, 1 Jan 1970 00:00:00 +0000")
    }),
    test::test({
      "name": "rfc3339 Z",
      "test": test::assert("datetime::rfc3339 Z", datetime::rfc3339(1_559_655_782_000_000_000), "2019-06-04T13:43:02+00:00")
    }),
    test::test({
      "name": "format timestamp",
      "test": test::assert("datetime::format", datetime::format(1667998614978835761, datetime::formats::RFC2822), "Wed, 09 Nov 2022 12:56:54 +0000")
    }),
    test::test({
      "name": "format with timezone",
      "test": test::assert("datetime::format", datetime::format(datetime::with_timezone(123, datetime::timezones::EUROPE_BERLIN), "%Y-%m-%dT%H:%M:%S.%f%:z"), "1970-01-01T01:00:00.000000123+01:00")
    }),
    test::test({
      "name": "with_timezone attach",
      "test": test::assert("datetime::with_timezone", datetime::with_timezone(0, datetime::timezones::EUROPE_LONDON), {"timestamp": 0, "tz": datetime::timezones::EUROPE_LONDON})
    }),
    test::test({
      "name": "with_timezone name",
      "test": test::assert("datetime::with_timezone", datetime::with_timezone(0, "Europe/London"), {"timestamp": 0, "tz": "Europe/London"})
    }),
    test::test({
      "name": "with_timezone offset",
      "test": test::assert("datetime::with_timezone", datetime::with_timezone(0, "-0200"), {"timestamp": 0, "tz": "-0200"})
    }),
    test::test({
      "name": "with_timezone update",
      "test": test::assert("datetime::with_timezone", datetime::with_timezone({"timestamp": 0, "tz": datetime::timezones::EUROPE_LONDON}, datetime::timezones::ATLANTIC_JAN_MAYEN), {"timestamp": 0, "tz": datetime::timezones::ATLANTIC_JAN_MAYEN})
    }),
    test::test({
      "name": "parse RFC3339",
      "test": test::assert("datetime::parse", datetime::parse("2022-11-09T14:46:11.499274824+01:00", datetime::formats::RFC3339), 1668001571499274824)
    }),
    test::test({
      "name": "parse RFC3339 Z",
      "test": test::assert("datetime::parse", datetime::parse("2023-04-23T13:11:37.285Z", datetime::formats::RFC3339), 1682255497285000000)
    }),
    test::test({
      "name": "parse RFC2822",
      "test": test::assert("datetime::parse", datetime::parse("Fri, 21 Nov 1997 09:55:06 -0600", datetime::formats::RFC2822), 880127706000000000)
    }),
    test::test({
      "name": "format RFC2822",
      "test": test::assert("datetime::format", datetime::format(880127706000000000, datetime::formats::RFC2822), "Fri, 21 Nov 1997 15:55:06 +0000")
    }),
    test::test({
      "name": "format RFC2822 with timezone",
      "test": test::assert("datetime::format", datetime::format(datetime::with_timezone(880127706000000000, datetime::timezones::US_CENTRAL), datetime::formats::RFC2822), "Fri, 21 Nov 1997 09:55:06 -0600")
    }),
    test::test({
      "name": "year",
      "test": test::assert("datetime::year", datetime::year(0), 1970)
    }),
    test::test({
      "name": "month",
      "test": test::assert("datetime::month", datetime::month(0), 1)
    }),
    test::test({
      "name": "iso_week",
      "test": test::assert("datetime::iso_week", datetime::iso_week(1668001571499274824), 45)
    }),
    test::test({
      "name": "day_of_month",
      "test": test::assert("datetime::day_of_month", datetime::day_of_month(nanos::from_days(40)), 10)
    }),
    test::test({
      "name": "day_of_year",
      "test": test::assert("datetime::day_of_year", datetime::day_of_year(nanos::from_days(40)), 41)
    }),
    test::test({
      "name": "hour",
      "test": test::assert("datetime::hour", datetime::hour({"timestamp": 0, "tz": "+01:00"}), 1)
    }),
    test::test({
      "name": "minute",
      "test": test::assert("datetime::minute", datetime::minute({"timestamp": 0, "tz": "+01:02"}), 2)
    }),
    test::test({
      "name": "second",
      "test": test::assert("datetime::second", datetime::second(0), 0)
    }),
    test::test({
      "name": "subsecond_millis",
      "test": test::assert("datetime::subsecond_millis", datetime::subsecond_millis(1668001571499274824), 499)
    }),
    test::test({
      "name": "subsecond_micros",
      "test": test::assert("datetime::subsecond_micros", datetime::subsecond_micros(1668001571499274824), 499274)
    }),
    test::test({
      "name": "subsecond_nanos",
      "test": test::assert("datetime::subsecond_nanos", datetime::subsecond_nanos(1668001571499274824), 499274824)
    }),
  ]
});

"snot badger";
