connector:
  - id: input_file
    type: file
    preprocessors:
      - lines
    codec: json
    config:
      path: "input.json"
      mode: read
  - id: output_file
    type: file
    postprocessors:
      - lines
    codec: json
    config:
      path: "output.log"
      mode: truncate
  - id: tcp_client
    type: tcp_client
    codec: json
    postprocessors:
      - lines
    config:
      host: "127.0.0.1"
      port: 65535
      ttl: 64
      no_delay: false
      buf_size: 1024
      tls:
        cafile: "./before/localhost.cert"
        domain: "localhost"
    reconnect:
      custom:
        interval_ms: 100
        growth_rate: 2
        max_retries: 3
  - id: tcp_server
    type: tcp_server
    codec: json
    preprocessors:
      - lines
    config:
      host: "0.0.0.0"
      port: 65535
      buf_size: 1024
      tls:
        cert: "./before/localhost.cert"
        key: "./before/localhost.key"
  - id: exit
    type: exit

binding:
  - id: tcp_tls
    links:
      # flow from file to tcp_client
      "/connector/input_file/{instance}/out":
        - "/pipeline/system::passthrough/{instance}_to_client/in"
      "/connector/input_file/{instance}/err":
        - "/pipeline/system::passthrough/{instance}_debug/in"
      "/pipeline/system::passthrough/{instance}_to_client/out":
        - "/connector/tcp_client/{instance}/in"
      # send out any responses to stdout
      "/connector/tcp_client/{instance}/out":
        - "/pipeline/system::passthrough/{instance}_debug/in"
      "/connector/tcp_client/{instance}/err":
        - "/pipeline/system::passthrough/{instance}_debug/in"
      "/pipeline/system::passthrough/{instance}_debug/out":
        - "/connector/system::stdio/{instance}/in"

      # flow from tcp_server to file
      "/connector/tcp_server/{instance}/out":
        - "/pipeline/server_side/{instance}/in"
      "/connector/tcp_server/{instance}/err":
        - "/pipeline/system::passthrough/{instance}_debug/in"
      "/pipeline/server_side/{instance}/out":
        - "/connector/output_file/{instance}/in"
        # aaaand echo it back
        - "/connector/tcp_server/{instance}/in"
      "/pipeline/server_side/{instance}/exit":
        - "/connector/exit/{instance}/in"

mapping:
  /binding/tcp_tls/01:
    instance: "01"