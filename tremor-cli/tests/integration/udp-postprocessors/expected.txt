YWJvdXQ6IFBhcmlhdHVyIG51bGxhIHRlbXBvciB2ZW5pYW0gY29uc2VjdGV0dXIgaW4gcHJvaWRlbnQgbGFib3JlIGNpbGx1bSBsYWJvcmUuIFJlcHJlaGVuZGVyaXQgbnVsbGEgbW9sbGl0IGxhYm9yaXMgb2ZmaWNpYSB0ZW1wb3IgcXVpIGlkIGRvbG9yZSBkb2xvci4gRXhjZXB0ZXVyIG1pbmltIHNpdCBMb3JlbSBzdW50IGNpbGx1bS4gRG9sb3IgZXggaW4gYWxpcXVhIExvcmVtIG1pbmltIG9mZmljaWEgY2lsbHVtIGluIGNvbnNlcXVhdCBkb2xvciBjb25zZXF1YXQgcHJvaWRlbnQgbm9zdHJ1ZC4gRWEgcXVpcyB2ZW5pYW0gbWFnbmEgZXhlcmNpdGF0aW9uLiBMYWJvcmlzIGF1dGUgZXhjZXB0ZXVyIGV4ZXJjaXRhdGlvbiBpcHN1bSBkbyBkbyBpbmNpZGlkdW50IHF1aSB1bGxhbWNvIGVsaXQgdmVsaXQgbGFib3JpcyBlc3QgaW5jaWRpZHVudC4gQWxpcXVpcCBkdWlzIGN1cGlkYXRhdCBkZXNlcnVudCBjdWxwYS4KZ3VpZDogYTk1YmI5MjktMjU2Ny00MDY2LTgwMjMtOGJmNTMyNjY1MTIxCmFib29sOiBmYWxzZQphaW50OiAzMwpzaG9ydF9tZXNzYWdlOiBpbmZvCnRhZ3M6Ci0gdGFnNAotIHRhZzEKLSB0YWcyCi0gdGFnMQotIHRhZzQKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzcWxzZXJ2ZXJsb2cKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0NQphcHBsaWNhdGlvbjogYXBwNAp0eXBlOiBzeXNsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IFZlbmlhbSB0ZW1wb3Igbm9uIHF1aSBldSBvZmZpY2lhLiBEbyBpZCBjdWxwYSBsYWJvcmUgbmlzaSBlc3QgYWxpcXVhIGV0LiBVdCBleGNlcHRldXIgZnVnaWF0IG1pbmltIHF1aSB1dCBleGVyY2l0YXRpb24gdGVtcG9yIGluY2lkaWR1bnQgb2ZmaWNpYSBleGNlcHRldXIgZWxpdCBjdWxwYSB2ZW5pYW0gZW5pbS4gVWxsYW1jbyBxdWkgbm9zdHJ1ZCBhbWV0IGRvbG9yZSBxdWkgbW9sbGl0IG1hZ25hIHZlbGl0IGRlc2VydW50IGxhYm9yaXMgcmVwcmVoZW5kZXJpdCB1bGxhbWNvIHZlbGl0IG5pc2kuIFN1bnQgdmVuaWFtIGVzc2Ugc2l0IGNvbnNlY3RldHVyIG5pc2kgc3VudCBlbGl0IHNpbnQuIEVpdXNtb2QgZnVnaWF0IGNvbnNlY3RldHVyIG51bGxhIHV0IGR1aXMgcGFyaWF0dXIgdGVtcG9yIHRlbXBvciByZXByZWhlbmRlcml0IGNvbnNlcXVhdCBlYS4KZ3VpZDogNmJmZmFkZjUtNTRiMy00NTFmLTlhZmEtNTU1YzE0MDg2ZTM2CmFib29sOiBmYWxzZQphaW50OiAyMwpzaG9ydF9tZXNzYWdlOiBFUlJPUgp0YWdzOgotIHRhZzIKLSB0YWcyCi0gdGFnMgotIHRhZzUKLSB0YWcxCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDQKbG9nZ2VyX25hbWU6IGxvZ2dlcjMKc3lzbG9nX2hvc3RuYW1lOiBob3N0NgphcHBsaWNhdGlvbjogYXBwNgp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEFsaXF1YSBhdXRlIGRvbG9yZSBvZmZpY2lhIG51bGxhIHZlbGl0IGNvbW1vZG8gY29tbW9kbyBtYWduYS4gVGVtcG9yIGNvbnNlY3RldHVyIHN1bnQgZXggbGFib3Jpcy4gVXQgZGVzZXJ1bnQgYWQgaXJ1cmUgbmlzaSBtYWduYSBsYWJvcmlzIHZvbHVwdGF0ZSBlbmltIGFsaXF1YSBhZCBub24uIFF1aXMgZG9sb3IgcXVpIGN1bHBhIG1hZ25hIHF1aSBvZmZpY2lhIG9jY2FlY2F0IGxhYm9yZSBhZGlwaXNpY2luZyBub24gY29uc2VjdGV0dXIgZXggcXVpLiBQYXJpYXR1ciBlc3QgdmVuaWFtIGFsaXF1YSBjaWxsdW0gc3VudCBxdWkgZXNzZSBzdW50IGV4IGRvbG9yZSBudWxsYSBldCBjaWxsdW0gZWxpdC4KZ3VpZDogNDVjNjc4ZDctODc0Ny00MDQ1LTlkNzUtOTc3ZjM0Y2RlYTg0CmFib29sOiBmYWxzZQphaW50OiAyMgpzaG9ydF9tZXNzYWdlOiBJTkZPCnRhZ3M6Ci0gdGFnNAotIHRhZzMKLSB0YWcyCi0gdGFnMwotIHRhZzUKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBhcHBsb2dfYXBwNApsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q1CmFwcGxpY2F0aW9uOiBhcHA0CnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEFkIGR1aXMgYXV0ZSBtYWduYSBleCBlc3Qgbm9zdHJ1ZCBsYWJvcmUgY3VscGEgc2l0IGRvbG9yZSBub3N0cnVkLiBWZWxpdCBleGNlcHRldXIgaWQgZXhjZXB0ZXVyIGNvbW1vZG8gdXQgcHJvaWRlbnQgZWEgb2ZmaWNpYSBkZXNlcnVudCBtaW5pbSByZXByZWhlbmRlcml0IHV0IHByb2lkZW50LiBNb2xsaXQgaWQgZXUgaW5jaWRpZHVudCBleCBxdWkgb2ZmaWNpYSBub3N0cnVkIGxhYm9ydW0uIFZvbHVwdGF0ZSBvY2NhZWNhdCBzdW50IExvcmVtIG1hZ25hIGVpdXNtb2QgY3VscGEgcmVwcmVoZW5kZXJpdCBhdXRlIG1pbmltIHJlcHJlaGVuZGVyaXQuIE1vbGxpdCBjb21tb2RvIHV0IGRvIGRlc2VydW50IGVzdCBldSBkdWlzIGVpdXNtb2QgTG9yZW0gc2ludCBpbmNpZGlkdW50IGR1aXMgb2NjYWVjYXQuIFNpdCBkb2xvciBldCBsYWJvcnVtIGFuaW0gZXUgbnVsbGEgdXQgZXN0LgpndWlkOiBhNDBmOTEzMi00ZmM3LTQzMDAtYjgyMi1iMmFkMDM2NjAxYjMKYWJvb2w6IGZhbHNlCmFpbnQ6IDIxCnNob3J0X21lc3NhZ2U6IGVycm9yCnRhZ3M6Ci0gdGFnMwotIHRhZzMKLSB0YWc1Ci0gdGFnNQotIHRhZzUKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBhcHBsb2dfYXBwNApsb2dnZXJfbmFtZTogbG9nZ2VyMgpzeXNsb2dfaG9zdG5hbWU6IGhvc3QzCmFwcGxpY2F0aW9uOiBhcHAzCnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEluIGVzdCBzaW50IG5vbiBhbWV0IGVhIGN1bHBhIGVhIG5vc3RydWQgYXV0ZSBlaXVzbW9kIGF1dGUgYWxpcXVpcCBvZmZpY2lhLiBEb2xvciB1bGxhbWNvIGN1cGlkYXRhdCBlc3NlIGNvbnNlcXVhdCBwYXJpYXR1ciBpcHN1bSBhZGlwaXNpY2luZyBzaXQgbGFib3JpcyB2ZW5pYW0gc2ludCBlaXVzbW9kIGxhYm9yaXMuIFBhcmlhdHVyIGlydXJlIG5vbiBlc3NlIG1hZ25hIGV4IGVhIHBhcmlhdHVyLgpndWlkOiAzZDk0YzdjYS1kNWU5LTQ5N2MtYmYxNy05OWM0YzMzYjRkZTUKYWJvb2w6IHRydWUKYWludDogMzAKc2hvcnRfbWVzc2FnZTogd2Fybgp0YWdzOgotIHRhZzQKLSB0YWcxCi0gdGFnNAotIHRhZzMKLSB0YWcyCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDQKbG9nZ2VyX25hbWU6IGxvZ2dlcjMKc3lzbG9nX2hvc3RuYW1lOiBob3N0NgphcHBsaWNhdGlvbjogYXBwMQp0eXBlOiBzeXNsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEluY2lkaWR1bnQgY29uc2VjdGV0dXIgY29uc2VjdGV0dXIgcXVpIG1vbGxpdCBsYWJvcnVtIGlkIGFsaXF1YSBkdWlzIGluY2lkaWR1bnQgc2ludC4gQW1ldCB2b2x1cHRhdGUgbm9zdHJ1ZCBuaXNpIHVsbGFtY28gdmVuaWFtIG51bGxhIGNvbnNlY3RldHVyIHF1aXMgdmVsaXQgdmVsaXQgZnVnaWF0LiBJcHN1bSBhbGlxdWEgbGFib3JpcyBsYWJvcnVtIGFkaXBpc2ljaW5nIGlwc3VtLiBBdXRlIGNvbnNlY3RldHVyIG5pc2kgZXggc2l0IGN1cGlkYXRhdCBlYSBkb2xvcmUgZG9sb3JlIGFkaXBpc2ljaW5nIGluIGRvbG9yZSBjaWxsdW0gZWxpdCBldS4gSW4gbGFib3J1bSBkb2xvciBhbmltIGxhYm9yaXMgbGFib3JpcyBlaXVzbW9kIHNpdCBtb2xsaXQgdmVuaWFtIGVuaW0gZXggZG8gb2ZmaWNpYS4gTGFib3JlIHN1bnQgb2NjYWVjYXQgYW1ldCB1dCB2ZWxpdCBwYXJpYXR1ci4gTGFib3J1bSBleGNlcHRldXIgY29tbW9kbyByZXByZWhlbmRlcml0IGFkIHF1aSBpZC4KZ3VpZDogNGU3MDIzNzctODFhYi00MGY5LTk4NTgtMTMzNGVlMjAxYmY3CmFib29sOiB0cnVlCmFpbnQ6IDIyCnNob3J0X21lc3NhZ2U6IElORk8KdGFnczoKLSB0YWc0Ci0gdGFnMQotIHRhZzIKLSB0YWcxCi0gdGFnNAphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA2CmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDEKYXBwbGljYXRpb246IGFwcDIKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEFsaXF1aXAgbm9zdHJ1ZCBhbWV0IGVuaW0gcmVwcmVoZW5kZXJpdC4gQXV0ZSBub24gZWxpdCBuaXNpIG1vbGxpdCBudWxsYSB1bGxhbWNvIG1pbmltLiBJZCBhbWV0IGVuaW0gaWQgZG9sb3JlIGlwc3VtLgpndWlkOiBiNDE1ZTAyMC0wNWQ2LTRiYWYtOTg2MC0wOTlhZGIyYjVkZTcKYWJvb2w6IHRydWUKYWludDogMjAKc2hvcnRfbWVzc2FnZTogSU5GTwp0YWdzOgotIHRhZzUKLSB0YWc0Ci0gdGFnNQotIHRhZzUKLSB0YWc1CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3Fsc2VydmVybG9nCmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDQKYXBwbGljYXRpb246IGFwcDEKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IExhYm9yaXMgdGVtcG9yIGNpbGx1bSBjdWxwYSBpbiBleGVyY2l0YXRpb24gb2NjYWVjYXQgaXJ1cmUgYWQuIFRlbXBvciBtb2xsaXQgaW5jaWRpZHVudCBzaXQgYWQgdXQgdm9sdXB0YXRlIGxhYm9yaXMgYW5pbSBudWxsYSBjdXBpZGF0YXQuIE9jY2FlY2F0IG1pbmltIGluIG51bGxhIHV0IGV4Y2VwdGV1ciBleCBub24gZG9sb3IgYWQgY2lsbHVtIGNvbW1vZG8uIEluIGVpdXNtb2QgYWQgZnVnaWF0IGFkaXBpc2ljaW5nIHV0IG5pc2kgZG9sb3JlIGV4ZXJjaXRhdGlvbiBjb25zZXF1YXQgbGFib3Jpcy4KZ3VpZDogMmMyMzQ3NDgtN2FlOS00N2Y1LTg5MzctMDlmYjFkOGE5NTc2CmFib29sOiBmYWxzZQphaW50OiAzNQpzaG9ydF9tZXNzYWdlOiBlcnJvcgp0YWdzOgotIHRhZzUKLSB0YWcxCi0gdGFnNQotIHRhZzIKLSB0YWczCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogYXBwbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0NQphcHBsaWNhdGlvbjogYXBwNAp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IFVsbGFtY28gcHJvaWRlbnQgZXQgY3VwaWRhdGF0IGNvbnNlcXVhdCBvY2NhZWNhdCBhbWV0IGlwc3VtIG51bGxhIHRlbXBvciBhbWV0IGRlc2VydW50IGRvbG9yLiBSZXByZWhlbmRlcml0IGVpdXNtb2QgZHVpcyBjb25zZWN0ZXR1ciBjb25zZWN0ZXR1ciBlbGl0IGlkIG5vc3RydWQuIFN1bnQgcmVwcmVoZW5kZXJpdCBzdW50IGZ1Z2lhdCBhZGlwaXNpY2luZyBuaXNpIHF1aXMgTG9yZW0gYXV0ZSBjb25zZXF1YXQgZG8gaW4gZG9sb3IuIE1vbGxpdCBudWxsYSBxdWkgb2NjYWVjYXQgdm9sdXB0YXRlIG9jY2FlY2F0IG5pc2kgaWQgb2NjYWVjYXQgcmVwcmVoZW5kZXJpdCBudWxsYSB2b2x1cHRhdGUgZWl1c21vZC4gSXJ1cmUgbWFnbmEgYWxpcXVhIGN1cGlkYXRhdCBxdWkgbm9zdHJ1ZCBjdWxwYSBsYWJvcnVtIGRlc2VydW50IG1vbGxpdC4KZ3VpZDogZjgxMTkyNjktODUzZS00MTU2LTljZDctM2Q3MmMxNGU1NjlkCmFib29sOiBmYWxzZQphaW50OiAzMQpzaG9ydF9tZXNzYWdlOiBFUlJPUgp0YWdzOgotIHRhZzUKLSB0YWczCi0gdGFnNAotIHRhZzEKLSB0YWczCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogYXBwbG9nX2FwcDYKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0NAphcHBsaWNhdGlvbjogYXBwNQp0eXBlOiBzeXNsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IENvbW1vZG8gdm9sdXB0YXRlIG9jY2FlY2F0IHRlbXBvciBzdW50IGlwc3VtIHRlbXBvciB1bGxhbWNvIG9mZmljaWEgc2l0IHByb2lkZW50LiBPZmZpY2lhIHNpbnQgdm9sdXB0YXRlIGxhYm9ydW0gbW9sbGl0IHV0LiBFaXVzbW9kIGVpdXNtb2QgaW4gZG9sb3IgcmVwcmVoZW5kZXJpdCBwYXJpYXR1ciBpbiBkdWlzIGN1bHBhIGxhYm9yZSBkZXNlcnVudCBtb2xsaXQgY29uc2VjdGV0dXIgbm9zdHJ1ZC4gUXVpcyBub3N0cnVkIHF1aSBhdXRlIHZlbGl0IG1vbGxpdCBtaW5pbSBhbGlxdWlwIHNpdC4gTm9zdHJ1ZCBpbiBkb2xvcmUgbmlzaSBkb2xvcmUgcGFyaWF0dXIgZXggcGFyaWF0dXIgYWxpcXVpcCBtb2xsaXQgY3VscGEgYXV0ZSB0ZW1wb3IuCmd1aWQ6IDQ0YmQ4MjAzLTFlNDMtNGVjMy04NmFiLTcyYmIxNTAzMmZkZQphYm9vbDogZmFsc2UKYWludDogMzUKc2hvcnRfbWVzc2FnZTogSU5GTwp0YWdzOgotIHRhZzEKLSB0YWc1Ci0gdGFnNQotIHRhZzIKLSB0YWczCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDMKbG9nZ2VyX25hbWU6IGxvZ2dlcjMKc3lzbG9nX2hvc3RuYW1lOiBob3N0NAphcHBsaWNhdGlvbjogYXBwNAp0eXBlOiBzeXNsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IFZvbHVwdGF0ZSBjb21tb2RvIGFkIHF1aSBjaWxsdW0gYW1ldC4gQ2lsbHVtIGVhIG5pc2kgbm9uIGlydXJlIG9jY2FlY2F0IG1hZ25hIHN1bnQgcHJvaWRlbnQgZXQuIFNpdCBldCBlaXVzbW9kIGVzc2UgcXVpcyBkbyBhZGlwaXNpY2luZyBhbGlxdWlwIHNpbnQgY2lsbHVtIG1hZ25hIHF1aXMgZXhjZXB0ZXVyIGR1aXMgZG9sb3IuIE51bGxhIGxhYm9yZSBjb21tb2RvIGRvbG9yZSBub24gZnVnaWF0IGNpbGx1bSBub3N0cnVkIGVzdCB1bGxhbWNvIGFsaXF1aXAgcXVpLgpndWlkOiA2NDdmMmZkMC1lNjkzLTRjNGUtOGI5MC04M2YxZWI2OGM4ODMKYWJvb2w6IHRydWUKYWludDogMjYKc2hvcnRfbWVzc2FnZTogRVJST1IKdGFnczoKLSB0YWc0Ci0gdGFnMwotIHRhZzUKLSB0YWczCi0gdGFnNAphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHA0CmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDMKYXBwbGljYXRpb246IGFwcDMKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEVzc2UgZnVnaWF0IGNvbnNlY3RldHVyIGZ1Z2lhdCBwYXJpYXR1ciBjaWxsdW0gZGVzZXJ1bnQgcHJvaWRlbnQgZXNzZSBxdWlzIGNvbW1vZG8gY29uc2VxdWF0IHBhcmlhdHVyIG1pbmltLiBVbGxhbWNvIGlydXJlIG9mZmljaWEgZWxpdCBtYWduYSBleGNlcHRldXIgdGVtcG9yIHF1aXMgZXggTG9yZW0gcmVwcmVoZW5kZXJpdCBzdW50LiBDdWxwYSBpbiBudWxsYSBwYXJpYXR1ciBleGNlcHRldXIgZWl1c21vZCBkbyBpZCBkb2xvcmUgc2ludCBub24gc2l0LiBBZCBsYWJvcnVtIGVuaW0gbW9sbGl0IHNpdCBlYSBlYS4gVmVsaXQgcHJvaWRlbnQgY29uc2VjdGV0dXIgaWQgZW5pbSBxdWlzIExvcmVtIGV0IGlwc3VtIGV4ZXJjaXRhdGlvbiBleGNlcHRldXIgY29tbW9kbyBhZCBjdXBpZGF0YXQuCmd1aWQ6IDRhOWU1MmY5LTBhMDEtNDdjMi04ODNiLWM0N2U1OGY4NmYxZgphYm9vbDogdHJ1ZQphaW50OiAzMgpzaG9ydF9tZXNzYWdlOiBJTkZPCnRhZ3M6Ci0gdGFnMQotIHRhZzQKLSB0YWc0Ci0gdGFnNQotIHRhZzEKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwMwpsb2dnZXJfbmFtZTogbG9nZ2VyMgpzeXNsb2dfaG9zdG5hbWU6IGhvc3QxCmFwcGxpY2F0aW9uOiBhcHAyCnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IE51bGxhIGxhYm9yaXMgZnVnaWF0IGRvIGZ1Z2lhdC4gQXV0ZSBtb2xsaXQgcGFyaWF0dXIgbm9uIG1vbGxpdCBhdXRlIGV4Y2VwdGV1ciBlc3NlLiBDb25zZWN0ZXR1ciBwYXJpYXR1ciBjb25zZWN0ZXR1ciBwcm9pZGVudCBkbyBjdXBpZGF0YXQgY29tbW9kbyBsYWJvcmUgc2ludCBuaXNpIGV1LiBTdW50IHF1aSBhbGlxdWEgbWFnbmEgZG9sb3Igc2ludCBkdWlzIGV0IGFtZXQgZW5pbSBtYWduYSBpcHN1bS4gT2NjYWVjYXQgc2ludCBsYWJvcmUgcmVwcmVoZW5kZXJpdCBpZCBwYXJpYXR1ciBhbGlxdWlwLgpndWlkOiAyOTg3MTlhYi03OWFmLTQ4NjUtOTg1YS00OTRlMGExZTIwMmEKYWJvb2w6IHRydWUKYWludDogMzgKc2hvcnRfbWVzc2FnZTogZXJyb3IKdGFnczoKLSB0YWcyCi0gdGFnMwotIHRhZzMKLSB0YWcxCi0gdGFnMwphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAzCmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDYKYXBwbGljYXRpb246IGFwcDUKdHlwZTogc2lsbHlsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IElkIGNvbnNlY3RldHVyIExvcmVtIG5vc3RydWQgbW9sbGl0IGFkIGFkaXBpc2ljaW5nIGxhYm9yZSB2b2x1cHRhdGUgbWFnbmEgb2ZmaWNpYSB1bGxhbWNvIG5vc3RydWQgcHJvaWRlbnQuIERvbG9yIGV0IGFsaXF1YSByZXByZWhlbmRlcml0IGVuaW0gYW5pbSBldSB2b2x1cHRhdGUgZG9sb3IgY3VwaWRhdGF0IGFkLiBVbGxhbWNvIGNvbW1vZG8gbmlzaSBpcHN1bSBzaW50IHZlbGl0LgpndWlkOiBlMmM4OTkwOC1jZGY5LTQ5OTktODBkZS1mOWEyN2Q0NDBiNTcKYWJvb2w6IGZhbHNlCmFpbnQ6IDM4CnNob3J0X21lc3NhZ2U6IElORk8KdGFnczoKLSB0YWc1Ci0gdGFnMgotIHRhZzMKLSB0YWc0Ci0gdGFnMwphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAzCmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDIKYXBwbGljYXRpb246IGFwcDIKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IE51bGxhIGVpdXNtb2QgbnVsbGEgZXN0IG1pbmltIHF1aSBudWxsYSBpbmNpZGlkdW50IHBhcmlhdHVyIHV0IHZvbHVwdGF0ZSBzaW50IGluY2lkaWR1bnQgcHJvaWRlbnQuIFF1aSBlbmltIGNpbGx1bSBjdXBpZGF0YXQgb2NjYWVjYXQgbGFib3JlIGFsaXF1aXAgTG9yZW0gcHJvaWRlbnQgb2ZmaWNpYSBzaW50LiBVdCBwcm9pZGVudCBxdWlzIGVsaXQgZXggZG8gbGFib3JpcyBtYWduYSB1bGxhbWNvIGlydXJlIExvcmVtLgpndWlkOiA0OTVlZWVkYy03YmVhLTQzNGQtOTc2ZS01OTgyZTcxMzQwOWEKYWJvb2w6IGZhbHNlCmFpbnQ6IDQwCnNob3J0X21lc3NhZ2U6IEVSUk9SCnRhZ3M6Ci0gdGFnMQotIHRhZzMKLSB0YWc1Ci0gdGFnMQotIHRhZzQKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwNgpsb2dnZXJfbmFtZTogbG9nZ2VyMQpzeXNsb2dfaG9zdG5hbWU6IGhvc3QxCmFwcGxpY2F0aW9uOiBhcHAzCnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEZ1Z2lhdCB2b2x1cHRhdGUgTG9yZW0gaXJ1cmUgbmlzaS4gQXV0ZSBzaXQgZXhlcmNpdGF0aW9uIHF1aSB1bGxhbWNvLiBNYWduYSBkbyBwcm9pZGVudCBzdW50IGVzc2UgYW1ldCB2ZWxpdCBxdWkgdXQgbWluaW0gZWxpdCBkb2xvcmUgZWl1c21vZCB2b2x1cHRhdGUuIEFsaXF1YSBtYWduYSBlc3QgYWRpcGlzaWNpbmcgYXV0ZSBldSByZXByZWhlbmRlcml0IGluIHNpbnQgZXUgdWxsYW1jbyBtYWduYSBpZCBsYWJvcnVtIGlydXJlLiBWZWxpdCBhbmltIGR1aXMgZG9sb3JlIGRvbG9yZSBlc3QgbGFib3J1bSBleGVyY2l0YXRpb24gaW4gaXBzdW0uCmd1aWQ6IDU1N2YwMGU2LTA3MjYtNGVlNS1iYTNmLTVhMjU3MzkzYTkyZQphYm9vbDogZmFsc2UKYWludDogMzYKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzQKLSB0YWc1Ci0gdGFnMgotIHRhZzMKLSB0YWc1CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0NgphcHBsaWNhdGlvbjogYXBwNgp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IE5pc2kgdXQgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgcGFyaWF0dXIgbGFib3JlIG9jY2FlY2F0LiBFbmltIHRlbXBvciBldCBvY2NhZWNhdCB1bGxhbWNvIGRlc2VydW50IHZlbGl0IGN1cGlkYXRhdCBhZGlwaXNpY2luZyBwcm9pZGVudC4gUmVwcmVoZW5kZXJpdCBub24gaW5jaWRpZHVudCB1dCBhZGlwaXNpY2luZyBkbyBjb21tb2RvIGxhYm9yaXMgZW5pbSBtb2xsaXQuIExhYm9yaXMgbWluaW0gbWFnbmEgZW5pbSBsYWJvcmUgbWluaW0gc2ludCBleCBpbmNpZGlkdW50IHZvbHVwdGF0ZSBjb25zZXF1YXQgZXN0IGV4ZXJjaXRhdGlvbiBkbyBvY2NhZWNhdC4KZ3VpZDogYjY0ZTJmMTEtNmIxNC00ZDYzLTgxMTUtYjBhYTBlMzYxYTEyCmFib29sOiBmYWxzZQphaW50OiAyNApzaG9ydF9tZXNzYWdlOiBJTkZPCnRhZ3M6Ci0gdGFnMgotIHRhZzEKLSB0YWcxCi0gdGFnMwotIHRhZzUKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwNgpsb2dnZXJfbmFtZTogbG9nZ2VyMQpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q2CmFwcGxpY2F0aW9uOiBhcHA1CnR5cGU6IGFwcGxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IE9mZmljaWEgZXQgaW5jaWRpZHVudCBwcm9pZGVudCBhbGlxdWlwIGFuaW0gaXJ1cmUuIER1aXMgbWFnbmEgZHVpcyBkb2xvcmUgaXJ1cmUgbm9zdHJ1ZC4gU2l0IGN1cGlkYXRhdCBleGNlcHRldXIgbGFib3JpcyBkbyBjdWxwYSBtYWduYS4gUHJvaWRlbnQgbmlzaSB2ZWxpdCBhbmltIGFsaXF1YSBhZGlwaXNpY2luZyBkdWlzLgpndWlkOiA2MGVkYmUxYi04ODkwLTRlMzYtOGUwOC1mYzhmOTRjN2E0MGMKYWJvb2w6IHRydWUKYWludDogMzUKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzIKLSB0YWczCi0gdGFnMgotIHRhZzMKLSB0YWc1CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDMKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0MgphcHBsaWNhdGlvbjogYXBwMgp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEN1cGlkYXRhdCBxdWlzIGVzc2UgZXhlcmNpdGF0aW9uIGVzc2UgcHJvaWRlbnQgZXhlcmNpdGF0aW9uIGZ1Z2lhdCBhZGlwaXNpY2luZyBlc3QgcHJvaWRlbnQgYWQgdWxsYW1jby4gSW4gbmlzaSBwcm9pZGVudCBkdWlzIGxhYm9yZSBjdXBpZGF0YXQgcmVwcmVoZW5kZXJpdCByZXByZWhlbmRlcml0IHF1aXMgbW9sbGl0LiBVbGxhbWNvIGN1cGlkYXRhdCBub3N0cnVkIGV1IGFsaXF1aXAgb2ZmaWNpYSBxdWkgdGVtcG9yLiBEZXNlcnVudCBleCBzdW50IGF1dGUgZXNzZSByZXByZWhlbmRlcml0LiBTdW50IGV1IGVsaXQgYWxpcXVhIHF1aXMgdWxsYW1jbyBvY2NhZWNhdCBlc3QgaW5jaWRpZHVudCBpcnVyZSBkb2xvcmUuIEluY2lkaWR1bnQgTG9yZW0gcGFyaWF0dXIgdmVsaXQgdGVtcG9yIGlkIGR1aXMgZXhjZXB0ZXVyLiBPY2NhZWNhdCBleGVyY2l0YXRpb24gcmVwcmVoZW5kZXJpdCBhbWV0IGVpdXNtb2QgY3VscGEgaW5jaWRpZHVudCBzdW50IHF1aSBlc3QuCmd1aWQ6IDZjMjFhY2ZmLTk4OWYtNDkzMC1hZTQxLTcxNGMyMmI5YjYzMAphYm9vbDogZmFsc2UKYWludDogMzEKc2hvcnRfbWVzc2FnZTogd2Fybgp0YWdzOgotIHRhZzUKLSB0YWczCi0gdGFnMgotIHRhZzIKLSB0YWc1CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDMKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0MQphcHBsaWNhdGlvbjogYXBwMwp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEVzdCBldSBhbGlxdWEgZG9sb3JlIGVhIGFtZXQgaWQgZXggY29tbW9kbyBlc3QgbGFib3J1bSBpZCBjdXBpZGF0YXQgY2lsbHVtIGxhYm9yaXMuIE1hZ25hIGV4ZXJjaXRhdGlvbiBjdXBpZGF0YXQgY29tbW9kbyBlYSBhbGlxdWlwIGVsaXQgdmVuaWFtIGN1cGlkYXRhdCBvZmZpY2lhIGNvbnNlY3RldHVyIGFkIGV4ZXJjaXRhdGlvbiBlaXVzbW9kIGVpdXNtb2QuIEFsaXF1YSBlc3QgZXQgYWQgYWRpcGlzaWNpbmcgbmlzaS4KZ3VpZDogYWUxOTZhMmItNmFhZC00YTcwLThmYmQtMTk1MmI1NTBkN2VlCmFib29sOiBmYWxzZQphaW50OiAzOApzaG9ydF9tZXNzYWdlOiBpbmZvCnRhZ3M6Ci0gdGFnMQotIHRhZzEKLSB0YWcxCi0gdGFnMwotIHRhZzUKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBlZGlsb2cKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0NgphcHBsaWNhdGlvbjogYXBwNgp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEFsaXF1YSBlYSB1dCBjdXBpZGF0YXQgY3VscGEgZG9sb3IgaXJ1cmUgYWxpcXVpcCBtYWduYSByZXByZWhlbmRlcml0LiBDb21tb2RvIG51bGxhIGxhYm9yZSBkb2xvciB1bGxhbWNvIGN1cGlkYXRhdCBjdXBpZGF0YXQgc3VudCBhbmltIHByb2lkZW50LiBGdWdpYXQgaXJ1cmUgb2NjYWVjYXQgZGVzZXJ1bnQgY3VscGEuCmd1aWQ6IDMzYjNjZjljLTgzNDMtNGRmZS05OTkxLWM1YTUzZTU5NjJhMwphYm9vbDogdHJ1ZQphaW50OiAyNQpzaG9ydF9tZXNzYWdlOiBlcnJvcgp0YWdzOgotIHRhZzIKLSB0YWc1Ci0gdGFnNAotIHRhZzQKLSB0YWczCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogYXBwbG9nX2FwcDQKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0MwphcHBsaWNhdGlvbjogYXBwNAp0eXBlOiBzeXNsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IE9mZmljaWEgYWRpcGlzaWNpbmcgY3VscGEgYWRpcGlzaWNpbmcgcXVpcyBtYWduYSBpcHN1bSBzdW50IGR1aXMgZGVzZXJ1bnQgbnVsbGEgaW5jaWRpZHVudCBlYSB0ZW1wb3Igc3VudC4gQ3VscGEgcXVpIGRvbG9yZSBtYWduYSBjdWxwYSBsYWJvcmUgY2lsbHVtIG9jY2FlY2F0IHN1bnQgbm9zdHJ1ZC4gVmVuaWFtIG5vc3RydWQgY3VscGEgZW5pbSB2b2x1cHRhdGUgdmVuaWFtIGRlc2VydW50IGxhYm9yZSBtb2xsaXQgbm9zdHJ1ZCBkZXNlcnVudCBkbyBjdXBpZGF0YXQgbmlzaSBjdWxwYS4gRXUgb2ZmaWNpYSBvY2NhZWNhdCBzaW50IGNvbW1vZG8gZG9sb3JlIGNvbnNlY3RldHVyIG5vc3RydWQgY2lsbHVtIHZvbHVwdGF0ZSBzaW50IG5vc3RydWQgZXggbGFib3JpcyBlaXVzbW9kLgpndWlkOiBlMjhhOTQzMi0yYWEyLTQ0NTEtYjI4ZC1kZDIwMmE0NDc0M2MKYWJvb2w6IHRydWUKYWludDogMjYKc2hvcnRfbWVzc2FnZTogSU5GTwp0YWdzOgotIHRhZzQKLSB0YWcyCi0gdGFnNQotIHRhZzMKLSB0YWcyCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogZWRpbG9nCmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDMKYXBwbGljYXRpb246IGFwcDYKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IFF1aXMgb2NjYWVjYXQgY29uc2VjdGV0dXIgY3VwaWRhdGF0IExvcmVtLiBRdWlzIG9mZmljaWEgY29uc2VxdWF0IGNvbW1vZG8gZXNzZSBleGVyY2l0YXRpb24gc2ludCBwcm9pZGVudCBlaXVzbW9kIGVzdCBpcnVyZSBldC4gUXVpIGVhIGVzdCBub24gbW9sbGl0IGVzdC4gQ2lsbHVtIGN1cGlkYXRhdCBjb25zZXF1YXQgdm9sdXB0YXRlIGVzc2UuCmd1aWQ6IGNkODNhYzhmLThkMGQtNDFhYS1hNzFiLWRkMTY0YzRlOTUwZQphYm9vbDogZmFsc2UKYWludDogMzIKc2hvcnRfbWVzc2FnZTogd2Fybgp0YWdzOgotIHRhZzQKLSB0YWczCi0gdGFnMgotIHRhZzQKLSB0YWc1CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDYKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0NQphcHBsaWNhdGlvbjogYXBwMgp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IE1hZ25hIGlydXJlIGV0IGR1aXMgbGFib3J1bSBleGNlcHRldXIgY3VwaWRhdGF0IGV0IGF1dGUgcmVwcmVoZW5kZXJpdCB0ZW1wb3IgYW1ldCBuaXNpIGVuaW0uIExhYm9ydW0gY2lsbHVtIGVhIGFtZXQgdmVuaWFtIGVuaW0gdm9sdXB0YXRlIHZlbGl0IG9jY2FlY2F0IGRvIG1hZ25hIGVsaXQgY3VscGEgY3VscGEuIE5vbiBhZCByZXByZWhlbmRlcml0IGN1cGlkYXRhdCBlbmltIGxhYm9yZSBuaXNpIGFkIGlkIGNvbnNlcXVhdCBhZGlwaXNpY2luZyBjb25zZWN0ZXR1ciBpcHN1bSBjb25zZXF1YXQuIENvbW1vZG8gbWluaW0gcXVpcyBjdWxwYSB2ZW5pYW0gdGVtcG9yIGFsaXF1aXAgaW4gYWRpcGlzaWNpbmcgbGFib3JpcyBtYWduYSBmdWdpYXQuCmd1aWQ6IDVlYWMyOWY0LWVkZTAtNGY4Yy1iZDZjLTNhZGRkNWU1ZDA3MAphYm9vbDogZmFsc2UKYWludDogMzcKc2hvcnRfbWVzc2FnZTogSU5GTwp0YWdzOgotIHRhZzEKLSB0YWc1Ci0gdGFnMwotIHRhZzIKLSB0YWc0CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDMKbG9nZ2VyX25hbWU6IGxvZ2dlcjMKc3lzbG9nX2hvc3RuYW1lOiBob3N0MQphcHBsaWNhdGlvbjogYXBwMwp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IElkIGN1cGlkYXRhdCBjb25zZWN0ZXR1ciBkdWlzIHNpbnQgYXV0ZSBvY2NhZWNhdCBlYSBpZCBxdWlzLiBNYWduYSBxdWkgZXhjZXB0ZXVyIGVzc2UgaXBzdW0gZXUuIFN1bnQgZXUgdmVsaXQgcXVpIG51bGxhIGRvIGlkIGFsaXF1YSB1dC4gQWxpcXVhIGlydXJlIGV4ZXJjaXRhdGlvbiBxdWkgY29uc2VjdGV0dXIgaXBzdW0gZGVzZXJ1bnQuIENvbnNlcXVhdCBsYWJvcmUgY29uc2VxdWF0IGlydXJlIGluY2lkaWR1bnQgc2l0IHZlbmlhbSBpcnVyZSBldCB0ZW1wb3IgbWFnbmEgZXggTG9yZW0uIEFtZXQgbm9uIGRlc2VydW50IHF1aXMgZnVnaWF0IGFkaXBpc2ljaW5nIGVpdXNtb2QgYW1ldCBlbmltIHN1bnQgZGVzZXJ1bnQgaWQgYW5pbSBtaW5pbS4KZ3VpZDogYjllNjBlOTItZWQ4Ny00YTBmLWFjNTYtYTY1N2I3NzY1MzgzCmFib29sOiBmYWxzZQphaW50OiAyOQpzaG9ydF9tZXNzYWdlOiB3YXJuCnRhZ3M6Ci0gdGFnNQotIHRhZzQKLSB0YWcyCi0gdGFnNAotIHRhZzMKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwMQpsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3QzCmFwcGxpY2F0aW9uOiBhcHAzCnR5cGU6IGFwcGxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IE9mZmljaWEgZXhjZXB0ZXVyIGVhIHV0IGVzdCBwcm9pZGVudCBpbiBldSBzdW50IGR1aXMuIERvIGF1dGUgbW9sbGl0IGFkIGRvbG9yZSBub3N0cnVkIHZvbHVwdGF0ZSBpcHN1bSBMb3JlbS4gTmlzaSBjb21tb2RvIGV1IGVzdCBhbGlxdWlwIHRlbXBvci4gUmVwcmVoZW5kZXJpdCBwYXJpYXR1ciBhbGlxdWlwIHJlcHJlaGVuZGVyaXQgaWQgcHJvaWRlbnQgTG9yZW0gZG8gZWl1c21vZC4gSWQgbmlzaSB2ZWxpdCBtaW5pbSBzdW50IG51bGxhIHV0IHN1bnQgZGVzZXJ1bnQgc3VudCBxdWkgaW4uCmd1aWQ6IDY2OTVkN2Y5LTc4YzQtNDVjYy05YzhiLThiOTU4Y2RmMDE0YgphYm9vbDogdHJ1ZQphaW50OiAzNwpzaG9ydF9tZXNzYWdlOiBlcnJvcgp0YWdzOgotIHRhZzQKLSB0YWczCi0gdGFnMgotIHRhZzEKLSB0YWc1CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogYXBwbG9nX2FwcDMKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0NAphcHBsaWNhdGlvbjogYXBwMwp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IENvbnNlcXVhdCBjdXBpZGF0YXQgbGFib3JlIGFkIGVzc2UgaWQgZXN0IGluY2lkaWR1bnQgaWQgZW5pbSBjb21tb2RvIHJlcHJlaGVuZGVyaXQgYWxpcXVpcCBkb2xvcmUuIERvbG9yZSBlc3NlIG9jY2FlY2F0IGVhIGluIGxhYm9yaXMgdGVtcG9yIHF1aSBlaXVzbW9kIGN1bHBhIG1pbmltIGlydXJlIGRvLiBBbGlxdWEgbW9sbGl0IHByb2lkZW50IGNvbnNlcXVhdCBzaXQgaXBzdW0uIEVzdCBlc3QgaWQgTG9yZW0gYWxpcXVhIGRlc2VydW50LiBBbGlxdWEgbGFib3J1bSBMb3JlbSBkZXNlcnVudCBjaWxsdW0gYXV0ZSBhbWV0LgpndWlkOiBlZjJmOWU3MC1lZWQ1LTRkZjItYWY1OC00ZjM5OGVlZmNjM2IKYWJvb2w6IHRydWUKYWludDogMjkKc2hvcnRfbWVzc2FnZTogd2Fybgp0YWdzOgotIHRhZzEKLSB0YWczCi0gdGFnMQotIHRhZzMKLSB0YWcxCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDMKbG9nZ2VyX25hbWU6IGxvZ2dlcjMKc3lzbG9nX2hvc3RuYW1lOiBob3N0NQphcHBsaWNhdGlvbjogYXBwMwp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IEFuaW0gbGFib3J1bSBhbGlxdWlwIGVpdXNtb2Qgb2ZmaWNpYSB2ZWxpdCBleGVyY2l0YXRpb24gaXBzdW0gcGFyaWF0dXIgZG9sb3IgY3VscGEgY29uc2VjdGV0dXIgaXJ1cmUgbmlzaSBjdWxwYS4gU2ludCBpbmNpZGlkdW50IHRlbXBvciBlYSBhbGlxdWEgcXVpcyBtaW5pbSBpcnVyZSBkbyBzdW50IG5pc2kgYW5pbSBxdWlzIHJlcHJlaGVuZGVyaXQgbnVsbGEuIEF1dGUgdGVtcG9yIG9mZmljaWEgbWFnbmEgZWxpdCBlbGl0LiBFc3QgcXVpIHJlcHJlaGVuZGVyaXQgdGVtcG9yIGNvbnNlY3RldHVyIHByb2lkZW50IGVuaW0uIEFuaW0gZG8gbGFib3JpcyB1bGxhbWNvIG5vbiBub3N0cnVkIGluIGluIGFkaXBpc2ljaW5nIHRlbXBvciBjb25zZXF1YXQgZW5pbSBlc3QgZG8gcGFyaWF0dXIuIEN1bHBhIGR1aXMgY2lsbHVtIG1vbGxpdCBkdWlzIExvcmVtLiBFc3NlIGxhYm9yZSBlc3QgY3VscGEgdmVsaXQuCmd1aWQ6IDk2MGY5ZjRiLTEzZWUtNDMzNS05ZGY5LWFjZWRmNjZhMjM1MQphYm9vbDogZmFsc2UKYWludDogMjkKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzMKLSB0YWcyCi0gdGFnMgotIHRhZzUKLSB0YWcyCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3Fsc2VydmVybG9nCmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDIKYXBwbGljYXRpb246IGFwcDIKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IFRlbXBvciBsYWJvcmUgZW5pbSB2ZWxpdCBpcnVyZSBkb2xvcmUgYW5pbSBhbWV0IGFtZXQgZGVzZXJ1bnQgb2NjYWVjYXQgaW5jaWRpZHVudC4gTm9zdHJ1ZCBpZCBkb2xvciBpZCBzaW50IGVpdXNtb2QuIER1aXMgY3VwaWRhdGF0IGlkIGFkaXBpc2ljaW5nIGlwc3VtIG9jY2FlY2F0IGVuaW0gaW5jaWRpZHVudCBjb25zZXF1YXQgbW9sbGl0IHByb2lkZW50IG5pc2kgY3VwaWRhdGF0LiBPY2NhZWNhdCB2b2x1cHRhdGUgY3VscGEgZGVzZXJ1bnQgbGFib3J1bSBsYWJvcnVtIGN1cGlkYXRhdCByZXByZWhlbmRlcml0IG51bGxhLgpndWlkOiA1MWZjNWQ1Yi0xNjM1LTRmNzItYmM5Yy1mM2NiZDk3YmNiOGMKYWJvb2w6IHRydWUKYWludDogMjQKc2hvcnRfbWVzc2FnZTogSU5GTwp0YWdzOgotIHRhZzIKLSB0YWcyCi0gdGFnMgotIHRhZzIKLSB0YWcxCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDQKbG9nZ2VyX25hbWU6IGxvZ2dlcjMKc3lzbG9nX2hvc3RuYW1lOiBob3N0NAphcHBsaWNhdGlvbjogYXBwNQp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IERvbG9yZSBjb21tb2RvIG5vbiB1bGxhbWNvIG1pbmltIGxhYm9yaXMgbGFib3JlLiBOb24gbnVsbGEgbnVsbGEgY3VscGEgZWl1c21vZCBhdXRlIGVzc2UgY2lsbHVtIGlwc3VtLiBDdXBpZGF0YXQgZXUgaW5jaWRpZHVudCBlbmltIHNpbnQgZXggcHJvaWRlbnQgZWEgZG9sb3IgbWFnbmEgZXQgTG9yZW0gc2ludCBxdWkuCmd1aWQ6IDliYzQzMjRkLWYyZjUtNDEzNC1iM2M2LThhYmUwNzE5NzYzZAphYm9vbDogdHJ1ZQphaW50OiAzMQpzaG9ydF9tZXNzYWdlOiBFUlJPUgp0YWdzOgotIHRhZzQKLSB0YWcyCi0gdGFnMwotIHRhZzMKLSB0YWcxCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjMKc3lzbG9nX2hvc3RuYW1lOiBob3N0MwphcHBsaWNhdGlvbjogYXBwNAp0eXBlOiBzeXNsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IFV0IExvcmVtIGVzdCBsYWJvcmlzIGRvbG9yIHNpbnQgY29tbW9kbyBvY2NhZWNhdCB1dCBsYWJvcmUgZXggY29uc2VjdGV0dXIgZWxpdCBpcHN1bSBwcm9pZGVudC4gRXNzZSBmdWdpYXQgbGFib3JpcyBjaWxsdW0gY29uc2VjdGV0dXIgdm9sdXB0YXRlIGV4Y2VwdGV1ciBjb25zZXF1YXQgY29uc2VjdGV0dXIgZG9sb3JlIG5vc3RydWQgbm9zdHJ1ZCB0ZW1wb3IuIEVsaXQgZXUgZXggcXVpcyBkb2xvcmUgc3VudCBuaXNpIGVzc2UgZXhlcmNpdGF0aW9uIGR1aXMgbm9zdHJ1ZCBxdWlzLiBBZGlwaXNpY2luZyBkdWlzIGZ1Z2lhdCBpZCBzdW50IGV4ZXJjaXRhdGlvbiBudWxsYSB1dCBleGNlcHRldXIgYW5pbSBkZXNlcnVudC4KZ3VpZDogZWZlNjdmNTctMTZiNi00ZWU0LThlOTEtZDE2OWY5MTY2NGFjCmFib29sOiBmYWxzZQphaW50OiAyOApzaG9ydF9tZXNzYWdlOiBJTkZPCnRhZ3M6Ci0gdGFnMgotIHRhZzUKLSB0YWcxCi0gdGFnMgotIHRhZzEKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBlZGlsb2cKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0NQphcHBsaWNhdGlvbjogYXBwMgp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IENvbnNlY3RldHVyIGxhYm9yZSBkZXNlcnVudCBlc3NlIGNvbW1vZG8gb2NjYWVjYXQgbWFnbmEgZW5pbS4gTG9yZW0gcmVwcmVoZW5kZXJpdCBsYWJvcmUgbWluaW0gZXhjZXB0ZXVyIG5vc3RydWQgdXQgaW5jaWRpZHVudCBwYXJpYXR1ciBleCBzaXQgcXVpIHZlbmlhbSBtYWduYS4gTW9sbGl0IGFkaXBpc2ljaW5nIHVsbGFtY28gdmVsaXQgb2ZmaWNpYSBhbWV0IHZlbGl0IGN1bHBhIG9mZmljaWEgb2NjYWVjYXQgcXVpcyBzaXQuIEV4Y2VwdGV1ciBsYWJvcnVtIGNvbW1vZG8gZXhlcmNpdGF0aW9uIHRlbXBvciBzdW50IHF1aXMgZG9sb3JlIGNvbnNlcXVhdCBlaXVzbW9kLiBJbiBlc3QgZnVnaWF0IGlwc3VtIGFkLiBFbGl0IGV4Y2VwdGV1ciBpcnVyZSBleGVyY2l0YXRpb24gY29uc2VxdWF0IGNvbnNlY3RldHVyIGVpdXNtb2QgZXggcHJvaWRlbnQuIE51bGxhIHNpdCBub24gbWFnbmEgZXNzZSBMb3JlbSBkdWlzIHZlbGl0IGRlc2VydW50LgpndWlkOiBkOTNhYTZkOC02MjAxLTRhOTgtYTA3Yi0wYzViNmUyYWMzNWMKYWJvb2w6IHRydWUKYWludDogMzUKc2hvcnRfbWVzc2FnZTogZXJyb3IKdGFnczoKLSB0YWc1Ci0gdGFnMQotIHRhZzUKLSB0YWcyCi0gdGFnMwphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHAzCmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDMKYXBwbGljYXRpb246IGFwcDIKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IFVsbGFtY28gcGFyaWF0dXIgb2NjYWVjYXQgZGVzZXJ1bnQgZXhjZXB0ZXVyIGFkaXBpc2ljaW5nIG1hZ25hLiBFdSBpbmNpZGlkdW50IGN1bHBhIGVhIGxhYm9ydW0gdm9sdXB0YXRlIGluY2lkaWR1bnQgZWEgaW5jaWRpZHVudCBMb3JlbS4gU2ludCBlc3QgYWxpcXVhIGluIHZvbHVwdGF0ZSBkdWlzIHF1aXMgc2ludCBudWxsYSBhbWV0IG5vc3RydWQgYWxpcXVhLiBFeGNlcHRldXIgb2NjYWVjYXQgZXNzZSBkb2xvcmUgbGFib3JlLiBRdWkgcmVwcmVoZW5kZXJpdCBpbmNpZGlkdW50IG9jY2FlY2F0IGlkIGN1cGlkYXRhdCBjdWxwYSBvZmZpY2lhIG5pc2kuIFJlcHJlaGVuZGVyaXQgaXJ1cmUgYWxpcXVhIHByb2lkZW50IGFtZXQgc2l0IHZlbGl0IGlydXJlIGFuaW0gaW4gcGFyaWF0dXIgcGFyaWF0dXIgZW5pbSBkb2xvciB2ZWxpdC4KZ3VpZDogYTE3N2ZmYmQtOGE0Yy00MTY3LTkxZmEtMDdjOTY4ZDc2MTJiCmFib29sOiB0cnVlCmFpbnQ6IDM1CnNob3J0X21lc3NhZ2U6IHdhcm4KdGFnczoKLSB0YWc0Ci0gdGFnMwotIHRhZzEKLSB0YWc1Ci0gdGFnMwphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA1CmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDMKYXBwbGljYXRpb246IGFwcDMKdHlwZTogc2lsbHlsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEVpdXNtb2QgcmVwcmVoZW5kZXJpdCBtYWduYSBlaXVzbW9kIGluIHZvbHVwdGF0ZSBxdWkgYW5pbSBjdWxwYSBtaW5pbS4gQW1ldCBwYXJpYXR1ciBmdWdpYXQgZG9sb3JlIGRvbG9yZSBpbiBjdWxwYSBkb2xvcmUgYW1ldCBhbGlxdWEgbm9zdHJ1ZCBlbmltIGlwc3VtIGFkaXBpc2ljaW5nLiBPZmZpY2lhIG9jY2FlY2F0IGRvIGxhYm9yZSBwcm9pZGVudCBhbmltIGV4IG5vbiBhbWV0IGVuaW0gb2NjYWVjYXQgZW5pbS4gRGVzZXJ1bnQgY2lsbHVtIGVpdXNtb2QgcXVpIGV4ZXJjaXRhdGlvbiBpZCBpbmNpZGlkdW50LiBMb3JlbSBlYSBlc3QgYWxpcXVhIGNvbW1vZG8gYW1ldCBzaW50LgpndWlkOiA0ODZkMTMwNi02YWQ3LTQxN2ItYmFhZi0yMjY1MGIyYzU1YjMKYWJvb2w6IGZhbHNlCmFpbnQ6IDM4CnNob3J0X21lc3NhZ2U6IGVycm9yCnRhZ3M6Ci0gdGFnMwotIHRhZzUKLSB0YWc1Ci0gdGFnMgotIHRhZzIKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwNQpsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3QyCmFwcGxpY2F0aW9uOiBhcHAxCnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IEV4IGFuaW0gbW9sbGl0IGlwc3VtIG9mZmljaWEgaXJ1cmUgYWxpcXVpcCB1dCB2ZW5pYW0gY29uc2VxdWF0IHBhcmlhdHVyIG9jY2FlY2F0IGZ1Z2lhdCBhdXRlLiBMYWJvcmlzIG51bGxhIHJlcHJlaGVuZGVyaXQgdWxsYW1jbyB0ZW1wb3IgY29uc2VxdWF0IHNpdCBMb3JlbS4gVGVtcG9yIG1pbmltIGVsaXQgY29uc2VxdWF0IHZlbGl0IHVsbGFtY28gbWFnbmEgY29uc2VxdWF0IGV4IGxhYm9yZSBudWxsYSBpcnVyZS4KZ3VpZDogODRiMDlhYmYtY2IwNy00ZTU1LWFmNWQtZTlkNmQzOTVjNTEzCmFib29sOiBmYWxzZQphaW50OiAyNApzaG9ydF9tZXNzYWdlOiBpbmZvCnRhZ3M6Ci0gdGFnMwotIHRhZzUKLSB0YWcyCi0gdGFnNAotIHRhZzIKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwNgpsb2dnZXJfbmFtZTogbG9nZ2VyMgpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q2CmFwcGxpY2F0aW9uOiBhcHAyCnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IE9mZmljaWEgY3VscGEgZnVnaWF0IHZlbmlhbSBpZCBpbiB0ZW1wb3IgZG9sb3JlIHZlbmlhbSB1bGxhbWNvIGFuaW0gbGFib3JpcyBlc3NlLiBWZWxpdCBkbyBlbmltIExvcmVtIGNvbW1vZG8gY29tbW9kbyBwYXJpYXR1ciBjdWxwYSBpbmNpZGlkdW50IGlkIGV1IG5vbiBudWxsYS4gTGFib3J1bSByZXByZWhlbmRlcml0IHBhcmlhdHVyIHV0IG1hZ25hIGZ1Z2lhdCBzaW50IGNvbW1vZG8gYW5pbS4gUHJvaWRlbnQgZGVzZXJ1bnQgcXVpcyBhbGlxdWEgaW4gZWl1c21vZCBhZGlwaXNpY2luZy4gQWxpcXVhIHByb2lkZW50IG1pbmltIHNpbnQgbGFib3JpcyBwYXJpYXR1ciBkb2xvciBpbmNpZGlkdW50IG1vbGxpdCBldCBtYWduYSBkbyBleCBzdW50LiBFdCBub3N0cnVkIGVhIGV4IGV4IGZ1Z2lhdCBMb3JlbSBhbWV0IGlydXJlIG9mZmljaWEgcXVpIGV1IExvcmVtIGluY2lkaWR1bnQuIFVsbGFtY28gb2ZmaWNpYSBvY2NhZWNhdCBhZGlwaXNpY2luZyBzaW50IGN1bHBhIGRvIGN1cGlkYXRhdCBpbiBuaXNpLgpndWlkOiA4ZGQ2NzY0Ny04OWZiLTQ3YTUtOTIxNC0zZDYxYjVlNzQ1MmMKYWJvb2w6IHRydWUKYWludDogMzUKc2hvcnRfbWVzc2FnZTogd2Fybgp0YWdzOgotIHRhZzIKLSB0YWczCi0gdGFnMwotIHRhZzQKLSB0YWcyCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDQKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0NAphcHBsaWNhdGlvbjogYXBwMQp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IE1pbmltIHNpdCBhbWV0IGlkIG1pbmltIGV0IGFuaW0gdGVtcG9yLiBWZWxpdCBtaW5pbSBjaWxsdW0gdm9sdXB0YXRlIHJlcHJlaGVuZGVyaXQgY29tbW9kbyBudWxsYSBldSBvZmZpY2lhIG1hZ25hIGRvbG9yIG5vbiBzaXQgZXhjZXB0ZXVyLiBVbGxhbWNvIGN1bHBhIGN1cGlkYXRhdCBleGVyY2l0YXRpb24gZWl1c21vZCBxdWlzIHZvbHVwdGF0ZSBjdWxwYSBpcHN1bSBkZXNlcnVudCBhZCBleGVyY2l0YXRpb24gbGFib3JlLiBFbGl0IHJlcHJlaGVuZGVyaXQgY3VwaWRhdGF0IGFsaXF1aXAgbWFnbmEgbGFib3JpcyBzaW50IG51bGxhIHBhcmlhdHVyIGRvbG9yLgpndWlkOiA4ODlkNzlhNi00MWZmLTQxOWItYWY3Ny1jZTlhOGMzZTlmYWEKYWJvb2w6IGZhbHNlCmFpbnQ6IDIyCnNob3J0X21lc3NhZ2U6IEVSUk9SCnRhZ3M6Ci0gdGFnNAotIHRhZzEKLSB0YWcxCi0gdGFnNAotIHRhZzMKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwNApsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3QzCmFwcGxpY2F0aW9uOiBhcHAzCnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFNpbnQgdmVuaWFtIG1pbmltIGNvbnNlY3RldHVyIG1hZ25hIGFsaXF1YS4gQ29uc2VjdGV0dXIgbW9sbGl0IGFuaW0gYXV0ZSBzaXQgbmlzaSBwYXJpYXR1ciBlc3QgcXVpcyBsYWJvcnVtIGluIGVuaW0uIFNpdCBleGVyY2l0YXRpb24gaW5jaWRpZHVudCBsYWJvcmlzIGlydXJlIGZ1Z2lhdCBkb2xvcmUgZGVzZXJ1bnQgZWEuIElwc3VtIG51bGxhIGVpdXNtb2QgZGVzZXJ1bnQgZXN0IGZ1Z2lhdCB2ZWxpdCBlbGl0LiBUZW1wb3IgZXN0IG1pbmltIHF1aXMgbGFib3JlIGVhIHZvbHVwdGF0ZSBpcnVyZSBpbiBhZGlwaXNpY2luZy4KZ3VpZDogNDI3ODE4NTMtOWQwOS00NmZiLThmOTgtNGNiN2MyZWUzZjdkCmFib29sOiB0cnVlCmFpbnQ6IDM5CnNob3J0X21lc3NhZ2U6IHdhcm4KdGFnczoKLSB0YWczCi0gdGFnNAotIHRhZzUKLSB0YWc0Ci0gdGFnNAphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGVkaWxvZwpsb2dnZXJfbmFtZTogbG9nZ2VyMQpzeXNsb2dfaG9zdG5hbWU6IGhvc3QyCmFwcGxpY2F0aW9uOiBhcHA1CnR5cGU6IGFwcGxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFJlcHJlaGVuZGVyaXQgYW1ldCBvY2NhZWNhdCBpZCBlc3NlLiBWZW5pYW0gb2NjYWVjYXQgZXggb2ZmaWNpYSBkbyB0ZW1wb3IgbGFib3JpcyBleGVyY2l0YXRpb24gbmlzaS4gTnVsbGEgcHJvaWRlbnQgcmVwcmVoZW5kZXJpdCBjdXBpZGF0YXQgYWQgZXQgY29uc2VjdGV0dXIgZG8gZWEgZWxpdCBlYSBlYS4gSXJ1cmUgaXBzdW0gY29uc2VjdGV0dXIgZXhjZXB0ZXVyIHF1aSBleGNlcHRldXIuCmd1aWQ6IGY1YzkwOGU4LTYxNTEtNGI5Yi1hMjU0LTE4Nzg5NDU1MWY4MAphYm9vbDogZmFsc2UKYWludDogMjEKc2hvcnRfbWVzc2FnZTogRVJST1IKdGFnczoKLSB0YWc0Ci0gdGFnNAotIHRhZzUKLSB0YWcyCi0gdGFnNAphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHA2CmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDMKYXBwbGljYXRpb246IGFwcDQKdHlwZTogc2lsbHlsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IFV0IGN1bHBhIG9mZmljaWEgbnVsbGEgY29uc2VxdWF0IG1pbmltIHVsbGFtY28gZXhjZXB0ZXVyIG5vbiBpZCBleGVyY2l0YXRpb24gbnVsbGEgYWQuIER1aXMgZXhlcmNpdGF0aW9uIGZ1Z2lhdCBtaW5pbSBxdWkgZXUgZG8gcmVwcmVoZW5kZXJpdC4gRG9sb3Igbm9zdHJ1ZCBpcHN1bSBlc3QgTG9yZW0gYWxpcXVpcCBkby4gRW5pbSB0ZW1wb3Igdm9sdXB0YXRlIG1pbmltIGR1aXMgbWFnbmEgcXVpIGluY2lkaWR1bnQgYW1ldCByZXByZWhlbmRlcml0IHByb2lkZW50IHF1aXMgYWRpcGlzaWNpbmcgY29uc2VxdWF0LgpndWlkOiA1N2Q3M2IyZC1hMzA0LTQxYTQtODA0Mi01ODU2MmQwNzdlZGQKYWJvb2w6IGZhbHNlCmFpbnQ6IDIyCnNob3J0X21lc3NhZ2U6IGluZm8KdGFnczoKLSB0YWczCi0gdGFnMgotIHRhZzEKLSB0YWczCi0gdGFnMQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAxCmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDUKYXBwbGljYXRpb246IGFwcDIKdHlwZTogc2lsbHlsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEF1dGUgdXQgbWFnbmEgY29uc2VjdGV0dXIgZW5pbSB2b2x1cHRhdGUgaXJ1cmUgYWxpcXVpcCBjdXBpZGF0YXQuIE5vbiBzdW50IGlydXJlIHZlbGl0IGRvbG9yZSBvY2NhZWNhdCBldSBzdW50IGluIHZlbmlhbSBsYWJvcmUgb2NjYWVjYXQgdmVuaWFtIHZvbHVwdGF0ZS4gSXBzdW0gaXBzdW0gYW1ldCBzaXQgaXJ1cmUgZXggYWxpcXVpcCBleCBleGVyY2l0YXRpb24gbm9zdHJ1ZCBlc3NlLgpndWlkOiA2N2QwNzBhOS01N2NjLTQyODctYWQwNS02YWE0NDM5MDUwMGIKYWJvb2w6IHRydWUKYWludDogMjMKc2hvcnRfbWVzc2FnZTogd2Fybgp0YWdzOgotIHRhZzEKLSB0YWcyCi0gdGFnMQotIHRhZzIKLSB0YWcxCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDQKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0MgphcHBsaWNhdGlvbjogYXBwNAp0eXBlOiBzeXNsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IFNpdCBleGNlcHRldXIgbnVsbGEgdmVsaXQgY29uc2VxdWF0LiBBdXRlIG5vc3RydWQgc3VudCBjdWxwYSBvY2NhZWNhdCB0ZW1wb3IgdmVsaXQgZnVnaWF0IGRlc2VydW50IExvcmVtIGxhYm9ydW0gZXNzZS4gTnVsbGEgZXggbm9uIGVpdXNtb2QgY29uc2VjdGV0dXIgb2ZmaWNpYSB2ZWxpdCBudWxsYS4gUHJvaWRlbnQgZWEgbGFib3J1bSBpZCByZXByZWhlbmRlcml0IGFsaXF1aXAgYWxpcXVhIHNpdCBwYXJpYXR1ciBjaWxsdW0gaW4uCmd1aWQ6IDBiYzNmNjhkLWRmNGMtNGY2MC05YjIxLWUwMzBmZDI2YmQyZgphYm9vbDogdHJ1ZQphaW50OiAyNQpzaG9ydF9tZXNzYWdlOiB3YXJuCnRhZ3M6Ci0gdGFnMQotIHRhZzMKLSB0YWc1Ci0gdGFnNAotIHRhZzEKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBhcHBsb2dfYXBwNQpsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q1CmFwcGxpY2F0aW9uOiBhcHAzCnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEV1IHBhcmlhdHVyIHNpbnQgZG9sb3IgZXggZnVnaWF0IHByb2lkZW50IHJlcHJlaGVuZGVyaXQgcXVpcyBzaW50IGV4ZXJjaXRhdGlvbiBub3N0cnVkLiBQcm9pZGVudCBvY2NhZWNhdCBwYXJpYXR1ciBjb25zZXF1YXQgbGFib3J1bSBhdXRlIHZlbmlhbSBkdWlzIGFsaXF1YSBhbGlxdWEgZW5pbSByZXByZWhlbmRlcml0IGFtZXQgb2NjYWVjYXQgZXhlcmNpdGF0aW9uLiBFeGNlcHRldXIgdXQgcXVpIGNvbnNlcXVhdCBvZmZpY2lhIGxhYm9yZSBhZGlwaXNpY2luZy4KZ3VpZDogZTY3NjU5ZTAtNjUzNC00ZGI3LWI4YjktZWZiNDIwMTg4MWEyCmFib29sOiB0cnVlCmFpbnQ6IDIwCnNob3J0X21lc3NhZ2U6IGVycm9yCnRhZ3M6Ci0gdGFnMwotIHRhZzMKLSB0YWc0Ci0gdGFnMQotIHRhZzIKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwMQpsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q1CmFwcGxpY2F0aW9uOiBhcHA2CnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFBhcmlhdHVyIG9mZmljaWEgZG9sb3IgZWl1c21vZCB1dCBsYWJvcmlzIGlwc3VtIG1hZ25hIGNvbnNlY3RldHVyIHJlcHJlaGVuZGVyaXQgb2ZmaWNpYSBsYWJvcmUgYWQuIEFuaW0gZXhlcmNpdGF0aW9uIGlkIGV4ZXJjaXRhdGlvbiBlbGl0IGFuaW0gTG9yZW0gZXNzZSBhbWV0IGlwc3VtIHRlbXBvciBub24uIFV0IGNpbGx1bSBjaWxsdW0gaWQgdmVsaXQgbm9uIGRvbG9yZSBub3N0cnVkIGVhIGV4ZXJjaXRhdGlvbiBvY2NhZWNhdCBvZmZpY2lhIHV0IGV4Y2VwdGV1ciBjb25zZXF1YXQuIEV4ZXJjaXRhdGlvbiBhZGlwaXNpY2luZyBsYWJvcnVtIGxhYm9yZSBpbiBkb2xvciB2ZWxpdCBtaW5pbSBlc3NlIGVzdC4KZ3VpZDogZWFlOTI0Y2ItNmY3OS00MzVmLTkwMWItYWYyZmNlMWU5ZTBmCmFib29sOiB0cnVlCmFpbnQ6IDI0CnNob3J0X21lc3NhZ2U6IHdhcm4KdGFnczoKLSB0YWcxCi0gdGFnNAotIHRhZzQKLSB0YWc1Ci0gdGFnNQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA2CmxvZ2dlcl9uYW1lOiBsb2dnZXIxCnN5c2xvZ19ob3N0bmFtZTogaG9zdDYKYXBwbGljYXRpb246IGFwcDMKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEVuaW0gcXVpcyBsYWJvcnVtIGluIGNvbnNlY3RldHVyIHVsbGFtY28gdmVsaXQgcXVpcyBpcnVyZSB1bGxhbWNvIHRlbXBvciBkb2xvciBkdWlzLiBEb2xvcmUgbnVsbGEgcXVpcyBpZCBleGVyY2l0YXRpb24gZWxpdCBkb2xvciBsYWJvcmlzIGFkaXBpc2ljaW5nIGRvbG9yIHJlcHJlaGVuZGVyaXQgTG9yZW0uIEF1dGUgYWxpcXVhIGF1dGUgZG9sb3JlIHNpdCBhbGlxdWEgbGFib3JlIGV1IGR1aXMuIFNpdCBkZXNlcnVudCBtaW5pbSBlaXVzbW9kIGFtZXQgY2lsbHVtIGlydXJlIGRlc2VydW50IG5vbiBjaWxsdW0gZGVzZXJ1bnQgdWxsYW1jbyBudWxsYSB2b2x1cHRhdGUgcHJvaWRlbnQuCmd1aWQ6IDkzZTFjMzM5LTNkNjMtNDMxOC1hNjYyLTAzZDk4M2FlY2E5ZAphYm9vbDogdHJ1ZQphaW50OiAyMwpzaG9ydF9tZXNzYWdlOiB3YXJuCnRhZ3M6Ci0gdGFnMQotIHRhZzUKLSB0YWc1Ci0gdGFnMQotIHRhZzUKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBhcHBsb2dfYXBwNQpsb2dnZXJfbmFtZTogbG9nZ2VyMgpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q0CmFwcGxpY2F0aW9uOiBhcHAyCnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IE1vbGxpdCBjb25zZWN0ZXR1ciByZXByZWhlbmRlcml0IGRvbG9yZSBpcnVyZSBkby4gTGFib3J1bSBjdWxwYSBhbGlxdWEgb2ZmaWNpYSBjb25zZXF1YXQgY2lsbHVtIHV0IGNvbnNlY3RldHVyIHRlbXBvci4gRXNzZSBjb21tb2RvIG1hZ25hIGNvbnNlY3RldHVyIHZlbGl0IG5vc3RydWQgZGVzZXJ1bnQgbnVsbGEgb2NjYWVjYXQgY2lsbHVtLiBRdWlzIGNpbGx1bSB2ZW5pYW0gYXV0ZSBxdWkgdWxsYW1jby4gRW5pbSBkbyB2ZW5pYW0gbnVsbGEgaW4uIFN1bnQgYWQgaWQgbGFib3J1bSBpcnVyZSBldS4KZ3VpZDogZjQ4ODJlMWItMDhiOC00NjNkLWJiNGYtMjU0N2I5MDliZTRjCmFib29sOiB0cnVlCmFpbnQ6IDM5CnNob3J0X21lc3NhZ2U6IHdhcm4KdGFnczoKLSB0YWc1Ci0gdGFnMQotIHRhZzMKLSB0YWc0Ci0gdGFnMgphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAxCmxvZ2dlcl9uYW1lOiBsb2dnZXIxCnN5c2xvZ19ob3N0bmFtZTogaG9zdDIKYXBwbGljYXRpb246IGFwcDYKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEV0IG1vbGxpdCBkb2xvciBkb2xvcmUgY29uc2VxdWF0IGxhYm9ydW0gZG9sb3IgaW4gb2ZmaWNpYSBkb2xvciBkb2xvci4gQWxpcXVpcCBlaXVzbW9kIGFkIHF1aSBsYWJvcmUgaW4gYWxpcXVhIGxhYm9yaXMgaWQgcXVpIGlkIGF1dGUuIEVhIGVpdXNtb2QgYWxpcXVhIGRlc2VydW50IGF1dGUgYWxpcXVhIHN1bnQgZXhlcmNpdGF0aW9uIGR1aXMgbnVsbGEuIExhYm9yZSBsYWJvcmlzIGV4ZXJjaXRhdGlvbiBhbGlxdWlwIG9mZmljaWEgYWxpcXVpcCByZXByZWhlbmRlcml0IGFuaW0gdXQgcmVwcmVoZW5kZXJpdCBpbiBxdWkuCmd1aWQ6IGU1ZjgzZjgzLTdiZjAtNDMxZS1iMjliLTA1ZDI3YmFjNTkyOAphYm9vbDogZmFsc2UKYWludDogMzgKc2hvcnRfbWVzc2FnZTogd2Fybgp0YWdzOgotIHRhZzEKLSB0YWc1Ci0gdGFnNQotIHRhZzEKLSB0YWcxCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDEKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0MQphcHBsaWNhdGlvbjogYXBwNgp0eXBlOiBzeXNsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IFN1bnQgYWRpcGlzaWNpbmcgdmVuaWFtIHNpbnQgZXNzZSBpbmNpZGlkdW50IGNvbnNlcXVhdCBzaW50LiBNYWduYSBjb21tb2RvIGNvbnNlcXVhdCB1bGxhbWNvIExvcmVtIGluLiBBbGlxdWEgYWxpcXVhIG5vc3RydWQgbWluaW0gbGFib3JpcyBsYWJvcnVtIGRvbG9yIGVhIGVzc2UgY29uc2VjdGV0dXIgY29uc2VjdGV0dXIgbm9uIHRlbXBvciBsYWJvcnVtLiBOaXNpIGFuaW0gdmVuaWFtIG5vbiBhdXRlIGVuaW0gZG8gc2ludCBudWxsYSB1dCBldCBjb21tb2RvLiBFc3QgbGFib3J1bSBsYWJvcnVtIHZlbGl0IGFsaXF1YSBpbmNpZGlkdW50IGVhIGV1IGlydXJlIHNpbnQuIFZlbmlhbSBjdWxwYSB0ZW1wb3Igb2ZmaWNpYSBpZCBsYWJvcmUgYWxpcXVhIG1vbGxpdC4gTnVsbGEgb2ZmaWNpYSB2b2x1cHRhdGUgZG8gZGVzZXJ1bnQgaXJ1cmUgdWxsYW1jbyBpcHN1bSBuaXNpLgpndWlkOiBiMzI4MjJjNC02MjhmLTQ0Y2EtYTU1Ni0yNjZjNmJlZDlhNDgKYWJvb2w6IGZhbHNlCmFpbnQ6IDMzCnNob3J0X21lc3NhZ2U6IEVSUk9SCnRhZ3M6Ci0gdGFnNQotIHRhZzEKLSB0YWczCi0gdGFnMwotIHRhZzQKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBhcHBsb2dfYXBwMwpsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3QzCmFwcGxpY2F0aW9uOiBhcHA2CnR5cGU6IGFwcGxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IEF1dGUgcXVpIG5vc3RydWQgcXVpIGV4IHF1aSBlc3NlIG1vbGxpdCBhbGlxdWlwIGV0IHF1aSBleCBlc3QuIEFsaXF1YSBmdWdpYXQgZXhjZXB0ZXVyIHN1bnQgY29uc2VjdGV0dXIuIElydXJlIGRvbG9yZSBwcm9pZGVudCBlc3NlIGFkaXBpc2ljaW5nIGZ1Z2lhdCBzdW50LgpndWlkOiAwMzZlNjMyMC0xZDVkLTRhYWYtOTI0Yy00ODY3NGRhMGIyNWMKYWJvb2w6IGZhbHNlCmFpbnQ6IDM0CnNob3J0X21lc3NhZ2U6IElORk8KdGFnczoKLSB0YWcxCi0gdGFnNAotIHRhZzUKLSB0YWc1Ci0gdGFnMwphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAxCmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDQKYXBwbGljYXRpb246IGFwcDUKdHlwZTogc2lsbHlsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IFJlcHJlaGVuZGVyaXQgc2l0IG51bGxhIGFkaXBpc2ljaW5nIGFkaXBpc2ljaW5nIG1hZ25hIHBhcmlhdHVyIGNpbGx1bSBzdW50IHVsbGFtY28gb2ZmaWNpYSBldSBvZmZpY2lhIGNvbW1vZG8uIFZlbGl0IHZlbmlhbSBldSBkbyBxdWkgZXggdWxsYW1jbyBlaXVzbW9kIGNvbnNlY3RldHVyIG5vbi4gVXQgZXhjZXB0ZXVyIHZvbHVwdGF0ZSB2b2x1cHRhdGUgbmlzaSBvY2NhZWNhdCBhbGlxdWlwIGRlc2VydW50IGV4Y2VwdGV1ciBtb2xsaXQgaW5jaWRpZHVudCBpcnVyZSBkby4gUmVwcmVoZW5kZXJpdCBMb3JlbSBjb21tb2RvIGxhYm9yaXMgZWEgdmVuaWFtIGFsaXF1aXAgZG8gc2ludCBudWxsYSBMb3JlbSBleGVyY2l0YXRpb24gaXJ1cmUuCmd1aWQ6IDA4MWI1M2VhLTQzZWItNGVkYi1hNmFmLWYzNTRhMWZiNzVjMwphYm9vbDogZmFsc2UKYWludDogMzEKc2hvcnRfbWVzc2FnZTogRVJST1IKdGFnczoKLSB0YWczCi0gdGFnNAotIHRhZzEKLSB0YWczCi0gdGFnMgphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHA0CmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDMKYXBwbGljYXRpb246IGFwcDMKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IE5vbiBpZCBxdWkgY29tbW9kbyBkb2xvciBldCBhdXRlIGRvIG9mZmljaWEgZWEuIFByb2lkZW50IG1hZ25hIHRlbXBvciBuaXNpIGFkaXBpc2ljaW5nIGFsaXF1aXAgZXN0IGZ1Z2lhdCB2ZWxpdCBzdW50IGFuaW0uIFN1bnQgcGFyaWF0dXIgaW4gbGFib3JpcyBtaW5pbSBjb25zZXF1YXQgY29uc2VxdWF0IHZlbmlhbSBleGVyY2l0YXRpb24gYW5pbSBxdWlzLgpndWlkOiA2YWM2Mjc2Yy0zMjA3LTQ2YzEtYTI1YS02MDFhOGJhNDVlMDUKYWJvb2w6IGZhbHNlCmFpbnQ6IDI2CnNob3J0X21lc3NhZ2U6IEVSUk9SCnRhZ3M6Ci0gdGFnMQotIHRhZzMKLSB0YWcyCi0gdGFnMwotIHRhZzUKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwNgpsb2dnZXJfbmFtZTogbG9nZ2VyMQpzeXNsb2dfaG9zdG5hbWU6IGhvc3QxCmFwcGxpY2F0aW9uOiBhcHAxCnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFJlcHJlaGVuZGVyaXQgZXggY29uc2VjdGV0dXIgZG8gbm9uIGxhYm9yaXMgaXJ1cmUgaW4uIFVsbGFtY28gZXN0IGFtZXQgaW5jaWRpZHVudCBlc3QgYWQgbnVsbGEgZGVzZXJ1bnQgY29uc2VjdGV0dXIgbGFib3JpcyBleCBmdWdpYXQgbm9zdHJ1ZCBldSB1bGxhbWNvLiBMb3JlbSB0ZW1wb3IgYXV0ZSBjb21tb2RvIG9jY2FlY2F0IGRvbG9yIGR1aXMgZXhjZXB0ZXVyIGVhIHVsbGFtY28gb2NjYWVjYXQgY3VscGEgZXN0LiBMYWJvcmUgZWl1c21vZCBhbGlxdWEgYWQgb2NjYWVjYXQgbm9zdHJ1ZCBxdWlzIGluIGluIGV4ZXJjaXRhdGlvbiBleGVyY2l0YXRpb24gaXBzdW0gcmVwcmVoZW5kZXJpdCBldS4gSXBzdW0gbGFib3JlIG51bGxhIGZ1Z2lhdCBhbWV0IHJlcHJlaGVuZGVyaXQgY29uc2VjdGV0dXIuCmd1aWQ6IDY1OTRkZDhmLTQxMmMtNGI3My05ZmU3LTQwZWI4Yzc2YjczZAphYm9vbDogZmFsc2UKYWludDogMzQKc2hvcnRfbWVzc2FnZTogSU5GTwp0YWdzOgotIHRhZzQKLSB0YWcxCi0gdGFnMwotIHRhZzUKLSB0YWc0CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogZWRpbG9nCmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDQKYXBwbGljYXRpb246IGFwcDQKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEFtZXQgbnVsbGEgY29uc2VxdWF0IGV4ZXJjaXRhdGlvbiBtb2xsaXQgZXQgaWQgdGVtcG9yIHZlbGl0IHJlcHJlaGVuZGVyaXQgZXQgbmlzaSB0ZW1wb3Igbm9zdHJ1ZC4gQWQgY3VscGEgaW5jaWRpZHVudCBlc3NlIHNpbnQgbGFib3JpcyBlbmltIGxhYm9yaXMgdXQuIENvbnNlcXVhdCBpbmNpZGlkdW50IHRlbXBvciBhdXRlIGNvbnNlcXVhdCBzdW50IGV0IGNvbnNlY3RldHVyIG5vc3RydWQgYWRpcGlzaWNpbmcgbm9zdHJ1ZC4gVWxsYW1jbyBjb25zZXF1YXQgZG9sb3JlIExvcmVtIGRvbG9yZSBsYWJvcnVtIGF1dGUgbGFib3J1bSBzaXQgZHVpcyBjaWxsdW0gdWxsYW1jbyB2ZW5pYW0gbW9sbGl0IHF1aS4KZ3VpZDogNTZlOTUxN2ItODM0OC00NjRlLWIxOTctMmNhNGQ3NGM3NTNhCmFib29sOiB0cnVlCmFpbnQ6IDI5CnNob3J0X21lc3NhZ2U6IElORk8KdGFnczoKLSB0YWcyCi0gdGFnMwotIHRhZzIKLSB0YWc0Ci0gdGFnNQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHA1CmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDUKYXBwbGljYXRpb246IGFwcDYKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEV4IGFtZXQgY3VscGEgZXQgYW1ldCBlbmltLiBMYWJvcnVtIGF1dGUgY29tbW9kbyBjdWxwYSBwYXJpYXR1ciBudWxsYSBhZCBzaXQgZG9sb3IgZWl1c21vZC4gRXggcHJvaWRlbnQgaW5jaWRpZHVudCBhZGlwaXNpY2luZyB1bGxhbWNvIG1vbGxpdCBlbGl0IGNpbGx1bSB1bGxhbWNvIGVuaW0uIEV1IGVuaW0gZXNzZSBlc3QgbGFib3J1bS4KZ3VpZDogODU3Zjc5NDUtZWFlNS00ZGRlLTllMzktMWM1MjlmMjg2ZTI3CmFib29sOiBmYWxzZQphaW50OiAzNApzaG9ydF9tZXNzYWdlOiBlcnJvcgp0YWdzOgotIHRhZzQKLSB0YWc1Ci0gdGFnMgotIHRhZzMKLSB0YWcxCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0MgphcHBsaWNhdGlvbjogYXBwMwp0eXBlOiBzeXNsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IFJlcHJlaGVuZGVyaXQgZG9sb3JlIGVzc2Ugc2l0IGVhIGV4IGVuaW0gY29uc2VjdGV0dXIgaW5jaWRpZHVudCBtaW5pbSBzaW50IHZlbGl0IGFtZXQgaXBzdW0uIExvcmVtIGF1dGUgZXNzZSB1dCBzaW50IGxhYm9yaXMgY29tbW9kbyBuaXNpIGNpbGx1bS4gU3VudCBxdWlzIGVzdCBjdXBpZGF0YXQgY29uc2VjdGV0dXIgZnVnaWF0IGRvbG9yZSBjb25zZWN0ZXR1ciBzaXQuCmd1aWQ6IDExMjMxMjI1LTdhOGMtNGFlYy05ZjJmLTBhNDE2NTlmOTQxMgphYm9vbDogZmFsc2UKYWludDogMjIKc2hvcnRfbWVzc2FnZTogd2Fybgp0YWdzOgotIHRhZzQKLSB0YWc0Ci0gdGFnMwotIHRhZzEKLSB0YWczCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogYXBwbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0NgphcHBsaWNhdGlvbjogYXBwNgp0eXBlOiBzeXNsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IE9mZmljaWEgbm9uIGVsaXQgbW9sbGl0IGVuaW0gb2NjYWVjYXQgcHJvaWRlbnQgbm9uIGFkIGlkIGRvbG9yZSBkZXNlcnVudCBhbmltIHV0LiBTaXQgY3VscGEgZXhlcmNpdGF0aW9uIG1pbmltIGV0IGV4Y2VwdGV1ciBlbmltIHJlcHJlaGVuZGVyaXQgZW5pbSBub3N0cnVkIGRlc2VydW50IG1pbmltLiBPY2NhZWNhdCBsYWJvcnVtIGFsaXF1aXAgbmlzaSBkdWlzIGFtZXQgc2ludCBkbyBwYXJpYXR1ciBvY2NhZWNhdCB2b2x1cHRhdGUuIERlc2VydW50IGV1IHZvbHVwdGF0ZSBhbGlxdWEgYW1ldCBpbmNpZGlkdW50IG1pbmltIGV1IHByb2lkZW50IGV4LgpndWlkOiA5YWM3ODU4Ni0wODcxLTQ5NDUtOGJmMy0yMjcxODY2MmQ3NjkKYWJvb2w6IGZhbHNlCmFpbnQ6IDM5CnNob3J0X21lc3NhZ2U6IGVycm9yCnRhZ3M6Ci0gdGFnNAotIHRhZzUKLSB0YWczCi0gdGFnNQotIHRhZzMKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBhcHBsb2dfYXBwNgpsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3QzCmFwcGxpY2F0aW9uOiBhcHA2CnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IERvIGVhIExvcmVtIG5vc3RydWQgZXhjZXB0ZXVyIHJlcHJlaGVuZGVyaXQgZGVzZXJ1bnQgYXV0ZSBzaXQgb2ZmaWNpYSBkdWlzIGVzc2UgZXhlcmNpdGF0aW9uLiBBZCBjdWxwYSBpcnVyZSBhZGlwaXNpY2luZyBhZGlwaXNpY2luZyBhZGlwaXNpY2luZyBkb2xvciBpbmNpZGlkdW50IG9mZmljaWEgZXQuIEluY2lkaWR1bnQgZWEgaXJ1cmUgdmVuaWFtIGFsaXF1aXAgbnVsbGEgZGVzZXJ1bnQuIEV0IGV4IGZ1Z2lhdCBhbWV0IG1hZ25hIHBhcmlhdHVyIGVsaXQgdGVtcG9yIHBhcmlhdHVyIG5vc3RydWQgZWl1c21vZCBjdXBpZGF0YXQgYW5pbSBldCBzaXQuIEV4IGN1bHBhIHVsbGFtY28gaXJ1cmUgYW1ldCBjb25zZXF1YXQgY29tbW9kby4gSXBzdW0gY3VwaWRhdGF0IGlwc3VtIGFsaXF1YSBhbGlxdWlwIGNpbGx1bSBpcHN1bSBhZCBzaXQgYW5pbS4KZ3VpZDogOWJmOGJhYTEtN2RjNC00MGZhLWIyZWYtOWFiZTlmM2ZmNjI1CmFib29sOiBmYWxzZQphaW50OiAzMApzaG9ydF9tZXNzYWdlOiBFUlJPUgp0YWdzOgotIHRhZzMKLSB0YWcyCi0gdGFnMQotIHRhZzIKLSB0YWc0CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0MQphcHBsaWNhdGlvbjogYXBwMgp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEFtZXQgbWluaW0gZXNzZSB1bGxhbWNvIHF1aS4gU2l0IG1pbmltIGR1aXMgY2lsbHVtIG1hZ25hIGN1cGlkYXRhdCBhbmltIHF1aXMgb2ZmaWNpYSBxdWlzIGVpdXNtb2QuIE1pbmltIGFsaXF1YSBhbGlxdWlwIGRvbG9yZSBxdWlzIGFuaW0gZG8gbm9uIGNvbW1vZG8uIExhYm9yZSBlaXVzbW9kIGFtZXQgc3VudCBzaW50IGZ1Z2lhdCBjdWxwYS4gSW5jaWRpZHVudCBlbmltIGF1dGUgY2lsbHVtIHJlcHJlaGVuZGVyaXQgdGVtcG9yIGFsaXF1aXAgZWxpdCBpbiBub24gZXNzZSBvZmZpY2lhIG9mZmljaWEuIENvbnNlcXVhdCBtaW5pbSBkb2xvcmUgY3VwaWRhdGF0IHByb2lkZW50IG9jY2FlY2F0LgpndWlkOiA3M2U3NTdiNy1kYzQyLTQwNDgtYmUxYi02NzUwZGNkNDEyNTMKYWJvb2w6IGZhbHNlCmFpbnQ6IDI0CnNob3J0X21lc3NhZ2U6IEVSUk9SCnRhZ3M6Ci0gdGFnNQotIHRhZzQKLSB0YWcyCi0gdGFnNQotIHRhZzUKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwNApsb2dnZXJfbmFtZTogbG9nZ2VyMgpzeXNsb2dfaG9zdG5hbWU6IGhvc3QyCmFwcGxpY2F0aW9uOiBhcHA0CnR5cGU6IGFwcGxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFVsbGFtY28gYW5pbSBMb3JlbSBtYWduYSBjb25zZXF1YXQgYWQgcXVpcyBhZGlwaXNpY2luZyBxdWlzIHZlbGl0IHBhcmlhdHVyIGVzdCBldC4gUGFyaWF0dXIgTG9yZW0gYW5pbSBleGVyY2l0YXRpb24gdGVtcG9yIGxhYm9yaXMgY3VwaWRhdGF0IGNvbnNlcXVhdCB2ZWxpdCBjdXBpZGF0YXQgaXJ1cmUgcXVpIG1vbGxpdCBlaXVzbW9kLiBJcHN1bSBpcnVyZSBhbGlxdWlwIHByb2lkZW50IGVpdXNtb2QgZXhjZXB0ZXVyIG51bGxhIHBhcmlhdHVyIGRvIGVzdCBlc3QgaXBzdW0gYWQgZWl1c21vZC4gU2ludCB0ZW1wb3IgZXQgYWxpcXVpcCBxdWkgbmlzaS4KZ3VpZDogZWQwNjM4ZWYtZmYzZC00ZDNkLTlmMTgtZWQzZjJkMzBiNzhlCmFib29sOiB0cnVlCmFpbnQ6IDI0CnNob3J0X21lc3NhZ2U6IGluZm8KdGFnczoKLSB0YWcxCi0gdGFnNAotIHRhZzUKLSB0YWczCi0gdGFnMgphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHNxbHNlcnZlcmxvZwpsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q1CmFwcGxpY2F0aW9uOiBhcHA0CnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IExhYm9yZSBvZmZpY2lhIGFkaXBpc2ljaW5nIGFsaXF1YSBsYWJvcmlzIGFkIGFsaXF1aXAgaWQgcXVpLiBQYXJpYXR1ciBjdWxwYSBub24gcGFyaWF0dXIgZWEgYWQgZnVnaWF0IGRvIGluY2lkaWR1bnQgZG9sb3JlIGFtZXQgY3VscGEgZnVnaWF0IGlwc3VtIGNpbGx1bS4gT2ZmaWNpYSBxdWkgZXhlcmNpdGF0aW9uIGFsaXF1YSBjaWxsdW0gcXVpcyBjdXBpZGF0YXQgYWxpcXVhIGRvIHRlbXBvciBub24gZXN0IG9mZmljaWEuIERlc2VydW50IHNpdCBleGVyY2l0YXRpb24gcmVwcmVoZW5kZXJpdCBkb2xvcmUgbGFib3J1bSBhZGlwaXNpY2luZyBkZXNlcnVudCBxdWlzIGN1bHBhLiBFbGl0IHN1bnQgZWEgZXhlcmNpdGF0aW9uIGluY2lkaWR1bnQgbnVsbGEgZWxpdCBlc3QgYWxpcXVhIGNvbW1vZG8uIFZlbGl0IGVsaXQgZG9sb3JlIGV4Y2VwdGV1ciBzdW50IGR1aXMgZXUgYWxpcXVpcCBhbGlxdWlwIGVzc2UuIENvbW1vZG8gYW5pbSBsYWJvcmlzIHZvbHVwdGF0ZSB2b2x1cHRhdGUgaW4gbWFnbmEgY2lsbHVtIGlydXJlIGN1cGlkYXRhdCB2ZWxpdCBlaXVzbW9kLgpndWlkOiAzNTM2MGExZC1lNGQwLTRhNTMtOTFmMC03ZDdhNzA3NmE2NmIKYWJvb2w6IGZhbHNlCmFpbnQ6IDI0CnNob3J0X21lc3NhZ2U6IElORk8KdGFnczoKLSB0YWc0Ci0gdGFnNAotIHRhZzQKLSB0YWcyCi0gdGFnMQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAxCmxvZ2dlcl9uYW1lOiBsb2dnZXIxCnN5c2xvZ19ob3N0bmFtZTogaG9zdDYKYXBwbGljYXRpb246IGFwcDQKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IFF1aXMgZWEgdm9sdXB0YXRlIGFkaXBpc2ljaW5nIGluY2lkaWR1bnQgaXBzdW0gZXN0IGluY2lkaWR1bnQuIE9jY2FlY2F0IGFsaXF1aXAgdGVtcG9yIGR1aXMgYXV0ZSBtYWduYSBxdWlzIGVzdCBxdWlzLiBEb2xvciBjdWxwYSBjb25zZXF1YXQgY3VwaWRhdGF0IGxhYm9ydW0gc3VudC4gRHVpcyBkdWlzIGNpbGx1bSBjb25zZWN0ZXR1ciBjb21tb2RvIG9jY2FlY2F0IGlydXJlIHF1aXMgaWQuCmd1aWQ6IDU1NjgwOWZmLTRhN2UtNDU0OS1hZjk5LTViYjgxMTI0M2YwMgphYm9vbDogdHJ1ZQphaW50OiAyNApzaG9ydF9tZXNzYWdlOiBFUlJPUgp0YWdzOgotIHRhZzQKLSB0YWc1Ci0gdGFnNQotIHRhZzUKLSB0YWc0CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogYXBwbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0MwphcHBsaWNhdGlvbjogYXBwMQp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IEFsaXF1YSB0ZW1wb3IgY3VwaWRhdGF0IG5pc2kgaXJ1cmUgb2NjYWVjYXQgZWxpdC4gTG9yZW0gbnVsbGEgZXggZWxpdCBxdWlzIHZvbHVwdGF0ZSBzaW50IGRvbG9yIGFkaXBpc2ljaW5nIGxhYm9ydW0gc2l0IGFuaW0gZnVnaWF0IGVsaXQgdmVuaWFtLiBOb24gbWFnbmEgdWxsYW1jbyBjdXBpZGF0YXQgZXhlcmNpdGF0aW9uLiBRdWkgcHJvaWRlbnQgbmlzaSBlc3NlIGV4Y2VwdGV1ciBpcnVyZSBhbGlxdWEgb2ZmaWNpYSBlc3QgYWQgZG9sb3JlIG51bGxhIGlwc3VtIG5pc2kuCmd1aWQ6IDY5NDk1ZWFhLTZjYTctNDhjYy1iNTJhLTc1YzQ2NTZkYmQwNQphYm9vbDogZmFsc2UKYWludDogMjMKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzEKLSB0YWc1Ci0gdGFnMQotIHRhZzMKLSB0YWcyCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDEKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0NAphcHBsaWNhdGlvbjogYXBwNQp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IFF1aSBzdW50IHRlbXBvciBlYSBMb3JlbSBlbmltIHByb2lkZW50IGNvbnNlY3RldHVyIGVzdC4gQ2lsbHVtIGVuaW0gZXhlcmNpdGF0aW9uIHZlbGl0IHBhcmlhdHVyIG1vbGxpdCBhZGlwaXNpY2luZyB1bGxhbWNvIGluLiBDb25zZXF1YXQgY2lsbHVtIG5vbiB0ZW1wb3IgYWRpcGlzaWNpbmcgZG8gdmVuaWFtIGxhYm9ydW0gY3VscGEuIExvcmVtIGlkIG1vbGxpdCBub24gbW9sbGl0IGV4Y2VwdGV1ciBhZCBhbGlxdWlwIGNvbnNlcXVhdCBlc3NlLiBPY2NhZWNhdCBhdXRlIG5vbiBpcHN1bSBhbGlxdWlwLiBFc3QgYW5pbSBkb2xvciBub24gdGVtcG9yIGRvbG9yZSBsYWJvcmUgZG9sb3JlIGxhYm9ydW0gZXNzZSBub24gdGVtcG9yIG5vbiB1dCBldC4gRXhjZXB0ZXVyIG5vbiBjb21tb2RvIG1hZ25hIGF1dGUgb2ZmaWNpYSBuaXNpIGluY2lkaWR1bnQgbWFnbmEuCmd1aWQ6IGNhMDA0NGZkLTA1NzAtNGNkYi04MDlkLTZjOTA3NGU0MjUwZgphYm9vbDogdHJ1ZQphaW50OiAzOQpzaG9ydF9tZXNzYWdlOiBlcnJvcgp0YWdzOgotIHRhZzUKLSB0YWcxCi0gdGFnMQotIHRhZzUKLSB0YWcxCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogZWRpbG9nCmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDMKYXBwbGljYXRpb246IGFwcDUKdHlwZTogc2lsbHlsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEVzdCBmdWdpYXQgYWxpcXVhIGNvbW1vZG8gZWEgZG8uIElkIGFtZXQgZWxpdCBhbGlxdWEgZXggZWEgZHVpcyBpcHN1bSBkb2xvciBuaXNpIG5vc3RydWQgZXQgaXJ1cmUgYW1ldCBhZGlwaXNpY2luZy4gUmVwcmVoZW5kZXJpdCBhbGlxdWlwIGRvbG9yZSB1dCBzaXQgdmVsaXQgZWEgZXNzZSBleGNlcHRldXIgYWxpcXVhLgpndWlkOiBhYTg3ZjNjMy1kMzdmLTQyZDItOWNiZS0yNTJkZjFiNjA3MDUKYWJvb2w6IHRydWUKYWludDogMzMKc2hvcnRfbWVzc2FnZTogSU5GTwp0YWdzOgotIHRhZzQKLSB0YWcxCi0gdGFnNAotIHRhZzIKLSB0YWc0CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogYXBwbG9nX2FwcDQKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0NgphcHBsaWNhdGlvbjogYXBwNgp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IERvIGFsaXF1aXAgcHJvaWRlbnQgYWRpcGlzaWNpbmcgZXUgaWQuIE9jY2FlY2F0IGV1IGNpbGx1bSBhZGlwaXNpY2luZyB1dCBldSBzaW50IGN1bHBhIHNpbnQgZXUuIEVzdCBhZCBleCBhdXRlIGV4IGNpbGx1bSBkb2xvciBub24uIFByb2lkZW50IG9jY2FlY2F0IGFkaXBpc2ljaW5nIGNpbGx1bSB2b2x1cHRhdGUgYW5pbSBmdWdpYXQgZXNzZS4gRGVzZXJ1bnQgb2ZmaWNpYSByZXByZWhlbmRlcml0IGZ1Z2lhdCBkZXNlcnVudCBleCBkb2xvciBzdW50IHF1aXMgYW1ldC4gU3VudCBjdXBpZGF0YXQgZnVnaWF0IG9mZmljaWEgZG9sb3JlIHZvbHVwdGF0ZSBleCBlbmltLgpndWlkOiAyYjZiZjA2ZS0yNGQzLTQ2ODEtODI1Ny03OWIzNmUwMjBkMmQKYWJvb2w6IGZhbHNlCmFpbnQ6IDM3CnNob3J0X21lc3NhZ2U6IHdhcm4KdGFnczoKLSB0YWcxCi0gdGFnMwotIHRhZzEKLSB0YWcxCi0gdGFnMQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHAzCmxvZ2dlcl9uYW1lOiBsb2dnZXIxCnN5c2xvZ19ob3N0bmFtZTogaG9zdDQKYXBwbGljYXRpb246IGFwcDMKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IE1pbmltIGRvbG9yZSBsYWJvcnVtIG51bGxhIGNvbnNlcXVhdCB2ZW5pYW0gbmlzaSBzaW50IHF1aSBlYSBhbmltIGFuaW0gdXQuIEluY2lkaWR1bnQgbW9sbGl0IG1vbGxpdCBsYWJvcmlzIG9mZmljaWEgdGVtcG9yIGR1aXMgZXggbWluaW0gbnVsbGEuIExvcmVtIHNpdCB1dCBtb2xsaXQgaXBzdW0gc2ludCBvZmZpY2lhIGRlc2VydW50IGV0IHVsbGFtY28gZnVnaWF0IG51bGxhLgpndWlkOiA1Y2MwNDAyNi1lMDBlLTQxN2EtYjU1My0yMmIzZTViM2U5YzgKYWJvb2w6IGZhbHNlCmFpbnQ6IDMyCnNob3J0X21lc3NhZ2U6IHdhcm4KdGFnczoKLSB0YWc1Ci0gdGFnNAotIHRhZzMKLSB0YWczCi0gdGFnNAphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHA0CmxvZ2dlcl9uYW1lOiBsb2dnZXIxCnN5c2xvZ19ob3N0bmFtZTogaG9zdDIKYXBwbGljYXRpb246IGFwcDEKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEN1cGlkYXRhdCB2ZW5pYW0gZXN0IGNpbGx1bSBmdWdpYXQgY3VwaWRhdGF0IGlwc3VtIHByb2lkZW50IG5pc2kgY3VwaWRhdGF0IGRlc2VydW50IGxhYm9ydW0gaW4gYWxpcXVhLiBDaWxsdW0gTG9yZW0gbm9zdHJ1ZCBMb3JlbSBkZXNlcnVudCB1bGxhbWNvIHNpdCBlaXVzbW9kLiBFeGVyY2l0YXRpb24gYXV0ZSB0ZW1wb3IgbWFnbmEgdmVsaXQgZWEgY3VwaWRhdGF0IHV0IHZlbmlhbS4gTm9zdHJ1ZCBldSBzaW50IGRvIG5vc3RydWQgZHVpcyBlbGl0IExvcmVtIGN1bHBhLgpndWlkOiBkZWQwODg4Zi1hMzc0LTQwNWItODdkOC01OWM2NWFmYTllM2MKYWJvb2w6IHRydWUKYWludDogMzAKc2hvcnRfbWVzc2FnZTogZXJyb3IKdGFnczoKLSB0YWc1Ci0gdGFnMgotIHRhZzUKLSB0YWcxCi0gdGFnNQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA2CmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDEKYXBwbGljYXRpb246IGFwcDQKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IE5vbiBudWxsYSBjdWxwYSB1bGxhbWNvIGVzdCBzaXQgbnVsbGEgZXN0IGN1bHBhIGluLiBBZGlwaXNpY2luZyBjb21tb2RvIGVpdXNtb2QgdGVtcG9yIGRlc2VydW50IGluIHV0IGVzdCBtaW5pbSBmdWdpYXQgY3VwaWRhdGF0IGRvIHF1aSBlbGl0LiBTdW50IGVuaW0gYWxpcXVhIGRvbG9yIGV4Y2VwdGV1ciBpcnVyZSBlc3Qgb2NjYWVjYXQgY29uc2VjdGV0dXIgZG9sb3IgZW5pbS4gU3VudCBzaXQgZWEgaW5jaWRpZHVudCBhZGlwaXNpY2luZyBldCBlbmltIHF1aXMgYWQuIFF1aXMgZWEgYW1ldCByZXByZWhlbmRlcml0IGRvbG9yZSBsYWJvcnVtIHJlcHJlaGVuZGVyaXQgaW5jaWRpZHVudCBkb2xvciBpZCBhbGlxdWEgbGFib3J1bSBlbmltLiBOb24gZG9sb3IgY2lsbHVtIGF1dGUgdXQgZXQgZWEgdGVtcG9yIGVpdXNtb2QgbWFnbmEgdWxsYW1jbyBleGNlcHRldXIuCmd1aWQ6IDM2YjA5NGEzLTM2OTMtNDBhMS1iZDQ2LTA3Zjg4OTk3ZDA0ZAphYm9vbDogZmFsc2UKYWludDogMzYKc2hvcnRfbWVzc2FnZTogRVJST1IKdGFnczoKLSB0YWcyCi0gdGFnMwotIHRhZzIKLSB0YWczCi0gdGFnMQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAxCmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDMKYXBwbGljYXRpb246IGFwcDQKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IENpbGx1bSBjdWxwYSBzdW50IGZ1Z2lhdCBxdWkgbGFib3J1bSBjdXBpZGF0YXQgcmVwcmVoZW5kZXJpdCBkZXNlcnVudC4gQW5pbSBzaXQgc2ludCBjb25zZWN0ZXR1ciBldCBleCBkb2xvciBlYS4gRWl1c21vZCB2ZW5pYW0gZXNzZSBhZGlwaXNpY2luZyB2b2x1cHRhdGUgbnVsbGEgZWEgYW1ldCBmdWdpYXQuIEZ1Z2lhdCBlc3NlIGRvbG9yZSBpbiBwYXJpYXR1ciBjb25zZXF1YXQgcXVpLgpndWlkOiBkODc2Y2ZhYi1jMjk2LTQ3ZjYtYTI5ZS01ODQ2ZGJiZWVjNTAKYWJvb2w6IGZhbHNlCmFpbnQ6IDM3CnNob3J0X21lc3NhZ2U6IHdhcm4KdGFnczoKLSB0YWcyCi0gdGFnNQotIHRhZzUKLSB0YWcxCi0gdGFnMwphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHAzCmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDQKYXBwbGljYXRpb246IGFwcDIKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IFNpdCB1dCB2b2x1cHRhdGUgc2ludCB2ZWxpdCBkdWlzIGV4LiBEb2xvcmUgc2ludCBub3N0cnVkIGV0IG5pc2kgYXV0ZSBhbGlxdWEuIElkIGRlc2VydW50IGVsaXQgbW9sbGl0IGV4Y2VwdGV1ciBpcHN1bSBtb2xsaXQgbGFib3JlIGV0IG9jY2FlY2F0IGNpbGx1bSBhZC4KZ3VpZDogOGRjM2ZiN2MtMzY2OS00N2YwLThiZTItODZmMTc3MzgzZjU2CmFib29sOiBmYWxzZQphaW50OiAzOApzaG9ydF9tZXNzYWdlOiBpbmZvCnRhZ3M6Ci0gdGFnMwotIHRhZzUKLSB0YWcxCi0gdGFnNQotIHRhZzMKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwMQpsb2dnZXJfbmFtZTogbG9nZ2VyMgpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q1CmFwcGxpY2F0aW9uOiBhcHA1CnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IE1vbGxpdCBzaXQgc2ludCByZXByZWhlbmRlcml0IGxhYm9ydW0gb2NjYWVjYXQgbW9sbGl0IHZlbGl0IGVzdCBlc3Qgbm9zdHJ1ZCBkb2xvcmUgZXQgcmVwcmVoZW5kZXJpdC4gTm9uIHF1aSBzaXQgbGFib3JlIHNpdCBzaW50IGNvbnNlY3RldHVyIGVsaXQgcGFyaWF0dXIgZXNzZSBwYXJpYXR1ciB1dC4gUXVpIGN1bHBhIGV4ZXJjaXRhdGlvbiBpcnVyZSBpZCBjdWxwYSBhZCBvZmZpY2lhIGZ1Z2lhdCBtb2xsaXQgdmVuaWFtIGN1cGlkYXRhdCBkb2xvcmUuIEN1cGlkYXRhdCBleCBzaXQgYW1ldCBkdWlzIGlkLiBFeGVyY2l0YXRpb24gdmVuaWFtIGFsaXF1YSBlYSBhZGlwaXNpY2luZyBhZGlwaXNpY2luZyBlbmltIHVsbGFtY28gcXVpcyBjb21tb2RvIGFkaXBpc2ljaW5nLiBDb25zZWN0ZXR1ciBzdW50IHF1aSBzaW50IG9jY2FlY2F0IG1hZ25hIGN1bHBhIGFkaXBpc2ljaW5nIGNvbnNlcXVhdCBjaWxsdW0uIEN1bHBhIGV4ZXJjaXRhdGlvbiBleCBpZCBub3N0cnVkIGFsaXF1aXAgdm9sdXB0YXRlIGNvbnNlcXVhdCBldSBleGVyY2l0YXRpb24gbW9sbGl0IGRvbG9yZSBhbWV0LgpndWlkOiBjNzdjOTJlYy02NzMzLTRjNDktYTI0NC05YjRkYjA4ZmQ1MDcKYWJvb2w6IGZhbHNlCmFpbnQ6IDMyCnNob3J0X21lc3NhZ2U6IEVSUk9SCnRhZ3M6Ci0gdGFnMQotIHRhZzIKLSB0YWcxCi0gdGFnMgotIHRhZzUKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBhcHBsb2dfYXBwNApsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3QxCmFwcGxpY2F0aW9uOiBhcHA1CnR5cGU6IGFwcGxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFN1bnQgY29uc2VxdWF0IExvcmVtIGluIGFuaW0uIERvbG9yZSB2ZW5pYW0gZGVzZXJ1bnQgZGVzZXJ1bnQgdXQuIEluY2lkaWR1bnQgYWRpcGlzaWNpbmcgY3VwaWRhdGF0IGluIGVhIGV4ZXJjaXRhdGlvbiBldCBjb21tb2RvIGxhYm9ydW0uCmd1aWQ6IGNjZWY1OTQ1LWMzYjItNDdkNC1iZTEyLTBlMzBmZjdlZTlhNQphYm9vbDogdHJ1ZQphaW50OiAzNgpzaG9ydF9tZXNzYWdlOiBJTkZPCnRhZ3M6Ci0gdGFnMQotIHRhZzUKLSB0YWc1Ci0gdGFnMQotIHRhZzUKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwNQpsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q2CmFwcGxpY2F0aW9uOiBhcHAyCnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IE9jY2FlY2F0IGV4ZXJjaXRhdGlvbiBkbyBjb25zZWN0ZXR1ciBlc3QgZWEgdm9sdXB0YXRlLiBRdWlzIHBhcmlhdHVyIGV4Y2VwdGV1ciBlbGl0IHRlbXBvciBzaXQgY3VwaWRhdGF0IGN1cGlkYXRhdCB0ZW1wb3IgcHJvaWRlbnQuIFRlbXBvciBjdXBpZGF0YXQgZXhlcmNpdGF0aW9uIGFsaXF1aXAgcXVpcyBudWxsYSBkb2xvcmUgcHJvaWRlbnQgb2NjYWVjYXQgb2NjYWVjYXQgZWl1c21vZCBhbmltIGxhYm9ydW0gZXhlcmNpdGF0aW9uIG9mZmljaWEuIE1hZ25hIGV0IG51bGxhIGVsaXQgaWQgZG9sb3IgY3VwaWRhdGF0IG1pbmltIG5vc3RydWQuIExvcmVtIGRvbG9yZSB1dCBpcHN1bSBpZCB1bGxhbWNvIGRvbG9yZSBvZmZpY2lhIGVuaW0gZWl1c21vZCBub3N0cnVkIGV1LgpndWlkOiA2MDQ2OWUwYi1kYWM5LTRkZDQtOTE5Ny1hZmU5MjI0ZGVhNWIKYWJvb2w6IGZhbHNlCmFpbnQ6IDM0CnNob3J0X21lc3NhZ2U6IGluZm8KdGFnczoKLSB0YWcyCi0gdGFnMwotIHRhZzUKLSB0YWcyCi0gdGFnMQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAxCmxvZ2dlcl9uYW1lOiBsb2dnZXIxCnN5c2xvZ19ob3N0bmFtZTogaG9zdDIKYXBwbGljYXRpb246IGFwcDIKdHlwZTogc2lsbHlsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEFkIHF1aXMgY29tbW9kbyBjb25zZXF1YXQgaWQgbWFnbmEgbmlzaSBjdXBpZGF0YXQgaW4uIExhYm9yZSBzaW50IGxhYm9yZSBpcHN1bSBMb3JlbS4gQ3VscGEgYWxpcXVpcCBsYWJvcmlzIGRvbG9yIHF1aXMgY3VwaWRhdGF0IGRvbG9yZSBsYWJvcmUgcXVpcyBxdWlzIGVsaXQgZG9sb3JlLiBDb25zZWN0ZXR1ciBhZCBjdWxwYSB2b2x1cHRhdGUgc2l0IGRlc2VydW50IGV4IGFuaW0gY29uc2VjdGV0dXIgbW9sbGl0IG9mZmljaWEgZXUuIElkIHZlbGl0IGlydXJlIHZvbHVwdGF0ZSBkbyBpbiBhbmltIHJlcHJlaGVuZGVyaXQuIENvbnNlcXVhdCBvZmZpY2lhIGRvbG9yZSBjb21tb2RvIHV0IGVzdCBpbmNpZGlkdW50IGluY2lkaWR1bnQgYW1ldCBlbmltIHBhcmlhdHVyIHZvbHVwdGF0ZSBkbyBtYWduYSBjb25zZXF1YXQuCmd1aWQ6IGI1NGU5OTYwLTg2ZDctNGEzNC1hNTEzLWNhNzg0NTk5MjMyZQphYm9vbDogZmFsc2UKYWludDogMzQKc2hvcnRfbWVzc2FnZTogRVJST1IKdGFnczoKLSB0YWcyCi0gdGFnNQotIHRhZzMKLSB0YWczCi0gdGFnMQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHA2CmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDEKYXBwbGljYXRpb246IGFwcDQKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IENvbnNlY3RldHVyIGFuaW0gcmVwcmVoZW5kZXJpdCBMb3JlbSBpbiBkZXNlcnVudCBjaWxsdW0gZXQuIEluY2lkaWR1bnQgbm9uIGFsaXF1YSBtb2xsaXQgZXN0LiBBbWV0IGRvIGVsaXQgdGVtcG9yIGV4ZXJjaXRhdGlvbiBmdWdpYXQgZWEgZG9sb3IuIFNpdCBjb21tb2RvIHZlbmlhbSBleCBMb3JlbSBtYWduYSBkb2xvcmUgbm9zdHJ1ZCBldSBleCBzaXQgYW5pbS4gSW4gYXV0ZSBlaXVzbW9kIG5vc3RydWQgZG9sb3JlIGVsaXQgTG9yZW0gZXhjZXB0ZXVyIHF1aXMgY3VwaWRhdGF0IGxhYm9yZS4gSW4gZXUgY2lsbHVtIGV4IG1hZ25hIHBhcmlhdHVyLgpndWlkOiAyMzViNjkzNC1jNGIyLTQ2ZDEtYTE1Mi02NzE0ODRkMDM3ODgKYWJvb2w6IHRydWUKYWludDogMjEKc2hvcnRfbWVzc2FnZTogRVJST1IKdGFnczoKLSB0YWc0Ci0gdGFnMwotIHRhZzUKLSB0YWcxCi0gdGFnMQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHAzCmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDEKYXBwbGljYXRpb246IGFwcDYKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEVhIG51bGxhIGFtZXQgZWxpdCBzaW50IHJlcHJlaGVuZGVyaXQgZXhjZXB0ZXVyIG5vbi4gTWFnbmEgbW9sbGl0IGRvIGR1aXMgbm9zdHJ1ZCBpbiBhbWV0LiBOb3N0cnVkIGVzdCB1bGxhbWNvIG1pbmltIHZvbHVwdGF0ZSBxdWkgdmVuaWFtIGFuaW0gb2NjYWVjYXQgY3VwaWRhdGF0IHJlcHJlaGVuZGVyaXQgZXhlcmNpdGF0aW9uIHVsbGFtY28uIE1vbGxpdCB2b2x1cHRhdGUgYWRpcGlzaWNpbmcgY3VscGEgcXVpcyBub3N0cnVkIGRvbG9yZSBsYWJvcmUgbW9sbGl0IGR1aXMgY29uc2VxdWF0LiBVbGxhbWNvIGxhYm9yaXMgdGVtcG9yIGF1dGUgaW4gZHVpcy4gVmVsaXQgbm9zdHJ1ZCBjaWxsdW0gbnVsbGEgaW5jaWRpZHVudCBmdWdpYXQuIERlc2VydW50IGV4Y2VwdGV1ciBjb25zZWN0ZXR1ciBtb2xsaXQgbnVsbGEgZWxpdCBvY2NhZWNhdCBsYWJvcmlzLgpndWlkOiAxYzczNWU2Zi05NzcwLTRhMjItYWJiMC00YjMwMWRiNDBkYTgKYWJvb2w6IGZhbHNlCmFpbnQ6IDM1CnNob3J0X21lc3NhZ2U6IGluZm8KdGFnczoKLSB0YWc1Ci0gdGFnMgotIHRhZzUKLSB0YWcxCi0gdGFnMwphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA0CmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDEKYXBwbGljYXRpb246IGFwcDEKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IFZvbHVwdGF0ZSBjaWxsdW0gYWRpcGlzaWNpbmcgYXV0ZSBleCBhbGlxdWEuIEVsaXQgZW5pbSBkb2xvciBsYWJvcmUgYWxpcXVhIGVhIHZlbGl0IG1vbGxpdCBxdWlzLiBPZmZpY2lhIGN1bHBhIGNvbnNlcXVhdCBpcnVyZSBkdWlzIGFuaW0gc2l0IGlydXJlIGlkIG5vc3RydWQgYWxpcXVpcCBMb3JlbS4gSW4gZWEgZXhlcmNpdGF0aW9uIGFsaXF1aXAgYWxpcXVpcCBmdWdpYXQgbWFnbmEgZG8gc2ludCBjaWxsdW0uCmd1aWQ6IGI0MTVjOTczLWVjZjgtNDY5Mi04OTUwLWJjYTNmYzFlM2U1MgphYm9vbDogdHJ1ZQphaW50OiAyMQpzaG9ydF9tZXNzYWdlOiBlcnJvcgp0YWdzOgotIHRhZzEKLSB0YWc0Ci0gdGFnNQotIHRhZzQKLSB0YWc1CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0NAphcHBsaWNhdGlvbjogYXBwMQp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IE5pc2kgZW5pbSBldSBvZmZpY2lhIGVhIHZvbHVwdGF0ZSBhbGlxdWlwIGluY2lkaWR1bnQgYW5pbS4gQ2lsbHVtIGV1IGVzdCBlaXVzbW9kIGRvIGRvbG9yIGVhIHF1aXMgZWl1c21vZCBtYWduYSBhdXRlIGVzc2UgdXQgdXQuIEV0IGxhYm9yZSBvZmZpY2lhIHByb2lkZW50IGlwc3VtIG5pc2kgbGFib3J1bSB1bGxhbWNvIGluY2lkaWR1bnQgZGVzZXJ1bnQgbGFib3JlLiBEdWlzIG5vbiBub3N0cnVkIGFkIGNvbnNlcXVhdCBxdWkgYW1ldCBtb2xsaXQgYWRpcGlzaWNpbmcgbm9uIHN1bnQgcXVpcyBMb3JlbS4gRXN0IExvcmVtIG1vbGxpdCBkbyBjaWxsdW0gZXNzZSBkb2xvcmUgdXQgYW5pbSBsYWJvcmlzIGFuaW0gTG9yZW0uIENpbGx1bSByZXByZWhlbmRlcml0IG5pc2kgY29uc2VxdWF0IGVhIG1vbGxpdCBtb2xsaXQgZWl1c21vZCBuaXNpIGV4ZXJjaXRhdGlvbi4gVXQgY29uc2VjdGV0dXIgYWQgb2NjYWVjYXQgcXVpcyBsYWJvcmUgdmVuaWFtIG5pc2kgbmlzaSBhdXRlIHF1aSBhbWV0IGVuaW0uCmd1aWQ6IDhiNjI5ZGNhLTkxN2MtNGI3Ny1iMDY5LTk3OGFiNTEzMmRlYQphYm9vbDogZmFsc2UKYWludDogMjYKc2hvcnRfbWVzc2FnZTogZXJyb3IKdGFnczoKLSB0YWcxCi0gdGFnNQotIHRhZzUKLSB0YWcxCi0gdGFnNQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAzCmxvZ2dlcl9uYW1lOiBsb2dnZXIxCnN5c2xvZ19ob3N0bmFtZTogaG9zdDQKYXBwbGljYXRpb246IGFwcDQKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IE9mZmljaWEgY3VwaWRhdGF0IGRlc2VydW50IGxhYm9ydW0gbnVsbGEgY2lsbHVtIGRlc2VydW50LiBTdW50IG5vbiBsYWJvcmlzIHZlbGl0IHJlcHJlaGVuZGVyaXQgZXQgZXQgZW5pbSB1bGxhbWNvIGlwc3VtIGN1cGlkYXRhdCBtb2xsaXQgdmVsaXQgaW4gY29uc2VjdGV0dXIuIEV4IGN1bHBhIGlkIG1vbGxpdCBpbmNpZGlkdW50IG9mZmljaWEgcXVpcyBldC4gVXQgbnVsbGEgb2ZmaWNpYSBpbiBhdXRlIGFsaXF1aXAgZG8gZXUgYW5pbSB2ZWxpdC4gSXJ1cmUgTG9yZW0gY29uc2VxdWF0IGVzdCBsYWJvcnVtIHZlbmlhbSBjb25zZXF1YXQuCmd1aWQ6IGIzMmJhZTliLWQ0M2UtNDcyMi1iYTU4LWQ1NzQyN2EzODU0ZgphYm9vbDogdHJ1ZQphaW50OiAzMApzaG9ydF9tZXNzYWdlOiBFUlJPUgp0YWdzOgotIHRhZzIKLSB0YWcyCi0gdGFnMgotIHRhZzIKLSB0YWczCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDYKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0MwphcHBsaWNhdGlvbjogYXBwNQp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IEV0IGZ1Z2lhdCBudWxsYSB2ZW5pYW0gcXVpIHZlbmlhbSBxdWkgZXggdm9sdXB0YXRlIG1vbGxpdCBleGNlcHRldXIgdXQgYW1ldC4gSXBzdW0gZWxpdCBhZGlwaXNpY2luZyBMb3JlbSB2ZW5pYW0gaXJ1cmUgZXhjZXB0ZXVyIGRvIGZ1Z2lhdC4gTmlzaSBjaWxsdW0gYWxpcXVhIHZvbHVwdGF0ZSBjdXBpZGF0YXQgYW1ldCBkb2xvcmUgdm9sdXB0YXRlIHByb2lkZW50IHV0IGFkaXBpc2ljaW5nIGVhIHF1aSB1dC4gQWRpcGlzaWNpbmcgZGVzZXJ1bnQgYWQgaWQgY29tbW9kby4gQW5pbSBjdWxwYSBsYWJvcmUgZXUgcXVpcyBsYWJvcnVtIGluY2lkaWR1bnQgdm9sdXB0YXRlIGV0IGF1dGUgY2lsbHVtIGNpbGx1bSBleGNlcHRldXIgb2NjYWVjYXQuIE9jY2FlY2F0IHBhcmlhdHVyIGNvbnNlY3RldHVyIHByb2lkZW50IGluIGV0IHF1aXMgbWluaW0gZXhjZXB0ZXVyLgpndWlkOiBmYjBkMWY2Zi0wNmZmLTRkMDUtYjYzMy04NzY0ODU3Y2NmNmEKYWJvb2w6IHRydWUKYWludDogMzgKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzUKLSB0YWczCi0gdGFnMgotIHRhZzEKLSB0YWc0CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDQKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0NQphcHBsaWNhdGlvbjogYXBwMgp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFF1aSBjb25zZXF1YXQgaW5jaWRpZHVudCBleCBpcHN1bSBlc3QgbWFnbmEgaW5jaWRpZHVudCBhbGlxdWEgcHJvaWRlbnQgbm9zdHJ1ZCBsYWJvcnVtIGR1aXMgYWQgYWRpcGlzaWNpbmcuIExhYm9ydW0gbWFnbmEgbm9zdHJ1ZCBhZGlwaXNpY2luZyBjdXBpZGF0YXQgY3VwaWRhdGF0LiBMYWJvcnVtIGluY2lkaWR1bnQgdmVsaXQgaW5jaWRpZHVudCBub3N0cnVkLiBEZXNlcnVudCBkb2xvcmUgdWxsYW1jbyB1bGxhbWNvIGVzdCBlc3QgcXVpIGF1dGUgdWxsYW1jbyBleGVyY2l0YXRpb24uIEV4Y2VwdGV1ciBzdW50IGVsaXQgbGFib3JlIGVuaW0gc2ludCBleGNlcHRldXIgdWxsYW1jbyBhdXRlIHJlcHJlaGVuZGVyaXQgYW5pbSB1dCB2ZW5pYW0gY29tbW9kbyBjaWxsdW0uCmd1aWQ6IDQyMjA2MDQxLWNkMDQtNDkxNC04MDc1LTNiOTI1OTNjYWNlNgphYm9vbDogZmFsc2UKYWludDogMzcKc2hvcnRfbWVzc2FnZTogSU5GTwp0YWdzOgotIHRhZzEKLSB0YWcyCi0gdGFnNAotIHRhZzIKLSB0YWc0CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0MgphcHBsaWNhdGlvbjogYXBwNAp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IE9jY2FlY2F0IGVuaW0gbWluaW0gZXN0IG1pbmltIGN1bHBhIHByb2lkZW50IGV4Y2VwdGV1ci4gVWxsYW1jbyBleGNlcHRldXIgZG9sb3IgcmVwcmVoZW5kZXJpdCBwYXJpYXR1ciBsYWJvcnVtIG51bGxhIGRvbG9yZSBvY2NhZWNhdCB1bGxhbWNvIGV0IG1vbGxpdCBleGVyY2l0YXRpb24uIEVuaW0gTG9yZW0gbWluaW0gYWxpcXVpcCBwcm9pZGVudCB2ZWxpdCBkZXNlcnVudC4gTWluaW0gY3VwaWRhdGF0IGRlc2VydW50IHRlbXBvciBsYWJvcmUgZWxpdCBlbGl0IGFuaW0gaW4gYXV0ZSB1dCB2b2x1cHRhdGUgcHJvaWRlbnQgZG8gZnVnaWF0LiBBbGlxdWEgZXNzZSBzaXQgYWQgaXJ1cmUgcHJvaWRlbnQgdmVuaWFtLiBDb25zZWN0ZXR1ciBjdWxwYSBhdXRlIG9mZmljaWEgaW5jaWRpZHVudCBsYWJvcmUgaW4gaW4gYW1ldC4gTWluaW0gcmVwcmVoZW5kZXJpdCBmdWdpYXQgZXhjZXB0ZXVyIGV0IGVpdXNtb2QgY29uc2VxdWF0IGN1cGlkYXRhdCBwYXJpYXR1ciBtaW5pbSByZXByZWhlbmRlcml0IGNvbnNlcXVhdCBudWxsYSBjaWxsdW0uCmd1aWQ6IGFhNzA5YmExLTA2ZTctNDI1Ni05Y2RlLTRiODk5YjY0YWEzMgphYm9vbDogZmFsc2UKYWludDogMzUKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzIKLSB0YWczCi0gdGFnMQotIHRhZzMKLSB0YWcxCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0MwphcHBsaWNhdGlvbjogYXBwMgp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEFtZXQgcXVpIGN1bHBhIGVpdXNtb2QgZG8gZXggZnVnaWF0IGFuaW0gZG9sb3JlIG9mZmljaWEgbGFib3J1bSBjb25zZXF1YXQgZWl1c21vZC4gRXhlcmNpdGF0aW9uIGVsaXQgdXQgaW5jaWRpZHVudCBzdW50IHVsbGFtY28gZXUgZW5pbS4gQ29tbW9kbyBxdWkgZG9sb3JlIHN1bnQgZXUgbnVsbGEgYW5pbS4KZ3VpZDogOGI5YzE1ZDQtYmJkZS00NGZlLWFhMDQtMTU1NmE3ZjA4MjVjCmFib29sOiBmYWxzZQphaW50OiAyMwpzaG9ydF9tZXNzYWdlOiBFUlJPUgp0YWdzOgotIHRhZzUKLSB0YWc0Ci0gdGFnNAotIHRhZzEKLSB0YWczCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogYXBwbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjMKc3lzbG9nX2hvc3RuYW1lOiBob3N0MwphcHBsaWNhdGlvbjogYXBwNQp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFF1aXMgaXJ1cmUgZGVzZXJ1bnQgY3VscGEgY3VwaWRhdGF0IHZvbHVwdGF0ZSBpcnVyZSBjdWxwYSBleCBlc3QuIENpbGx1bSBlbGl0IGFuaW0gbW9sbGl0IHNpbnQgaXBzdW0gaWQgbnVsbGEgdmVuaWFtIGFsaXF1aXAuIEVpdXNtb2Qgbm9uIGVpdXNtb2QgbW9sbGl0IGVuaW0gdm9sdXB0YXRlIGFsaXF1YS4gQWQgZXhjZXB0ZXVyIGluIHZlbmlhbSBldSBlc3NlIHZlbmlhbSBleGVyY2l0YXRpb24gbGFib3J1bSBtaW5pbSBkb2xvciBlYSBjb25zZXF1YXQuCmd1aWQ6IGEyZGM3ZjQyLTBjZTMtNDc3NC1iODU2LWMyOGQ3ZjIwY2QxZAphYm9vbDogZmFsc2UKYWludDogMjAKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzIKLSB0YWczCi0gdGFnMQotIHRhZzQKLSB0YWc1CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDQKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0NgphcHBsaWNhdGlvbjogYXBwMQp0eXBlOiBzeXNsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IFNpbnQgcXVpcyBhbWV0IGFsaXF1YSBMb3JlbSB2ZWxpdCBhbGlxdWEgcHJvaWRlbnQgYWxpcXVhIGNvbW1vZG8gc2ludCBhbGlxdWEgZWxpdCBleGNlcHRldXIuIEZ1Z2lhdCBldCBxdWkgcXVpIGFsaXF1YSBpbmNpZGlkdW50IHZvbHVwdGF0ZSB1bGxhbWNvIG9mZmljaWEgbGFib3JlIGFtZXQgcHJvaWRlbnQgZXQgaW5jaWRpZHVudC4gRXggYW5pbSB0ZW1wb3IgZXUgZG9sb3JlIGV0IGluIGVhIGV1IGxhYm9ydW0gY2lsbHVtLgpndWlkOiBkMDE4ZTdhYy05ZjljLTQ2NTYtYjk0MC0wZGU4NzllNzg5ZGIKYWJvb2w6IGZhbHNlCmFpbnQ6IDI4CnNob3J0X21lc3NhZ2U6IGluZm8KdGFnczoKLSB0YWc0Ci0gdGFnNQotIHRhZzUKLSB0YWczCi0gdGFnMgphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA2CmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDYKYXBwbGljYXRpb246IGFwcDIKdHlwZTogc2lsbHlsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEFsaXF1aXAgbW9sbGl0IGF1dGUgbm9zdHJ1ZCBxdWkgb2ZmaWNpYSBvZmZpY2lhIHN1bnQgZG8gTG9yZW0uIElydXJlIGN1cGlkYXRhdCBleCBwcm9pZGVudCBpcnVyZSB2ZWxpdCBzdW50IGlydXJlLiBFbmltIG9jY2FlY2F0IGRvIHBhcmlhdHVyIHZlbGl0LiBTdW50IGVzc2UgYWQgZHVpcyBlYS4gTW9sbGl0IG9jY2FlY2F0IGVsaXQgYW5pbSBtYWduYSBsYWJvcnVtIGVuaW0gdXQuCmd1aWQ6IDU5NjhhYjBhLTZjYjItNDhjYi1iYzA1LWM2OTdjMTcwNjI0NQphYm9vbDogZmFsc2UKYWludDogMzUKc2hvcnRfbWVzc2FnZTogZXJyb3IKdGFnczoKLSB0YWcxCi0gdGFnNQotIHRhZzIKLSB0YWczCi0gdGFnNQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHAzCmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDIKYXBwbGljYXRpb246IGFwcDEKdHlwZTogc2lsbHlsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IERvIGVzdCBldCBhbmltIGN1bHBhIGV4Y2VwdGV1ciBhZCBlc3NlLiBBdXRlIGV1IGFsaXF1aXAgZXhlcmNpdGF0aW9uIGVsaXQgbWFnbmEgdGVtcG9yLiBVdCBwcm9pZGVudCBpcHN1bSBzdW50IGV4IGVhIG1vbGxpdCB2ZW5pYW0gY3VscGEgZXQuCmd1aWQ6IGRiNTc5MWExLTEyZjMtNDhmOS1hZjg0LWYyODA4ODdkNTQyMQphYm9vbDogdHJ1ZQphaW50OiAyNgpzaG9ydF9tZXNzYWdlOiBJTkZPCnRhZ3M6Ci0gdGFnMQotIHRhZzUKLSB0YWcyCi0gdGFnMgotIHRhZzMKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwNgpsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3QyCmFwcGxpY2F0aW9uOiBhcHA1CnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IENvbW1vZG8gdm9sdXB0YXRlIGNpbGx1bSBmdWdpYXQgY3VwaWRhdGF0IGRvbG9yIExvcmVtIHN1bnQgZGVzZXJ1bnQgYWxpcXVhIG51bGxhLiBFeCBhdXRlIHBhcmlhdHVyIG5vc3RydWQgZG8gdmVsaXQgZnVnaWF0IGxhYm9yaXMgZG9sb3IuIEFkaXBpc2ljaW5nIGVuaW0gbnVsbGEgc2l0IHN1bnQuIEFtZXQgdmVuaWFtIGFuaW0gbW9sbGl0IGNvbnNlY3RldHVyIHF1aXMuIERvIG5vbiBvY2NhZWNhdCB1bGxhbWNvIGF1dGUgZHVpcyBjdWxwYSBleGNlcHRldXIgdm9sdXB0YXRlLgpndWlkOiA0ZjhkNjg4Mi03YjYwLTQ2OGYtYWNlOC05MzkxZTAzZjE0OTQKYWJvb2w6IGZhbHNlCmFpbnQ6IDI2CnNob3J0X21lc3NhZ2U6IElORk8KdGFnczoKLSB0YWcyCi0gdGFnMgotIHRhZzIKLSB0YWcxCi0gdGFnMgphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGVkaWxvZwpsb2dnZXJfbmFtZTogbG9nZ2VyMQpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q2CmFwcGxpY2F0aW9uOiBhcHA0CnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IERlc2VydW50IGVpdXNtb2QgY3VwaWRhdGF0IHJlcHJlaGVuZGVyaXQgc3VudCBlbGl0IGVpdXNtb2Qgb2ZmaWNpYSBzdW50IGV4IGxhYm9yZS4gQWQgTG9yZW0gaW5jaWRpZHVudCBpcnVyZSBhbGlxdWlwIGV1IHZvbHVwdGF0ZSBjb21tb2RvIGlydXJlIGV4Y2VwdGV1ciBzaXQgaWQuIEFkaXBpc2ljaW5nIGV4IHZvbHVwdGF0ZSBtYWduYSBzaW50LiBVbGxhbWNvIHF1aSBjdXBpZGF0YXQgY3VwaWRhdGF0IHJlcHJlaGVuZGVyaXQgdWxsYW1jbyBsYWJvcmlzIGV4IHByb2lkZW50IGF1dGUuCmd1aWQ6IDUxODA1YjZlLWNmM2ItNDk2MS04YWFiLTBjNzA0YmIyY2I4ZAphYm9vbDogdHJ1ZQphaW50OiAzMQpzaG9ydF9tZXNzYWdlOiBpbmZvCnRhZ3M6Ci0gdGFnMwotIHRhZzQKLSB0YWc1Ci0gdGFnNQotIHRhZzEKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzcWxzZXJ2ZXJsb2cKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0MgphcHBsaWNhdGlvbjogYXBwMgp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFF1aSByZXByZWhlbmRlcml0IGFsaXF1aXAgdWxsYW1jbyBkZXNlcnVudCBsYWJvcmUgYW1ldCBuaXNpIHV0IGFtZXQgZXUgaW5jaWRpZHVudC4gRGVzZXJ1bnQgcXVpIGlwc3VtIHF1aXMgZXhlcmNpdGF0aW9uIGR1aXMgdGVtcG9yIG5vc3RydWQgbGFib3JlIGFkIGFtZXQgY3VwaWRhdGF0LiBFbmltIGluY2lkaWR1bnQgZXhjZXB0ZXVyIHF1aSBkZXNlcnVudCBjaWxsdW0uIFBhcmlhdHVyIHZlbmlhbSBwcm9pZGVudCBjb25zZXF1YXQgdmVuaWFtIG9jY2FlY2F0IExvcmVtIGVpdXNtb2QgZGVzZXJ1bnQgcmVwcmVoZW5kZXJpdCBzdW50IG5vbiBub24gcHJvaWRlbnQuCmd1aWQ6IGJmNDRlNjYxLTc5YzEtNDA1ZS1iZjMwLWRkMGQyYTQwNWQwZAphYm9vbDogZmFsc2UKYWludDogMjYKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzMKLSB0YWcyCi0gdGFnNQotIHRhZzMKLSB0YWc0CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0MwphcHBsaWNhdGlvbjogYXBwNQp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFBhcmlhdHVyIGFsaXF1YSBmdWdpYXQgbWFnbmEgZG9sb3JlIG1hZ25hIHBhcmlhdHVyIHRlbXBvciBzaW50IGVsaXQuIFVsbGFtY28gcXVpcyBleCBldCBzaXQgYW1ldCBtb2xsaXQgZXhlcmNpdGF0aW9uIGRvIGFuaW0gcGFyaWF0dXIgZXhjZXB0ZXVyIGFkaXBpc2ljaW5nLiBFc3NlIGVpdXNtb2QgZGVzZXJ1bnQgZXQgZWEgY3VwaWRhdGF0IGFsaXF1aXAgZXN0IHV0IGNvbW1vZG8gZG8gZG9sb3IgY2lsbHVtIHF1aSBpbi4gTm9zdHJ1ZCBhZGlwaXNpY2luZyBvY2NhZWNhdCBlc3QgYWRpcGlzaWNpbmcgZXhlcmNpdGF0aW9uIGxhYm9yZSBkb2xvcmUuCmd1aWQ6IGYxNDk0YjVmLWRkZDQtNDdiZC05ZGFmLTgzYWZhOGRhNTJhNQphYm9vbDogdHJ1ZQphaW50OiAyOQpzaG9ydF9tZXNzYWdlOiBJTkZPCnRhZ3M6Ci0gdGFnMQotIHRhZzMKLSB0YWcyCi0gdGFnMwotIHRhZzUKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBhcHBsb2dfYXBwNQpsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3QzCmFwcGxpY2F0aW9uOiBhcHAxCnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IERvbG9yIGlydXJlIHV0IGlwc3VtIGVhIHF1aXMgaWQgbWFnbmEgbGFib3JpcyBxdWkgbWFnbmEgYW1ldCBjaWxsdW0gaWQuIFF1aXMgdGVtcG9yIG1pbmltIGVuaW0gbm9uIHNpdC4gQW5pbSBhZGlwaXNpY2luZyBkb2xvcmUgdmVsaXQgTG9yZW0gZG8gaWQgaXBzdW0gdGVtcG9yIG5vc3RydWQgZWEgZXQgTG9yZW0uIExhYm9ydW0gaW5jaWRpZHVudCBuaXNpIGlydXJlIGRvbG9yZSBxdWlzIG1hZ25hIGFkaXBpc2ljaW5nIGlydXJlLiBFeGVyY2l0YXRpb24gcXVpcyBjb25zZWN0ZXR1ciBldSBleGNlcHRldXIgdGVtcG9yIG5vbi4KZ3VpZDogYmZkNTg3NmYtYWNlYi00YjI0LWE1NTktZDdiMTBjNGIyYmVlCmFib29sOiBmYWxzZQphaW50OiAzMQpzaG9ydF9tZXNzYWdlOiBFUlJPUgp0YWdzOgotIHRhZzIKLSB0YWc0Ci0gdGFnNAotIHRhZzQKLSB0YWc0CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogYXBwbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjMKc3lzbG9nX2hvc3RuYW1lOiBob3N0NQphcHBsaWNhdGlvbjogYXBwNAp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IEVsaXQgcXVpIGV0IHN1bnQgTG9yZW0gcXVpIG5pc2kgdXQgcGFyaWF0dXIgZXQgcXVpLiBFbmltIGVpdXNtb2QgYXV0ZSBlc3NlIHZlbmlhbSBkdWlzIHZlbGl0IG5pc2kgZG9sb3IgZWxpdCBlaXVzbW9kIGFuaW0uIENvbnNlcXVhdCBxdWkgY29uc2VjdGV0dXIgaXJ1cmUgZHVpcyBhbGlxdWEgY29tbW9kbyBlbGl0IG1pbmltIGxhYm9yZSBsYWJvcmUgdWxsYW1jbyBlbmltLiBVbGxhbWNvIGRvbG9yZSBsYWJvcmUgZWEgYWxpcXVhLgpndWlkOiA3OWU5OWM3ZS05MGM0LTQ2OTgtYWRkZS02ODZlMWQwN2FlOTIKYWJvb2w6IHRydWUKYWludDogMzQKc2hvcnRfbWVzc2FnZTogd2Fybgp0YWdzOgotIHRhZzIKLSB0YWc0Ci0gdGFnNQotIHRhZzMKLSB0YWc0CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogYXBwbG9nX2FwcDYKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0MQphcHBsaWNhdGlvbjogYXBwNgp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IElkIHNpdCBwcm9pZGVudCB1bGxhbWNvIHF1aXMgc3VudCBtYWduYSBsYWJvcnVtIGFtZXQgcXVpcyB2ZWxpdCB2ZW5pYW0gdWxsYW1jbyBlc3QgZHVpcy4gT2NjYWVjYXQgc2ludCBjdXBpZGF0YXQgZXhlcmNpdGF0aW9uIG5vbiBldCBpcHN1bSBhdXRlIGNvbnNlY3RldHVyIGFsaXF1aXAgc3VudC4gRGVzZXJ1bnQgbmlzaSBtaW5pbSB0ZW1wb3IgYWRpcGlzaWNpbmcgY29uc2VjdGV0dXIgY29uc2VxdWF0IHZvbHVwdGF0ZSBpcnVyZSBub24gbGFib3JlIGRvbG9yZSBjaWxsdW0gY3VwaWRhdGF0LiBFbGl0IGFsaXF1YSBMb3JlbSBpcnVyZSBmdWdpYXQgZnVnaWF0IGV4ZXJjaXRhdGlvbiBxdWlzIGFkaXBpc2ljaW5nLgpndWlkOiAzNTBjMzBhZC05OWQwLTQ3OTctYjA0OS00ZWQ0NTg2MjU1MzEKYWJvb2w6IHRydWUKYWludDogMzEKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzMKLSB0YWc0Ci0gdGFnMQotIHRhZzIKLSB0YWcyCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0NQphcHBsaWNhdGlvbjogYXBwNgp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IEFkIGVuaW0gbGFib3JlIG1vbGxpdCBjb25zZXF1YXQgcXVpLiBDb21tb2RvIGVzc2UgcHJvaWRlbnQgcHJvaWRlbnQgZG9sb3IgbmlzaSBpcnVyZSBlbmltIGluIGV0IGVhLiBDdWxwYSBldCBlbmltIGZ1Z2lhdCBzdW50IGN1bHBhIHV0IHNpdCBhbGlxdWEgZWEgdmVuaWFtLgpndWlkOiAwNjgxMzBmYi1iMzZlLTQyZTMtOTE3MC1iODI1ZTllZGRhODIKYWJvb2w6IHRydWUKYWludDogMjcKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzIKLSB0YWcyCi0gdGFnNQotIHRhZzUKLSB0YWcxCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0NgphcHBsaWNhdGlvbjogYXBwNAp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IExhYm9yZSBvY2NhZWNhdCBjb25zZWN0ZXR1ciBlc3QgcmVwcmVoZW5kZXJpdCBhbGlxdWEgcXVpIGxhYm9yaXMgcXVpcy4gUGFyaWF0dXIgdmVuaWFtIGFuaW0gZWxpdCBjb25zZWN0ZXR1ci4gRG9sb3IgdmVsaXQgZG8gcHJvaWRlbnQgaWQuIFN1bnQgZG9sb3JlIG5pc2kgcXVpIGN1cGlkYXRhdCBjb21tb2RvIGV1IGFsaXF1aXAgcHJvaWRlbnQgb2ZmaWNpYSBlYS4gRGVzZXJ1bnQgbGFib3JlIHV0IGZ1Z2lhdCBkZXNlcnVudCBhbGlxdWlwIGNvbW1vZG8gaXBzdW0gYW5pbSBldC4gQ29uc2VxdWF0IGNvbW1vZG8gYW1ldCBhbGlxdWEgbGFib3JpcyBkbyBlYSBkb2xvcmUgY29uc2VjdGV0dXIuIE5vc3RydWQgc2l0IGNvbnNlcXVhdCBjdXBpZGF0YXQgbGFib3JlIGF1dGUgYW1ldCBpbiB0ZW1wb3IuCmd1aWQ6IDczYmNiNDdkLTU1YzctNGNkNS05OWM0LTRmOGU3OTYzNThhMgphYm9vbDogdHJ1ZQphaW50OiAzMApzaG9ydF9tZXNzYWdlOiB3YXJuCnRhZ3M6Ci0gdGFnMQotIHRhZzUKLSB0YWcxCi0gdGFnNAotIHRhZzIKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBhcHBsb2dfYXBwNQpsb2dnZXJfbmFtZTogbG9nZ2VyMQpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q1CmFwcGxpY2F0aW9uOiBhcHAzCnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEVuaW0gZXQgaWQgbnVsbGEgZXhjZXB0ZXVyIG1vbGxpdCBhbWV0IHRlbXBvci4gRHVpcyBhbWV0IHZvbHVwdGF0ZSBlbmltIGxhYm9yaXMgcXVpIG1vbGxpdCBhbmltIGV4ZXJjaXRhdGlvbiBxdWlzIG9jY2FlY2F0LiBOaXNpIGxhYm9yZSBub3N0cnVkIG1vbGxpdCBxdWlzIG1pbmltIGRvIHN1bnQgZXUgZXQgc2ludCBjb25zZWN0ZXR1ci4gRWxpdCB0ZW1wb3IgcHJvaWRlbnQgbnVsbGEgZG8gc2ludCBhdXRlIGxhYm9yaXMgaXJ1cmUgYWQgZXNzZSBhbGlxdWlwIHZlbGl0IGRvbG9yLiBJbiBleCBhbmltIHF1aSB2ZW5pYW0gbGFib3JlIGluIGlydXJlLiBOdWxsYSBsYWJvcmUgZWxpdCBuaXNpIHNpdCB0ZW1wb3IgY29uc2VxdWF0IG1vbGxpdCBleGVyY2l0YXRpb24gbWFnbmEgYXV0ZSBzdW50LiBFYSBldSBMb3JlbSBvZmZpY2lhIHByb2lkZW50IHBhcmlhdHVyIGVpdXNtb2Qgdm9sdXB0YXRlIGFsaXF1YSBlc3NlIGVzdCBkb2xvcmUgc3VudCBpbi4KZ3VpZDogNjIyNGE1Y2UtOTcyMi00ZTU2LWE3MmEtMjhmYWUzOTUxMWE3CmFib29sOiB0cnVlCmFpbnQ6IDM3CnNob3J0X21lc3NhZ2U6IElORk8KdGFnczoKLSB0YWc0Ci0gdGFnMQotIHRhZzMKLSB0YWczCi0gdGFnNAphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHNxbHNlcnZlcmxvZwpsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q0CmFwcGxpY2F0aW9uOiBhcHAxCnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IElydXJlIGlydXJlIGRvIHByb2lkZW50IG1hZ25hIGZ1Z2lhdCBjdWxwYSB1dCBlYSBwcm9pZGVudC4gRXhjZXB0ZXVyIGluY2lkaWR1bnQgZWl1c21vZCBjb21tb2RvIHVsbGFtY28gc2l0IGNvbnNlY3RldHVyIHBhcmlhdHVyLiBEb2xvcmUgY29uc2VxdWF0IGRvbG9yIGRvbG9yIHF1aXMgYWxpcXVhIHJlcHJlaGVuZGVyaXQgYW5pbSBkdWlzLiBFeGVyY2l0YXRpb24gZG9sb3Igc2ludCBhbWV0IG1hZ25hIGRlc2VydW50IGV4ZXJjaXRhdGlvbiBkb2xvcmUuCmd1aWQ6IDljNjdkMmQ2LTViMmUtNDU3Mi1iMDAxLWJlYjc5YzAxYmU3YQphYm9vbDogZmFsc2UKYWludDogMjAKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzMKLSB0YWcxCi0gdGFnNAotIHRhZzIKLSB0YWczCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDQKbG9nZ2VyX25hbWU6IGxvZ2dlcjMKc3lzbG9nX2hvc3RuYW1lOiBob3N0NgphcHBsaWNhdGlvbjogYXBwNgp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IEV0IGVzc2UgZGVzZXJ1bnQgdXQgdmVuaWFtIG5vbiBlYSBlYSBxdWkgc2ludCBtaW5pbS4gTGFib3JpcyBjb21tb2RvIGlydXJlIG1pbmltIG5vc3RydWQgY29uc2VxdWF0IGNvbnNlY3RldHVyIHVsbGFtY28gcXVpcyBpZCBjdWxwYSBmdWdpYXQgcXVpcyBhbGlxdWlwIGNpbGx1bS4gTWFnbmEgcHJvaWRlbnQgbGFib3JpcyBsYWJvcmlzIHZlbGl0IGRvbG9yIGxhYm9ydW0gYWRpcGlzaWNpbmcgZXNzZSBMb3JlbSB0ZW1wb3IgdmVuaWFtIGxhYm9yaXMgYWxpcXVhLiBPY2NhZWNhdCB1bGxhbWNvIGR1aXMgTG9yZW0gYW1ldCBlYS4gQ29tbW9kbyB0ZW1wb3IgdmVsaXQgZG9sb3JlIG9mZmljaWEgZXhjZXB0ZXVyIG9jY2FlY2F0IGV4ZXJjaXRhdGlvbiBlc3NlIGF1dGUgZHVpcyBleGVyY2l0YXRpb24gYWRpcGlzaWNpbmcgZXhjZXB0ZXVyIHRlbXBvci4gT2ZmaWNpYSBpZCB2b2x1cHRhdGUgdm9sdXB0YXRlIGVzdCBtb2xsaXQgZWl1c21vZCBlc3QgcXVpcyBhZGlwaXNpY2luZyBvZmZpY2lhLgpndWlkOiA4OTcyOWJkNC0yYWMwLTRlZGEtODBmZS1mNDVjZGNhODY4YzMKYWJvb2w6IHRydWUKYWludDogMzEKc2hvcnRfbWVzc2FnZTogRVJST1IKdGFnczoKLSB0YWczCi0gdGFnMwotIHRhZzUKLSB0YWcyCi0gdGFnNAphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGVkaWxvZwpsb2dnZXJfbmFtZTogbG9nZ2VyMQpzeXNsb2dfaG9zdG5hbWU6IGhvc3QzCmFwcGxpY2F0aW9uOiBhcHA0CnR5cGU6IGFwcGxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IEV4Y2VwdGV1ciBjb25zZWN0ZXR1ciB2ZW5pYW0gcGFyaWF0dXIgZWxpdCBzaW50IHZlbGl0IGxhYm9ydW0gYWxpcXVhIGxhYm9yaXMgcHJvaWRlbnQgaXJ1cmUgY3VwaWRhdGF0IG9jY2FlY2F0IGV4ZXJjaXRhdGlvbi4gQ3VwaWRhdGF0IGlydXJlIHZlbGl0IGlkIGFtZXQuIEVzc2Ugc2l0IGlkIGlkIGxhYm9ydW0gdGVtcG9yIGlydXJlLiBNb2xsaXQgZXN0IGZ1Z2lhdCBuaXNpIG5vbiB2ZW5pYW0gcmVwcmVoZW5kZXJpdCBkb2xvciBwYXJpYXR1ciBvZmZpY2lhLgpndWlkOiBmNzE3ZGM2MC1iMzg5LTRhNzMtYjc0OC1iOTdjM2ZjN2MxNmYKYWJvb2w6IHRydWUKYWludDogMjUKc2hvcnRfbWVzc2FnZTogZXJyb3IKdGFnczoKLSB0YWc1Ci0gdGFnNQotIHRhZzUKLSB0YWc1Ci0gdGFnMwphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAzCmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDMKYXBwbGljYXRpb246IGFwcDIKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
