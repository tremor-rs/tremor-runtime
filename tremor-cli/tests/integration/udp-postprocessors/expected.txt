YWJvdXQ6IFBhcmlhdHVyIG51bGxhIHRlbXBvciB2ZW5pYW0gY29uc2VjdGV0dXIgaW4gcHJvaWRlbnQgbGFib3JlIGNpbGx1bSBsYWJvcmUuCiAgUmVwcmVoZW5kZXJpdCBudWxsYSBtb2xsaXQgbGFib3JpcyBvZmZpY2lhIHRlbXBvciBxdWkgaWQgZG9sb3JlIGRvbG9yLiBFeGNlcHRldXIKICBtaW5pbSBzaXQgTG9yZW0gc3VudCBjaWxsdW0uIERvbG9yIGV4IGluIGFsaXF1YSBMb3JlbSBtaW5pbSBvZmZpY2lhIGNpbGx1bSBpbiBjb25zZXF1YXQKICBkb2xvciBjb25zZXF1YXQgcHJvaWRlbnQgbm9zdHJ1ZC4gRWEgcXVpcyB2ZW5pYW0gbWFnbmEgZXhlcmNpdGF0aW9uLiBMYWJvcmlzIGF1dGUKICBleGNlcHRldXIgZXhlcmNpdGF0aW9uIGlwc3VtIGRvIGRvIGluY2lkaWR1bnQgcXVpIHVsbGFtY28gZWxpdCB2ZWxpdCBsYWJvcmlzIGVzdAogIGluY2lkaWR1bnQuIEFsaXF1aXAgZHVpcyBjdXBpZGF0YXQgZGVzZXJ1bnQgY3VscGEuCmd1aWQ6IGE5NWJiOTI5LTI1NjctNDA2Ni04MDIzLThiZjUzMjY2NTEyMQphYm9vbDogZmFsc2UKYWludDogMzMKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzQKLSB0YWcxCi0gdGFnMgotIHRhZzEKLSB0YWc0CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3Fsc2VydmVybG9nCmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDUKYXBwbGljYXRpb246IGFwcDQKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IFZlbmlhbSB0ZW1wb3Igbm9uIHF1aSBldSBvZmZpY2lhLiBEbyBpZCBjdWxwYSBsYWJvcmUgbmlzaSBlc3QgYWxpcXVhIGV0LiBVdAogIGV4Y2VwdGV1ciBmdWdpYXQgbWluaW0gcXVpIHV0IGV4ZXJjaXRhdGlvbiB0ZW1wb3IgaW5jaWRpZHVudCBvZmZpY2lhIGV4Y2VwdGV1ciBlbGl0CiAgY3VscGEgdmVuaWFtIGVuaW0uIFVsbGFtY28gcXVpIG5vc3RydWQgYW1ldCBkb2xvcmUgcXVpIG1vbGxpdCBtYWduYSB2ZWxpdCBkZXNlcnVudAogIGxhYm9yaXMgcmVwcmVoZW5kZXJpdCB1bGxhbWNvIHZlbGl0IG5pc2kuIFN1bnQgdmVuaWFtIGVzc2Ugc2l0IGNvbnNlY3RldHVyIG5pc2kKICBzdW50IGVsaXQgc2ludC4gRWl1c21vZCBmdWdpYXQgY29uc2VjdGV0dXIgbnVsbGEgdXQgZHVpcyBwYXJpYXR1ciB0ZW1wb3IgdGVtcG9yCiAgcmVwcmVoZW5kZXJpdCBjb25zZXF1YXQgZWEuCmd1aWQ6IDZiZmZhZGY1LTU0YjMtNDUxZi05YWZhLTU1NWMxNDA4NmUzNgphYm9vbDogZmFsc2UKYWludDogMjMKc2hvcnRfbWVzc2FnZTogRVJST1IKdGFnczoKLSB0YWcyCi0gdGFnMgotIHRhZzIKLSB0YWc1Ci0gdGFnMQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA0CmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDYKYXBwbGljYXRpb246IGFwcDYKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEFsaXF1YSBhdXRlIGRvbG9yZSBvZmZpY2lhIG51bGxhIHZlbGl0IGNvbW1vZG8gY29tbW9kbyBtYWduYS4gVGVtcG9yIGNvbnNlY3RldHVyCiAgc3VudCBleCBsYWJvcmlzLiBVdCBkZXNlcnVudCBhZCBpcnVyZSBuaXNpIG1hZ25hIGxhYm9yaXMgdm9sdXB0YXRlIGVuaW0gYWxpcXVhIGFkCiAgbm9uLiBRdWlzIGRvbG9yIHF1aSBjdWxwYSBtYWduYSBxdWkgb2ZmaWNpYSBvY2NhZWNhdCBsYWJvcmUgYWRpcGlzaWNpbmcgbm9uIGNvbnNlY3RldHVyCiAgZXggcXVpLiBQYXJpYXR1ciBlc3QgdmVuaWFtIGFsaXF1YSBjaWxsdW0gc3VudCBxdWkgZXNzZSBzdW50IGV4IGRvbG9yZSBudWxsYSBldAogIGNpbGx1bSBlbGl0LgpndWlkOiA0NWM2NzhkNy04NzQ3LTQwNDUtOWQ3NS05NzdmMzRjZGVhODQKYWJvb2w6IGZhbHNlCmFpbnQ6IDIyCnNob3J0X21lc3NhZ2U6IElORk8KdGFnczoKLSB0YWc0Ci0gdGFnMwotIHRhZzIKLSB0YWczCi0gdGFnNQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHA0CmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDUKYXBwbGljYXRpb246IGFwcDQKdHlwZTogc2lsbHlsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEFkIGR1aXMgYXV0ZSBtYWduYSBleCBlc3Qgbm9zdHJ1ZCBsYWJvcmUgY3VscGEgc2l0IGRvbG9yZSBub3N0cnVkLiBWZWxpdCBleGNlcHRldXIKICBpZCBleGNlcHRldXIgY29tbW9kbyB1dCBwcm9pZGVudCBlYSBvZmZpY2lhIGRlc2VydW50IG1pbmltIHJlcHJlaGVuZGVyaXQgdXQgcHJvaWRlbnQuCiAgTW9sbGl0IGlkIGV1IGluY2lkaWR1bnQgZXggcXVpIG9mZmljaWEgbm9zdHJ1ZCBsYWJvcnVtLiBWb2x1cHRhdGUgb2NjYWVjYXQgc3VudAogIExvcmVtIG1hZ25hIGVpdXNtb2QgY3VscGEgcmVwcmVoZW5kZXJpdCBhdXRlIG1pbmltIHJlcHJlaGVuZGVyaXQuIE1vbGxpdCBjb21tb2RvCiAgdXQgZG8gZGVzZXJ1bnQgZXN0IGV1IGR1aXMgZWl1c21vZCBMb3JlbSBzaW50IGluY2lkaWR1bnQgZHVpcyBvY2NhZWNhdC4gU2l0IGRvbG9yCiAgZXQgbGFib3J1bSBhbmltIGV1IG51bGxhIHV0IGVzdC4KZ3VpZDogYTQwZjkxMzItNGZjNy00MzAwLWI4MjItYjJhZDAzNjYwMWIzCmFib29sOiBmYWxzZQphaW50OiAyMQpzaG9ydF9tZXNzYWdlOiBlcnJvcgp0YWdzOgotIHRhZzMKLSB0YWczCi0gdGFnNQotIHRhZzUKLSB0YWc1CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogYXBwbG9nX2FwcDQKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0MwphcHBsaWNhdGlvbjogYXBwMwp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IEluIGVzdCBzaW50IG5vbiBhbWV0IGVhIGN1bHBhIGVhIG5vc3RydWQgYXV0ZSBlaXVzbW9kIGF1dGUgYWxpcXVpcCBvZmZpY2lhLgogIERvbG9yIHVsbGFtY28gY3VwaWRhdGF0IGVzc2UgY29uc2VxdWF0IHBhcmlhdHVyIGlwc3VtIGFkaXBpc2ljaW5nIHNpdCBsYWJvcmlzIHZlbmlhbQogIHNpbnQgZWl1c21vZCBsYWJvcmlzLiBQYXJpYXR1ciBpcnVyZSBub24gZXNzZSBtYWduYSBleCBlYSBwYXJpYXR1ci4KZ3VpZDogM2Q5NGM3Y2EtZDVlOS00OTdjLWJmMTctOTljNGMzM2I0ZGU1CmFib29sOiB0cnVlCmFpbnQ6IDMwCnNob3J0X21lc3NhZ2U6IHdhcm4KdGFnczoKLSB0YWc0Ci0gdGFnMQotIHRhZzQKLSB0YWczCi0gdGFnMgphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA0CmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDYKYXBwbGljYXRpb246IGFwcDEKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEluY2lkaWR1bnQgY29uc2VjdGV0dXIgY29uc2VjdGV0dXIgcXVpIG1vbGxpdCBsYWJvcnVtIGlkIGFsaXF1YSBkdWlzIGluY2lkaWR1bnQKICBzaW50LiBBbWV0IHZvbHVwdGF0ZSBub3N0cnVkIG5pc2kgdWxsYW1jbyB2ZW5pYW0gbnVsbGEgY29uc2VjdGV0dXIgcXVpcyB2ZWxpdCB2ZWxpdAogIGZ1Z2lhdC4gSXBzdW0gYWxpcXVhIGxhYm9yaXMgbGFib3J1bSBhZGlwaXNpY2luZyBpcHN1bS4gQXV0ZSBjb25zZWN0ZXR1ciBuaXNpIGV4CiAgc2l0IGN1cGlkYXRhdCBlYSBkb2xvcmUgZG9sb3JlIGFkaXBpc2ljaW5nIGluIGRvbG9yZSBjaWxsdW0gZWxpdCBldS4gSW4gbGFib3J1bQogIGRvbG9yIGFuaW0gbGFib3JpcyBsYWJvcmlzIGVpdXNtb2Qgc2l0IG1vbGxpdCB2ZW5pYW0gZW5pbSBleCBkbyBvZmZpY2lhLiBMYWJvcmUKICBzdW50IG9jY2FlY2F0IGFtZXQgdXQgdmVsaXQgcGFyaWF0dXIuIExhYm9ydW0gZXhjZXB0ZXVyIGNvbW1vZG8gcmVwcmVoZW5kZXJpdCBhZAogIHF1aSBpZC4KZ3VpZDogNGU3MDIzNzctODFhYi00MGY5LTk4NTgtMTMzNGVlMjAxYmY3CmFib29sOiB0cnVlCmFpbnQ6IDIyCnNob3J0X21lc3NhZ2U6IElORk8KdGFnczoKLSB0YWc0Ci0gdGFnMQotIHRhZzIKLSB0YWcxCi0gdGFnNAphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA2CmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDEKYXBwbGljYXRpb246IGFwcDIKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEFsaXF1aXAgbm9zdHJ1ZCBhbWV0IGVuaW0gcmVwcmVoZW5kZXJpdC4gQXV0ZSBub24gZWxpdCBuaXNpIG1vbGxpdCBudWxsYSB1bGxhbWNvCiAgbWluaW0uIElkIGFtZXQgZW5pbSBpZCBkb2xvcmUgaXBzdW0uCmd1aWQ6IGI0MTVlMDIwLTA1ZDYtNGJhZi05ODYwLTA5OWFkYjJiNWRlNwphYm9vbDogdHJ1ZQphaW50OiAyMApzaG9ydF9tZXNzYWdlOiBJTkZPCnRhZ3M6Ci0gdGFnNQotIHRhZzQKLSB0YWc1Ci0gdGFnNQotIHRhZzUKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzcWxzZXJ2ZXJsb2cKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0NAphcHBsaWNhdGlvbjogYXBwMQp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IExhYm9yaXMgdGVtcG9yIGNpbGx1bSBjdWxwYSBpbiBleGVyY2l0YXRpb24gb2NjYWVjYXQgaXJ1cmUgYWQuIFRlbXBvciBtb2xsaXQKICBpbmNpZGlkdW50IHNpdCBhZCB1dCB2b2x1cHRhdGUgbGFib3JpcyBhbmltIG51bGxhIGN1cGlkYXRhdC4gT2NjYWVjYXQgbWluaW0gaW4gbnVsbGEKICB1dCBleGNlcHRldXIgZXggbm9uIGRvbG9yIGFkIGNpbGx1bSBjb21tb2RvLiBJbiBlaXVzbW9kIGFkIGZ1Z2lhdCBhZGlwaXNpY2luZyB1dAogIG5pc2kgZG9sb3JlIGV4ZXJjaXRhdGlvbiBjb25zZXF1YXQgbGFib3Jpcy4KZ3VpZDogMmMyMzQ3NDgtN2FlOS00N2Y1LTg5MzctMDlmYjFkOGE5NTc2CmFib29sOiBmYWxzZQphaW50OiAzNQpzaG9ydF9tZXNzYWdlOiBlcnJvcgp0YWdzOgotIHRhZzUKLSB0YWcxCi0gdGFnNQotIHRhZzIKLSB0YWczCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogYXBwbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0NQphcHBsaWNhdGlvbjogYXBwNAp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IFVsbGFtY28gcHJvaWRlbnQgZXQgY3VwaWRhdGF0IGNvbnNlcXVhdCBvY2NhZWNhdCBhbWV0IGlwc3VtIG51bGxhIHRlbXBvciBhbWV0CiAgZGVzZXJ1bnQgZG9sb3IuIFJlcHJlaGVuZGVyaXQgZWl1c21vZCBkdWlzIGNvbnNlY3RldHVyIGNvbnNlY3RldHVyIGVsaXQgaWQgbm9zdHJ1ZC4KICBTdW50IHJlcHJlaGVuZGVyaXQgc3VudCBmdWdpYXQgYWRpcGlzaWNpbmcgbmlzaSBxdWlzIExvcmVtIGF1dGUgY29uc2VxdWF0IGRvIGluCiAgZG9sb3IuIE1vbGxpdCBudWxsYSBxdWkgb2NjYWVjYXQgdm9sdXB0YXRlIG9jY2FlY2F0IG5pc2kgaWQgb2NjYWVjYXQgcmVwcmVoZW5kZXJpdAogIG51bGxhIHZvbHVwdGF0ZSBlaXVzbW9kLiBJcnVyZSBtYWduYSBhbGlxdWEgY3VwaWRhdGF0IHF1aSBub3N0cnVkIGN1bHBhIGxhYm9ydW0KICBkZXNlcnVudCBtb2xsaXQuCmd1aWQ6IGY4MTE5MjY5LTg1M2UtNDE1Ni05Y2Q3LTNkNzJjMTRlNTY5ZAphYm9vbDogZmFsc2UKYWludDogMzEKc2hvcnRfbWVzc2FnZTogRVJST1IKdGFnczoKLSB0YWc1Ci0gdGFnMwotIHRhZzQKLSB0YWcxCi0gdGFnMwphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHA2CmxvZ2dlcl9uYW1lOiBsb2dnZXIxCnN5c2xvZ19ob3N0bmFtZTogaG9zdDQKYXBwbGljYXRpb246IGFwcDUKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IENvbW1vZG8gdm9sdXB0YXRlIG9jY2FlY2F0IHRlbXBvciBzdW50IGlwc3VtIHRlbXBvciB1bGxhbWNvIG9mZmljaWEgc2l0IHByb2lkZW50LgogIE9mZmljaWEgc2ludCB2b2x1cHRhdGUgbGFib3J1bSBtb2xsaXQgdXQuIEVpdXNtb2QgZWl1c21vZCBpbiBkb2xvciByZXByZWhlbmRlcml0CiAgcGFyaWF0dXIgaW4gZHVpcyBjdWxwYSBsYWJvcmUgZGVzZXJ1bnQgbW9sbGl0IGNvbnNlY3RldHVyIG5vc3RydWQuIFF1aXMgbm9zdHJ1ZAogIHF1aSBhdXRlIHZlbGl0IG1vbGxpdCBtaW5pbSBhbGlxdWlwIHNpdC4gTm9zdHJ1ZCBpbiBkb2xvcmUgbmlzaSBkb2xvcmUgcGFyaWF0dXIKICBleCBwYXJpYXR1ciBhbGlxdWlwIG1vbGxpdCBjdWxwYSBhdXRlIHRlbXBvci4KZ3VpZDogNDRiZDgyMDMtMWU0My00ZWMzLTg2YWItNzJiYjE1MDMyZmRlCmFib29sOiBmYWxzZQphaW50OiAzNQpzaG9ydF9tZXNzYWdlOiBJTkZPCnRhZ3M6Ci0gdGFnMQotIHRhZzUKLSB0YWc1Ci0gdGFnMgotIHRhZzMKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwMwpsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q0CmFwcGxpY2F0aW9uOiBhcHA0CnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFZvbHVwdGF0ZSBjb21tb2RvIGFkIHF1aSBjaWxsdW0gYW1ldC4gQ2lsbHVtIGVhIG5pc2kgbm9uIGlydXJlIG9jY2FlY2F0IG1hZ25hCiAgc3VudCBwcm9pZGVudCBldC4gU2l0IGV0IGVpdXNtb2QgZXNzZSBxdWlzIGRvIGFkaXBpc2ljaW5nIGFsaXF1aXAgc2ludCBjaWxsdW0gbWFnbmEKICBxdWlzIGV4Y2VwdGV1ciBkdWlzIGRvbG9yLiBOdWxsYSBsYWJvcmUgY29tbW9kbyBkb2xvcmUgbm9uIGZ1Z2lhdCBjaWxsdW0gbm9zdHJ1ZAogIGVzdCB1bGxhbWNvIGFsaXF1aXAgcXVpLgpndWlkOiA2NDdmMmZkMC1lNjkzLTRjNGUtOGI5MC04M2YxZWI2OGM4ODMKYWJvb2w6IHRydWUKYWludDogMjYKc2hvcnRfbWVzc2FnZTogRVJST1IKdGFnczoKLSB0YWc0Ci0gdGFnMwotIHRhZzUKLSB0YWczCi0gdGFnNAphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHA0CmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDMKYXBwbGljYXRpb246IGFwcDMKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEVzc2UgZnVnaWF0IGNvbnNlY3RldHVyIGZ1Z2lhdCBwYXJpYXR1ciBjaWxsdW0gZGVzZXJ1bnQgcHJvaWRlbnQgZXNzZSBxdWlzCiAgY29tbW9kbyBjb25zZXF1YXQgcGFyaWF0dXIgbWluaW0uIFVsbGFtY28gaXJ1cmUgb2ZmaWNpYSBlbGl0IG1hZ25hIGV4Y2VwdGV1ciB0ZW1wb3IKICBxdWlzIGV4IExvcmVtIHJlcHJlaGVuZGVyaXQgc3VudC4gQ3VscGEgaW4gbnVsbGEgcGFyaWF0dXIgZXhjZXB0ZXVyIGVpdXNtb2QgZG8gaWQKICBkb2xvcmUgc2ludCBub24gc2l0LiBBZCBsYWJvcnVtIGVuaW0gbW9sbGl0IHNpdCBlYSBlYS4gVmVsaXQgcHJvaWRlbnQgY29uc2VjdGV0dXIKICBpZCBlbmltIHF1aXMgTG9yZW0gZXQgaXBzdW0gZXhlcmNpdGF0aW9uIGV4Y2VwdGV1ciBjb21tb2RvIGFkIGN1cGlkYXRhdC4KZ3VpZDogNGE5ZTUyZjktMGEwMS00N2MyLTg4M2ItYzQ3ZTU4Zjg2ZjFmCmFib29sOiB0cnVlCmFpbnQ6IDMyCnNob3J0X21lc3NhZ2U6IElORk8KdGFnczoKLSB0YWcxCi0gdGFnNAotIHRhZzQKLSB0YWc1Ci0gdGFnMQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAzCmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDEKYXBwbGljYXRpb246IGFwcDIKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IE51bGxhIGxhYm9yaXMgZnVnaWF0IGRvIGZ1Z2lhdC4gQXV0ZSBtb2xsaXQgcGFyaWF0dXIgbm9uIG1vbGxpdCBhdXRlIGV4Y2VwdGV1cgogIGVzc2UuIENvbnNlY3RldHVyIHBhcmlhdHVyIGNvbnNlY3RldHVyIHByb2lkZW50IGRvIGN1cGlkYXRhdCBjb21tb2RvIGxhYm9yZSBzaW50CiAgbmlzaSBldS4gU3VudCBxdWkgYWxpcXVhIG1hZ25hIGRvbG9yIHNpbnQgZHVpcyBldCBhbWV0IGVuaW0gbWFnbmEgaXBzdW0uIE9jY2FlY2F0CiAgc2ludCBsYWJvcmUgcmVwcmVoZW5kZXJpdCBpZCBwYXJpYXR1ciBhbGlxdWlwLgpndWlkOiAyOTg3MTlhYi03OWFmLTQ4NjUtOTg1YS00OTRlMGExZTIwMmEKYWJvb2w6IHRydWUKYWludDogMzgKc2hvcnRfbWVzc2FnZTogZXJyb3IKdGFnczoKLSB0YWcyCi0gdGFnMwotIHRhZzMKLSB0YWcxCi0gdGFnMwphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAzCmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDYKYXBwbGljYXRpb246IGFwcDUKdHlwZTogc2lsbHlsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IElkIGNvbnNlY3RldHVyIExvcmVtIG5vc3RydWQgbW9sbGl0IGFkIGFkaXBpc2ljaW5nIGxhYm9yZSB2b2x1cHRhdGUgbWFnbmEgb2ZmaWNpYQogIHVsbGFtY28gbm9zdHJ1ZCBwcm9pZGVudC4gRG9sb3IgZXQgYWxpcXVhIHJlcHJlaGVuZGVyaXQgZW5pbSBhbmltIGV1IHZvbHVwdGF0ZSBkb2xvcgogIGN1cGlkYXRhdCBhZC4gVWxsYW1jbyBjb21tb2RvIG5pc2kgaXBzdW0gc2ludCB2ZWxpdC4KZ3VpZDogZTJjODk5MDgtY2RmOS00OTk5LTgwZGUtZjlhMjdkNDQwYjU3CmFib29sOiBmYWxzZQphaW50OiAzOApzaG9ydF9tZXNzYWdlOiBJTkZPCnRhZ3M6Ci0gdGFnNQotIHRhZzIKLSB0YWczCi0gdGFnNAotIHRhZzMKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwMwpsb2dnZXJfbmFtZTogbG9nZ2VyMgpzeXNsb2dfaG9zdG5hbWU6IGhvc3QyCmFwcGxpY2F0aW9uOiBhcHAyCnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IE51bGxhIGVpdXNtb2QgbnVsbGEgZXN0IG1pbmltIHF1aSBudWxsYSBpbmNpZGlkdW50IHBhcmlhdHVyIHV0IHZvbHVwdGF0ZSBzaW50CiAgaW5jaWRpZHVudCBwcm9pZGVudC4gUXVpIGVuaW0gY2lsbHVtIGN1cGlkYXRhdCBvY2NhZWNhdCBsYWJvcmUgYWxpcXVpcCBMb3JlbSBwcm9pZGVudAogIG9mZmljaWEgc2ludC4gVXQgcHJvaWRlbnQgcXVpcyBlbGl0IGV4IGRvIGxhYm9yaXMgbWFnbmEgdWxsYW1jbyBpcnVyZSBMb3JlbS4KZ3VpZDogNDk1ZWVlZGMtN2JlYS00MzRkLTk3NmUtNTk4MmU3MTM0MDlhCmFib29sOiBmYWxzZQphaW50OiA0MApzaG9ydF9tZXNzYWdlOiBFUlJPUgp0YWdzOgotIHRhZzEKLSB0YWczCi0gdGFnNQotIHRhZzEKLSB0YWc0CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDYKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0MQphcHBsaWNhdGlvbjogYXBwMwp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IEZ1Z2lhdCB2b2x1cHRhdGUgTG9yZW0gaXJ1cmUgbmlzaS4gQXV0ZSBzaXQgZXhlcmNpdGF0aW9uIHF1aSB1bGxhbWNvLiBNYWduYQogIGRvIHByb2lkZW50IHN1bnQgZXNzZSBhbWV0IHZlbGl0IHF1aSB1dCBtaW5pbSBlbGl0IGRvbG9yZSBlaXVzbW9kIHZvbHVwdGF0ZS4gQWxpcXVhCiAgbWFnbmEgZXN0IGFkaXBpc2ljaW5nIGF1dGUgZXUgcmVwcmVoZW5kZXJpdCBpbiBzaW50IGV1IHVsbGFtY28gbWFnbmEgaWQgbGFib3J1bQogIGlydXJlLiBWZWxpdCBhbmltIGR1aXMgZG9sb3JlIGRvbG9yZSBlc3QgbGFib3J1bSBleGVyY2l0YXRpb24gaW4gaXBzdW0uCmd1aWQ6IDU1N2YwMGU2LTA3MjYtNGVlNS1iYTNmLTVhMjU3MzkzYTkyZQphYm9vbDogZmFsc2UKYWludDogMzYKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzQKLSB0YWc1Ci0gdGFnMgotIHRhZzMKLSB0YWc1CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0NgphcHBsaWNhdGlvbjogYXBwNgp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IE5pc2kgdXQgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgcGFyaWF0dXIgbGFib3JlIG9jY2FlY2F0LiBFbmltIHRlbXBvciBldCBvY2NhZWNhdAogIHVsbGFtY28gZGVzZXJ1bnQgdmVsaXQgY3VwaWRhdGF0IGFkaXBpc2ljaW5nIHByb2lkZW50LiBSZXByZWhlbmRlcml0IG5vbiBpbmNpZGlkdW50CiAgdXQgYWRpcGlzaWNpbmcgZG8gY29tbW9kbyBsYWJvcmlzIGVuaW0gbW9sbGl0LiBMYWJvcmlzIG1pbmltIG1hZ25hIGVuaW0gbGFib3JlIG1pbmltCiAgc2ludCBleCBpbmNpZGlkdW50IHZvbHVwdGF0ZSBjb25zZXF1YXQgZXN0IGV4ZXJjaXRhdGlvbiBkbyBvY2NhZWNhdC4KZ3VpZDogYjY0ZTJmMTEtNmIxNC00ZDYzLTgxMTUtYjBhYTBlMzYxYTEyCmFib29sOiBmYWxzZQphaW50OiAyNApzaG9ydF9tZXNzYWdlOiBJTkZPCnRhZ3M6Ci0gdGFnMgotIHRhZzEKLSB0YWcxCi0gdGFnMwotIHRhZzUKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwNgpsb2dnZXJfbmFtZTogbG9nZ2VyMQpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q2CmFwcGxpY2F0aW9uOiBhcHA1CnR5cGU6IGFwcGxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IE9mZmljaWEgZXQgaW5jaWRpZHVudCBwcm9pZGVudCBhbGlxdWlwIGFuaW0gaXJ1cmUuIER1aXMgbWFnbmEgZHVpcyBkb2xvcmUgaXJ1cmUKICBub3N0cnVkLiBTaXQgY3VwaWRhdGF0IGV4Y2VwdGV1ciBsYWJvcmlzIGRvIGN1bHBhIG1hZ25hLiBQcm9pZGVudCBuaXNpIHZlbGl0IGFuaW0KICBhbGlxdWEgYWRpcGlzaWNpbmcgZHVpcy4KZ3VpZDogNjBlZGJlMWItODg5MC00ZTM2LThlMDgtZmM4Zjk0YzdhNDBjCmFib29sOiB0cnVlCmFpbnQ6IDM1CnNob3J0X21lc3NhZ2U6IGluZm8KdGFnczoKLSB0YWcyCi0gdGFnMwotIHRhZzIKLSB0YWczCi0gdGFnNQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAzCmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDIKYXBwbGljYXRpb246IGFwcDIKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEN1cGlkYXRhdCBxdWlzIGVzc2UgZXhlcmNpdGF0aW9uIGVzc2UgcHJvaWRlbnQgZXhlcmNpdGF0aW9uIGZ1Z2lhdCBhZGlwaXNpY2luZwogIGVzdCBwcm9pZGVudCBhZCB1bGxhbWNvLiBJbiBuaXNpIHByb2lkZW50IGR1aXMgbGFib3JlIGN1cGlkYXRhdCByZXByZWhlbmRlcml0IHJlcHJlaGVuZGVyaXQKICBxdWlzIG1vbGxpdC4gVWxsYW1jbyBjdXBpZGF0YXQgbm9zdHJ1ZCBldSBhbGlxdWlwIG9mZmljaWEgcXVpIHRlbXBvci4gRGVzZXJ1bnQgZXgKICBzdW50IGF1dGUgZXNzZSByZXByZWhlbmRlcml0LiBTdW50IGV1IGVsaXQgYWxpcXVhIHF1aXMgdWxsYW1jbyBvY2NhZWNhdCBlc3QgaW5jaWRpZHVudAogIGlydXJlIGRvbG9yZS4gSW5jaWRpZHVudCBMb3JlbSBwYXJpYXR1ciB2ZWxpdCB0ZW1wb3IgaWQgZHVpcyBleGNlcHRldXIuIE9jY2FlY2F0CiAgZXhlcmNpdGF0aW9uIHJlcHJlaGVuZGVyaXQgYW1ldCBlaXVzbW9kIGN1bHBhIGluY2lkaWR1bnQgc3VudCBxdWkgZXN0LgpndWlkOiA2YzIxYWNmZi05ODlmLTQ5MzAtYWU0MS03MTRjMjJiOWI2MzAKYWJvb2w6IGZhbHNlCmFpbnQ6IDMxCnNob3J0X21lc3NhZ2U6IHdhcm4KdGFnczoKLSB0YWc1Ci0gdGFnMwotIHRhZzIKLSB0YWcyCi0gdGFnNQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAzCmxvZ2dlcl9uYW1lOiBsb2dnZXIxCnN5c2xvZ19ob3N0bmFtZTogaG9zdDEKYXBwbGljYXRpb246IGFwcDMKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEVzdCBldSBhbGlxdWEgZG9sb3JlIGVhIGFtZXQgaWQgZXggY29tbW9kbyBlc3QgbGFib3J1bSBpZCBjdXBpZGF0YXQgY2lsbHVtCiAgbGFib3Jpcy4gTWFnbmEgZXhlcmNpdGF0aW9uIGN1cGlkYXRhdCBjb21tb2RvIGVhIGFsaXF1aXAgZWxpdCB2ZW5pYW0gY3VwaWRhdGF0IG9mZmljaWEKICBjb25zZWN0ZXR1ciBhZCBleGVyY2l0YXRpb24gZWl1c21vZCBlaXVzbW9kLiBBbGlxdWEgZXN0IGV0IGFkIGFkaXBpc2ljaW5nIG5pc2kuCmd1aWQ6IGFlMTk2YTJiLTZhYWQtNGE3MC04ZmJkLTE5NTJiNTUwZDdlZQphYm9vbDogZmFsc2UKYWludDogMzgKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzEKLSB0YWcxCi0gdGFnMQotIHRhZzMKLSB0YWc1CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogZWRpbG9nCmxvZ2dlcl9uYW1lOiBsb2dnZXIxCnN5c2xvZ19ob3N0bmFtZTogaG9zdDYKYXBwbGljYXRpb246IGFwcDYKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEFsaXF1YSBlYSB1dCBjdXBpZGF0YXQgY3VscGEgZG9sb3IgaXJ1cmUgYWxpcXVpcCBtYWduYSByZXByZWhlbmRlcml0LiBDb21tb2RvCiAgbnVsbGEgbGFib3JlIGRvbG9yIHVsbGFtY28gY3VwaWRhdGF0IGN1cGlkYXRhdCBzdW50IGFuaW0gcHJvaWRlbnQuIEZ1Z2lhdCBpcnVyZQogIG9jY2FlY2F0IGRlc2VydW50IGN1bHBhLgpndWlkOiAzM2IzY2Y5Yy04MzQzLTRkZmUtOTk5MS1jNWE1M2U1OTYyYTMKYWJvb2w6IHRydWUKYWludDogMjUKc2hvcnRfbWVzc2FnZTogZXJyb3IKdGFnczoKLSB0YWcyCi0gdGFnNQotIHRhZzQKLSB0YWc0Ci0gdGFnMwphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHA0CmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDMKYXBwbGljYXRpb246IGFwcDQKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IE9mZmljaWEgYWRpcGlzaWNpbmcgY3VscGEgYWRpcGlzaWNpbmcgcXVpcyBtYWduYSBpcHN1bSBzdW50IGR1aXMgZGVzZXJ1bnQgbnVsbGEKICBpbmNpZGlkdW50IGVhIHRlbXBvciBzdW50LiBDdWxwYSBxdWkgZG9sb3JlIG1hZ25hIGN1bHBhIGxhYm9yZSBjaWxsdW0gb2NjYWVjYXQgc3VudAogIG5vc3RydWQuIFZlbmlhbSBub3N0cnVkIGN1bHBhIGVuaW0gdm9sdXB0YXRlIHZlbmlhbSBkZXNlcnVudCBsYWJvcmUgbW9sbGl0IG5vc3RydWQKICBkZXNlcnVudCBkbyBjdXBpZGF0YXQgbmlzaSBjdWxwYS4gRXUgb2ZmaWNpYSBvY2NhZWNhdCBzaW50IGNvbW1vZG8gZG9sb3JlIGNvbnNlY3RldHVyCiAgbm9zdHJ1ZCBjaWxsdW0gdm9sdXB0YXRlIHNpbnQgbm9zdHJ1ZCBleCBsYWJvcmlzIGVpdXNtb2QuCmd1aWQ6IGUyOGE5NDMyLTJhYTItNDQ1MS1iMjhkLWRkMjAyYTQ0NzQzYwphYm9vbDogdHJ1ZQphaW50OiAyNgpzaG9ydF9tZXNzYWdlOiBJTkZPCnRhZ3M6Ci0gdGFnNAotIHRhZzIKLSB0YWc1Ci0gdGFnMwotIHRhZzIKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBlZGlsb2cKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0MwphcHBsaWNhdGlvbjogYXBwNgp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IFF1aXMgb2NjYWVjYXQgY29uc2VjdGV0dXIgY3VwaWRhdGF0IExvcmVtLiBRdWlzIG9mZmljaWEgY29uc2VxdWF0IGNvbW1vZG8gZXNzZQogIGV4ZXJjaXRhdGlvbiBzaW50IHByb2lkZW50IGVpdXNtb2QgZXN0IGlydXJlIGV0LiBRdWkgZWEgZXN0IG5vbiBtb2xsaXQgZXN0LiBDaWxsdW0KICBjdXBpZGF0YXQgY29uc2VxdWF0IHZvbHVwdGF0ZSBlc3NlLgpndWlkOiBjZDgzYWM4Zi04ZDBkLTQxYWEtYTcxYi1kZDE2NGM0ZTk1MGUKYWJvb2w6IGZhbHNlCmFpbnQ6IDMyCnNob3J0X21lc3NhZ2U6IHdhcm4KdGFnczoKLSB0YWc0Ci0gdGFnMwotIHRhZzIKLSB0YWc0Ci0gdGFnNQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA2CmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDUKYXBwbGljYXRpb246IGFwcDIKdHlwZTogc2lsbHlsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IE1hZ25hIGlydXJlIGV0IGR1aXMgbGFib3J1bSBleGNlcHRldXIgY3VwaWRhdGF0IGV0IGF1dGUgcmVwcmVoZW5kZXJpdCB0ZW1wb3IKICBhbWV0IG5pc2kgZW5pbS4gTGFib3J1bSBjaWxsdW0gZWEgYW1ldCB2ZW5pYW0gZW5pbSB2b2x1cHRhdGUgdmVsaXQgb2NjYWVjYXQgZG8gbWFnbmEKICBlbGl0IGN1bHBhIGN1bHBhLiBOb24gYWQgcmVwcmVoZW5kZXJpdCBjdXBpZGF0YXQgZW5pbSBsYWJvcmUgbmlzaSBhZCBpZCBjb25zZXF1YXQKICBhZGlwaXNpY2luZyBjb25zZWN0ZXR1ciBpcHN1bSBjb25zZXF1YXQuIENvbW1vZG8gbWluaW0gcXVpcyBjdWxwYSB2ZW5pYW0gdGVtcG9yCiAgYWxpcXVpcCBpbiBhZGlwaXNpY2luZyBsYWJvcmlzIG1hZ25hIGZ1Z2lhdC4KZ3VpZDogNWVhYzI5ZjQtZWRlMC00ZjhjLWJkNmMtM2FkZGQ1ZTVkMDcwCmFib29sOiBmYWxzZQphaW50OiAzNwpzaG9ydF9tZXNzYWdlOiBJTkZPCnRhZ3M6Ci0gdGFnMQotIHRhZzUKLSB0YWczCi0gdGFnMgotIHRhZzQKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwMwpsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3QxCmFwcGxpY2F0aW9uOiBhcHAzCnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IElkIGN1cGlkYXRhdCBjb25zZWN0ZXR1ciBkdWlzIHNpbnQgYXV0ZSBvY2NhZWNhdCBlYSBpZCBxdWlzLiBNYWduYSBxdWkgZXhjZXB0ZXVyCiAgZXNzZSBpcHN1bSBldS4gU3VudCBldSB2ZWxpdCBxdWkgbnVsbGEgZG8gaWQgYWxpcXVhIHV0LiBBbGlxdWEgaXJ1cmUgZXhlcmNpdGF0aW9uCiAgcXVpIGNvbnNlY3RldHVyIGlwc3VtIGRlc2VydW50LiBDb25zZXF1YXQgbGFib3JlIGNvbnNlcXVhdCBpcnVyZSBpbmNpZGlkdW50IHNpdAogIHZlbmlhbSBpcnVyZSBldCB0ZW1wb3IgbWFnbmEgZXggTG9yZW0uIEFtZXQgbm9uIGRlc2VydW50IHF1aXMgZnVnaWF0IGFkaXBpc2ljaW5nCiAgZWl1c21vZCBhbWV0IGVuaW0gc3VudCBkZXNlcnVudCBpZCBhbmltIG1pbmltLgpndWlkOiBiOWU2MGU5Mi1lZDg3LTRhMGYtYWM1Ni1hNjU3Yjc3NjUzODMKYWJvb2w6IGZhbHNlCmFpbnQ6IDI5CnNob3J0X21lc3NhZ2U6IHdhcm4KdGFnczoKLSB0YWc1Ci0gdGFnNAotIHRhZzIKLSB0YWc0Ci0gdGFnMwphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAxCmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDMKYXBwbGljYXRpb246IGFwcDMKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IE9mZmljaWEgZXhjZXB0ZXVyIGVhIHV0IGVzdCBwcm9pZGVudCBpbiBldSBzdW50IGR1aXMuIERvIGF1dGUgbW9sbGl0IGFkIGRvbG9yZQogIG5vc3RydWQgdm9sdXB0YXRlIGlwc3VtIExvcmVtLiBOaXNpIGNvbW1vZG8gZXUgZXN0IGFsaXF1aXAgdGVtcG9yLiBSZXByZWhlbmRlcml0CiAgcGFyaWF0dXIgYWxpcXVpcCByZXByZWhlbmRlcml0IGlkIHByb2lkZW50IExvcmVtIGRvIGVpdXNtb2QuIElkIG5pc2kgdmVsaXQgbWluaW0KICBzdW50IG51bGxhIHV0IHN1bnQgZGVzZXJ1bnQgc3VudCBxdWkgaW4uCmd1aWQ6IDY2OTVkN2Y5LTc4YzQtNDVjYy05YzhiLThiOTU4Y2RmMDE0YgphYm9vbDogdHJ1ZQphaW50OiAzNwpzaG9ydF9tZXNzYWdlOiBlcnJvcgp0YWdzOgotIHRhZzQKLSB0YWczCi0gdGFnMgotIHRhZzEKLSB0YWc1CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogYXBwbG9nX2FwcDMKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0NAphcHBsaWNhdGlvbjogYXBwMwp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IENvbnNlcXVhdCBjdXBpZGF0YXQgbGFib3JlIGFkIGVzc2UgaWQgZXN0IGluY2lkaWR1bnQgaWQgZW5pbSBjb21tb2RvIHJlcHJlaGVuZGVyaXQKICBhbGlxdWlwIGRvbG9yZS4gRG9sb3JlIGVzc2Ugb2NjYWVjYXQgZWEgaW4gbGFib3JpcyB0ZW1wb3IgcXVpIGVpdXNtb2QgY3VscGEgbWluaW0KICBpcnVyZSBkby4gQWxpcXVhIG1vbGxpdCBwcm9pZGVudCBjb25zZXF1YXQgc2l0IGlwc3VtLiBFc3QgZXN0IGlkIExvcmVtIGFsaXF1YSBkZXNlcnVudC4KICBBbGlxdWEgbGFib3J1bSBMb3JlbSBkZXNlcnVudCBjaWxsdW0gYXV0ZSBhbWV0LgpndWlkOiBlZjJmOWU3MC1lZWQ1LTRkZjItYWY1OC00ZjM5OGVlZmNjM2IKYWJvb2w6IHRydWUKYWludDogMjkKc2hvcnRfbWVzc2FnZTogd2Fybgp0YWdzOgotIHRhZzEKLSB0YWczCi0gdGFnMQotIHRhZzMKLSB0YWcxCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDMKbG9nZ2VyX25hbWU6IGxvZ2dlcjMKc3lzbG9nX2hvc3RuYW1lOiBob3N0NQphcHBsaWNhdGlvbjogYXBwMwp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IEFuaW0gbGFib3J1bSBhbGlxdWlwIGVpdXNtb2Qgb2ZmaWNpYSB2ZWxpdCBleGVyY2l0YXRpb24gaXBzdW0gcGFyaWF0dXIgZG9sb3IKICBjdWxwYSBjb25zZWN0ZXR1ciBpcnVyZSBuaXNpIGN1bHBhLiBTaW50IGluY2lkaWR1bnQgdGVtcG9yIGVhIGFsaXF1YSBxdWlzIG1pbmltCiAgaXJ1cmUgZG8gc3VudCBuaXNpIGFuaW0gcXVpcyByZXByZWhlbmRlcml0IG51bGxhLiBBdXRlIHRlbXBvciBvZmZpY2lhIG1hZ25hIGVsaXQKICBlbGl0LiBFc3QgcXVpIHJlcHJlaGVuZGVyaXQgdGVtcG9yIGNvbnNlY3RldHVyIHByb2lkZW50IGVuaW0uIEFuaW0gZG8gbGFib3JpcyB1bGxhbWNvCiAgbm9uIG5vc3RydWQgaW4gaW4gYWRpcGlzaWNpbmcgdGVtcG9yIGNvbnNlcXVhdCBlbmltIGVzdCBkbyBwYXJpYXR1ci4gQ3VscGEgZHVpcwogIGNpbGx1bSBtb2xsaXQgZHVpcyBMb3JlbS4gRXNzZSBsYWJvcmUgZXN0IGN1bHBhIHZlbGl0LgpndWlkOiA5NjBmOWY0Yi0xM2VlLTQzMzUtOWRmOS1hY2VkZjY2YTIzNTEKYWJvb2w6IGZhbHNlCmFpbnQ6IDI5CnNob3J0X21lc3NhZ2U6IGluZm8KdGFnczoKLSB0YWczCi0gdGFnMgotIHRhZzIKLSB0YWc1Ci0gdGFnMgphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHNxbHNlcnZlcmxvZwpsb2dnZXJfbmFtZTogbG9nZ2VyMgpzeXNsb2dfaG9zdG5hbWU6IGhvc3QyCmFwcGxpY2F0aW9uOiBhcHAyCnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFRlbXBvciBsYWJvcmUgZW5pbSB2ZWxpdCBpcnVyZSBkb2xvcmUgYW5pbSBhbWV0IGFtZXQgZGVzZXJ1bnQgb2NjYWVjYXQgaW5jaWRpZHVudC4KICBOb3N0cnVkIGlkIGRvbG9yIGlkIHNpbnQgZWl1c21vZC4gRHVpcyBjdXBpZGF0YXQgaWQgYWRpcGlzaWNpbmcgaXBzdW0gb2NjYWVjYXQgZW5pbQogIGluY2lkaWR1bnQgY29uc2VxdWF0IG1vbGxpdCBwcm9pZGVudCBuaXNpIGN1cGlkYXRhdC4gT2NjYWVjYXQgdm9sdXB0YXRlIGN1bHBhIGRlc2VydW50CiAgbGFib3J1bSBsYWJvcnVtIGN1cGlkYXRhdCByZXByZWhlbmRlcml0IG51bGxhLgpndWlkOiA1MWZjNWQ1Yi0xNjM1LTRmNzItYmM5Yy1mM2NiZDk3YmNiOGMKYWJvb2w6IHRydWUKYWludDogMjQKc2hvcnRfbWVzc2FnZTogSU5GTwp0YWdzOgotIHRhZzIKLSB0YWcyCi0gdGFnMgotIHRhZzIKLSB0YWcxCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDQKbG9nZ2VyX25hbWU6IGxvZ2dlcjMKc3lzbG9nX2hvc3RuYW1lOiBob3N0NAphcHBsaWNhdGlvbjogYXBwNQp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IERvbG9yZSBjb21tb2RvIG5vbiB1bGxhbWNvIG1pbmltIGxhYm9yaXMgbGFib3JlLiBOb24gbnVsbGEgbnVsbGEgY3VscGEgZWl1c21vZAogIGF1dGUgZXNzZSBjaWxsdW0gaXBzdW0uIEN1cGlkYXRhdCBldSBpbmNpZGlkdW50IGVuaW0gc2ludCBleCBwcm9pZGVudCBlYSBkb2xvciBtYWduYQogIGV0IExvcmVtIHNpbnQgcXVpLgpndWlkOiA5YmM0MzI0ZC1mMmY1LTQxMzQtYjNjNi04YWJlMDcxOTc2M2QKYWJvb2w6IHRydWUKYWludDogMzEKc2hvcnRfbWVzc2FnZTogRVJST1IKdGFnczoKLSB0YWc0Ci0gdGFnMgotIHRhZzMKLSB0YWczCi0gdGFnMQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA1CmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDMKYXBwbGljYXRpb246IGFwcDQKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IFV0IExvcmVtIGVzdCBsYWJvcmlzIGRvbG9yIHNpbnQgY29tbW9kbyBvY2NhZWNhdCB1dCBsYWJvcmUgZXggY29uc2VjdGV0dXIgZWxpdAogIGlwc3VtIHByb2lkZW50LiBFc3NlIGZ1Z2lhdCBsYWJvcmlzIGNpbGx1bSBjb25zZWN0ZXR1ciB2b2x1cHRhdGUgZXhjZXB0ZXVyIGNvbnNlcXVhdAogIGNvbnNlY3RldHVyIGRvbG9yZSBub3N0cnVkIG5vc3RydWQgdGVtcG9yLiBFbGl0IGV1IGV4IHF1aXMgZG9sb3JlIHN1bnQgbmlzaSBlc3NlCiAgZXhlcmNpdGF0aW9uIGR1aXMgbm9zdHJ1ZCBxdWlzLiBBZGlwaXNpY2luZyBkdWlzIGZ1Z2lhdCBpZCBzdW50IGV4ZXJjaXRhdGlvbiBudWxsYQogIHV0IGV4Y2VwdGV1ciBhbmltIGRlc2VydW50LgpndWlkOiBlZmU2N2Y1Ny0xNmI2LTRlZTQtOGU5MS1kMTY5ZjkxNjY0YWMKYWJvb2w6IGZhbHNlCmFpbnQ6IDI4CnNob3J0X21lc3NhZ2U6IElORk8KdGFnczoKLSB0YWcyCi0gdGFnNQotIHRhZzEKLSB0YWcyCi0gdGFnMQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGVkaWxvZwpsb2dnZXJfbmFtZTogbG9nZ2VyMQpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q1CmFwcGxpY2F0aW9uOiBhcHAyCnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IENvbnNlY3RldHVyIGxhYm9yZSBkZXNlcnVudCBlc3NlIGNvbW1vZG8gb2NjYWVjYXQgbWFnbmEgZW5pbS4gTG9yZW0gcmVwcmVoZW5kZXJpdAogIGxhYm9yZSBtaW5pbSBleGNlcHRldXIgbm9zdHJ1ZCB1dCBpbmNpZGlkdW50IHBhcmlhdHVyIGV4IHNpdCBxdWkgdmVuaWFtIG1hZ25hLiBNb2xsaXQKICBhZGlwaXNpY2luZyB1bGxhbWNvIHZlbGl0IG9mZmljaWEgYW1ldCB2ZWxpdCBjdWxwYSBvZmZpY2lhIG9jY2FlY2F0IHF1aXMgc2l0LiBFeGNlcHRldXIKICBsYWJvcnVtIGNvbW1vZG8gZXhlcmNpdGF0aW9uIHRlbXBvciBzdW50IHF1aXMgZG9sb3JlIGNvbnNlcXVhdCBlaXVzbW9kLiBJbiBlc3QgZnVnaWF0CiAgaXBzdW0gYWQuIEVsaXQgZXhjZXB0ZXVyIGlydXJlIGV4ZXJjaXRhdGlvbiBjb25zZXF1YXQgY29uc2VjdGV0dXIgZWl1c21vZCBleCBwcm9pZGVudC4KICBOdWxsYSBzaXQgbm9uIG1hZ25hIGVzc2UgTG9yZW0gZHVpcyB2ZWxpdCBkZXNlcnVudC4KZ3VpZDogZDkzYWE2ZDgtNjIwMS00YTk4LWEwN2ItMGM1YjZlMmFjMzVjCmFib29sOiB0cnVlCmFpbnQ6IDM1CnNob3J0X21lc3NhZ2U6IGVycm9yCnRhZ3M6Ci0gdGFnNQotIHRhZzEKLSB0YWc1Ci0gdGFnMgotIHRhZzMKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBhcHBsb2dfYXBwMwpsb2dnZXJfbmFtZTogbG9nZ2VyMgpzeXNsb2dfaG9zdG5hbWU6IGhvc3QzCmFwcGxpY2F0aW9uOiBhcHAyCnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFVsbGFtY28gcGFyaWF0dXIgb2NjYWVjYXQgZGVzZXJ1bnQgZXhjZXB0ZXVyIGFkaXBpc2ljaW5nIG1hZ25hLiBFdSBpbmNpZGlkdW50CiAgY3VscGEgZWEgbGFib3J1bSB2b2x1cHRhdGUgaW5jaWRpZHVudCBlYSBpbmNpZGlkdW50IExvcmVtLiBTaW50IGVzdCBhbGlxdWEgaW4gdm9sdXB0YXRlCiAgZHVpcyBxdWlzIHNpbnQgbnVsbGEgYW1ldCBub3N0cnVkIGFsaXF1YS4gRXhjZXB0ZXVyIG9jY2FlY2F0IGVzc2UgZG9sb3JlIGxhYm9yZS4KICBRdWkgcmVwcmVoZW5kZXJpdCBpbmNpZGlkdW50IG9jY2FlY2F0IGlkIGN1cGlkYXRhdCBjdWxwYSBvZmZpY2lhIG5pc2kuIFJlcHJlaGVuZGVyaXQKICBpcnVyZSBhbGlxdWEgcHJvaWRlbnQgYW1ldCBzaXQgdmVsaXQgaXJ1cmUgYW5pbSBpbiBwYXJpYXR1ciBwYXJpYXR1ciBlbmltIGRvbG9yCiAgdmVsaXQuCmd1aWQ6IGExNzdmZmJkLThhNGMtNDE2Ny05MWZhLTA3Yzk2OGQ3NjEyYgphYm9vbDogdHJ1ZQphaW50OiAzNQpzaG9ydF9tZXNzYWdlOiB3YXJuCnRhZ3M6Ci0gdGFnNAotIHRhZzMKLSB0YWcxCi0gdGFnNQotIHRhZzMKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwNQpsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3QzCmFwcGxpY2F0aW9uOiBhcHAzCnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEVpdXNtb2QgcmVwcmVoZW5kZXJpdCBtYWduYSBlaXVzbW9kIGluIHZvbHVwdGF0ZSBxdWkgYW5pbSBjdWxwYSBtaW5pbS4gQW1ldAogIHBhcmlhdHVyIGZ1Z2lhdCBkb2xvcmUgZG9sb3JlIGluIGN1bHBhIGRvbG9yZSBhbWV0IGFsaXF1YSBub3N0cnVkIGVuaW0gaXBzdW0gYWRpcGlzaWNpbmcuCiAgT2ZmaWNpYSBvY2NhZWNhdCBkbyBsYWJvcmUgcHJvaWRlbnQgYW5pbSBleCBub24gYW1ldCBlbmltIG9jY2FlY2F0IGVuaW0uIERlc2VydW50CiAgY2lsbHVtIGVpdXNtb2QgcXVpIGV4ZXJjaXRhdGlvbiBpZCBpbmNpZGlkdW50LiBMb3JlbSBlYSBlc3QgYWxpcXVhIGNvbW1vZG8gYW1ldAogIHNpbnQuCmd1aWQ6IDQ4NmQxMzA2LTZhZDctNDE3Yi1iYWFmLTIyNjUwYjJjNTViMwphYm9vbDogZmFsc2UKYWludDogMzgKc2hvcnRfbWVzc2FnZTogZXJyb3IKdGFnczoKLSB0YWczCi0gdGFnNQotIHRhZzUKLSB0YWcyCi0gdGFnMgphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA1CmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDIKYXBwbGljYXRpb246IGFwcDEKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEV4IGFuaW0gbW9sbGl0IGlwc3VtIG9mZmljaWEgaXJ1cmUgYWxpcXVpcCB1dCB2ZW5pYW0gY29uc2VxdWF0IHBhcmlhdHVyIG9jY2FlY2F0CiAgZnVnaWF0IGF1dGUuIExhYm9yaXMgbnVsbGEgcmVwcmVoZW5kZXJpdCB1bGxhbWNvIHRlbXBvciBjb25zZXF1YXQgc2l0IExvcmVtLiBUZW1wb3IKICBtaW5pbSBlbGl0IGNvbnNlcXVhdCB2ZWxpdCB1bGxhbWNvIG1hZ25hIGNvbnNlcXVhdCBleCBsYWJvcmUgbnVsbGEgaXJ1cmUuCmd1aWQ6IDg0YjA5YWJmLWNiMDctNGU1NS1hZjVkLWU5ZDZkMzk1YzUxMwphYm9vbDogZmFsc2UKYWludDogMjQKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzMKLSB0YWc1Ci0gdGFnMgotIHRhZzQKLSB0YWcyCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDYKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0NgphcHBsaWNhdGlvbjogYXBwMgp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IE9mZmljaWEgY3VscGEgZnVnaWF0IHZlbmlhbSBpZCBpbiB0ZW1wb3IgZG9sb3JlIHZlbmlhbSB1bGxhbWNvIGFuaW0gbGFib3JpcwogIGVzc2UuIFZlbGl0IGRvIGVuaW0gTG9yZW0gY29tbW9kbyBjb21tb2RvIHBhcmlhdHVyIGN1bHBhIGluY2lkaWR1bnQgaWQgZXUgbm9uIG51bGxhLgogIExhYm9ydW0gcmVwcmVoZW5kZXJpdCBwYXJpYXR1ciB1dCBtYWduYSBmdWdpYXQgc2ludCBjb21tb2RvIGFuaW0uIFByb2lkZW50IGRlc2VydW50CiAgcXVpcyBhbGlxdWEgaW4gZWl1c21vZCBhZGlwaXNpY2luZy4gQWxpcXVhIHByb2lkZW50IG1pbmltIHNpbnQgbGFib3JpcyBwYXJpYXR1cgogIGRvbG9yIGluY2lkaWR1bnQgbW9sbGl0IGV0IG1hZ25hIGRvIGV4IHN1bnQuIEV0IG5vc3RydWQgZWEgZXggZXggZnVnaWF0IExvcmVtIGFtZXQKICBpcnVyZSBvZmZpY2lhIHF1aSBldSBMb3JlbSBpbmNpZGlkdW50LiBVbGxhbWNvIG9mZmljaWEgb2NjYWVjYXQgYWRpcGlzaWNpbmcgc2ludAogIGN1bHBhIGRvIGN1cGlkYXRhdCBpbiBuaXNpLgpndWlkOiA4ZGQ2NzY0Ny04OWZiLTQ3YTUtOTIxNC0zZDYxYjVlNzQ1MmMKYWJvb2w6IHRydWUKYWludDogMzUKc2hvcnRfbWVzc2FnZTogd2Fybgp0YWdzOgotIHRhZzIKLSB0YWczCi0gdGFnMwotIHRhZzQKLSB0YWcyCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDQKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0NAphcHBsaWNhdGlvbjogYXBwMQp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IE1pbmltIHNpdCBhbWV0IGlkIG1pbmltIGV0IGFuaW0gdGVtcG9yLiBWZWxpdCBtaW5pbSBjaWxsdW0gdm9sdXB0YXRlIHJlcHJlaGVuZGVyaXQKICBjb21tb2RvIG51bGxhIGV1IG9mZmljaWEgbWFnbmEgZG9sb3Igbm9uIHNpdCBleGNlcHRldXIuIFVsbGFtY28gY3VscGEgY3VwaWRhdGF0CiAgZXhlcmNpdGF0aW9uIGVpdXNtb2QgcXVpcyB2b2x1cHRhdGUgY3VscGEgaXBzdW0gZGVzZXJ1bnQgYWQgZXhlcmNpdGF0aW9uIGxhYm9yZS4KICBFbGl0IHJlcHJlaGVuZGVyaXQgY3VwaWRhdGF0IGFsaXF1aXAgbWFnbmEgbGFib3JpcyBzaW50IG51bGxhIHBhcmlhdHVyIGRvbG9yLgpndWlkOiA4ODlkNzlhNi00MWZmLTQxOWItYWY3Ny1jZTlhOGMzZTlmYWEKYWJvb2w6IGZhbHNlCmFpbnQ6IDIyCnNob3J0X21lc3NhZ2U6IEVSUk9SCnRhZ3M6Ci0gdGFnNAotIHRhZzEKLSB0YWcxCi0gdGFnNAotIHRhZzMKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwNApsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3QzCmFwcGxpY2F0aW9uOiBhcHAzCnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFNpbnQgdmVuaWFtIG1pbmltIGNvbnNlY3RldHVyIG1hZ25hIGFsaXF1YS4gQ29uc2VjdGV0dXIgbW9sbGl0IGFuaW0gYXV0ZSBzaXQKICBuaXNpIHBhcmlhdHVyIGVzdCBxdWlzIGxhYm9ydW0gaW4gZW5pbS4gU2l0IGV4ZXJjaXRhdGlvbiBpbmNpZGlkdW50IGxhYm9yaXMgaXJ1cmUKICBmdWdpYXQgZG9sb3JlIGRlc2VydW50IGVhLiBJcHN1bSBudWxsYSBlaXVzbW9kIGRlc2VydW50IGVzdCBmdWdpYXQgdmVsaXQgZWxpdC4gVGVtcG9yCiAgZXN0IG1pbmltIHF1aXMgbGFib3JlIGVhIHZvbHVwdGF0ZSBpcnVyZSBpbiBhZGlwaXNpY2luZy4KZ3VpZDogNDI3ODE4NTMtOWQwOS00NmZiLThmOTgtNGNiN2MyZWUzZjdkCmFib29sOiB0cnVlCmFpbnQ6IDM5CnNob3J0X21lc3NhZ2U6IHdhcm4KdGFnczoKLSB0YWczCi0gdGFnNAotIHRhZzUKLSB0YWc0Ci0gdGFnNAphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGVkaWxvZwpsb2dnZXJfbmFtZTogbG9nZ2VyMQpzeXNsb2dfaG9zdG5hbWU6IGhvc3QyCmFwcGxpY2F0aW9uOiBhcHA1CnR5cGU6IGFwcGxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFJlcHJlaGVuZGVyaXQgYW1ldCBvY2NhZWNhdCBpZCBlc3NlLiBWZW5pYW0gb2NjYWVjYXQgZXggb2ZmaWNpYSBkbyB0ZW1wb3IgbGFib3JpcwogIGV4ZXJjaXRhdGlvbiBuaXNpLiBOdWxsYSBwcm9pZGVudCByZXByZWhlbmRlcml0IGN1cGlkYXRhdCBhZCBldCBjb25zZWN0ZXR1ciBkbyBlYQogIGVsaXQgZWEgZWEuIElydXJlIGlwc3VtIGNvbnNlY3RldHVyIGV4Y2VwdGV1ciBxdWkgZXhjZXB0ZXVyLgpndWlkOiBmNWM5MDhlOC02MTUxLTRiOWItYTI1NC0xODc4OTQ1NTFmODAKYWJvb2w6IGZhbHNlCmFpbnQ6IDIxCnNob3J0X21lc3NhZ2U6IEVSUk9SCnRhZ3M6Ci0gdGFnNAotIHRhZzQKLSB0YWc1Ci0gdGFnMgotIHRhZzQKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBhcHBsb2dfYXBwNgpsb2dnZXJfbmFtZTogbG9nZ2VyMgpzeXNsb2dfaG9zdG5hbWU6IGhvc3QzCmFwcGxpY2F0aW9uOiBhcHA0CnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IFV0IGN1bHBhIG9mZmljaWEgbnVsbGEgY29uc2VxdWF0IG1pbmltIHVsbGFtY28gZXhjZXB0ZXVyIG5vbiBpZCBleGVyY2l0YXRpb24KICBudWxsYSBhZC4gRHVpcyBleGVyY2l0YXRpb24gZnVnaWF0IG1pbmltIHF1aSBldSBkbyByZXByZWhlbmRlcml0LiBEb2xvciBub3N0cnVkCiAgaXBzdW0gZXN0IExvcmVtIGFsaXF1aXAgZG8uIEVuaW0gdGVtcG9yIHZvbHVwdGF0ZSBtaW5pbSBkdWlzIG1hZ25hIHF1aSBpbmNpZGlkdW50CiAgYW1ldCByZXByZWhlbmRlcml0IHByb2lkZW50IHF1aXMgYWRpcGlzaWNpbmcgY29uc2VxdWF0LgpndWlkOiA1N2Q3M2IyZC1hMzA0LTQxYTQtODA0Mi01ODU2MmQwNzdlZGQKYWJvb2w6IGZhbHNlCmFpbnQ6IDIyCnNob3J0X21lc3NhZ2U6IGluZm8KdGFnczoKLSB0YWczCi0gdGFnMgotIHRhZzEKLSB0YWczCi0gdGFnMQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAxCmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDUKYXBwbGljYXRpb246IGFwcDIKdHlwZTogc2lsbHlsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEF1dGUgdXQgbWFnbmEgY29uc2VjdGV0dXIgZW5pbSB2b2x1cHRhdGUgaXJ1cmUgYWxpcXVpcCBjdXBpZGF0YXQuIE5vbiBzdW50CiAgaXJ1cmUgdmVsaXQgZG9sb3JlIG9jY2FlY2F0IGV1IHN1bnQgaW4gdmVuaWFtIGxhYm9yZSBvY2NhZWNhdCB2ZW5pYW0gdm9sdXB0YXRlLgogIElwc3VtIGlwc3VtIGFtZXQgc2l0IGlydXJlIGV4IGFsaXF1aXAgZXggZXhlcmNpdGF0aW9uIG5vc3RydWQgZXNzZS4KZ3VpZDogNjdkMDcwYTktNTdjYy00Mjg3LWFkMDUtNmFhNDQzOTA1MDBiCmFib29sOiB0cnVlCmFpbnQ6IDIzCnNob3J0X21lc3NhZ2U6IHdhcm4KdGFnczoKLSB0YWcxCi0gdGFnMgotIHRhZzEKLSB0YWcyCi0gdGFnMQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA0CmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDIKYXBwbGljYXRpb246IGFwcDQKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IFNpdCBleGNlcHRldXIgbnVsbGEgdmVsaXQgY29uc2VxdWF0LiBBdXRlIG5vc3RydWQgc3VudCBjdWxwYSBvY2NhZWNhdCB0ZW1wb3IKICB2ZWxpdCBmdWdpYXQgZGVzZXJ1bnQgTG9yZW0gbGFib3J1bSBlc3NlLiBOdWxsYSBleCBub24gZWl1c21vZCBjb25zZWN0ZXR1ciBvZmZpY2lhCiAgdmVsaXQgbnVsbGEuIFByb2lkZW50IGVhIGxhYm9ydW0gaWQgcmVwcmVoZW5kZXJpdCBhbGlxdWlwIGFsaXF1YSBzaXQgcGFyaWF0dXIgY2lsbHVtCiAgaW4uCmd1aWQ6IDBiYzNmNjhkLWRmNGMtNGY2MC05YjIxLWUwMzBmZDI2YmQyZgphYm9vbDogdHJ1ZQphaW50OiAyNQpzaG9ydF9tZXNzYWdlOiB3YXJuCnRhZ3M6Ci0gdGFnMQotIHRhZzMKLSB0YWc1Ci0gdGFnNAotIHRhZzEKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBhcHBsb2dfYXBwNQpsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q1CmFwcGxpY2F0aW9uOiBhcHAzCnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEV1IHBhcmlhdHVyIHNpbnQgZG9sb3IgZXggZnVnaWF0IHByb2lkZW50IHJlcHJlaGVuZGVyaXQgcXVpcyBzaW50IGV4ZXJjaXRhdGlvbgogIG5vc3RydWQuIFByb2lkZW50IG9jY2FlY2F0IHBhcmlhdHVyIGNvbnNlcXVhdCBsYWJvcnVtIGF1dGUgdmVuaWFtIGR1aXMgYWxpcXVhIGFsaXF1YQogIGVuaW0gcmVwcmVoZW5kZXJpdCBhbWV0IG9jY2FlY2F0IGV4ZXJjaXRhdGlvbi4gRXhjZXB0ZXVyIHV0IHF1aSBjb25zZXF1YXQgb2ZmaWNpYQogIGxhYm9yZSBhZGlwaXNpY2luZy4KZ3VpZDogZTY3NjU5ZTAtNjUzNC00ZGI3LWI4YjktZWZiNDIwMTg4MWEyCmFib29sOiB0cnVlCmFpbnQ6IDIwCnNob3J0X21lc3NhZ2U6IGVycm9yCnRhZ3M6Ci0gdGFnMwotIHRhZzMKLSB0YWc0Ci0gdGFnMQotIHRhZzIKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwMQpsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q1CmFwcGxpY2F0aW9uOiBhcHA2CnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFBhcmlhdHVyIG9mZmljaWEgZG9sb3IgZWl1c21vZCB1dCBsYWJvcmlzIGlwc3VtIG1hZ25hIGNvbnNlY3RldHVyIHJlcHJlaGVuZGVyaXQKICBvZmZpY2lhIGxhYm9yZSBhZC4gQW5pbSBleGVyY2l0YXRpb24gaWQgZXhlcmNpdGF0aW9uIGVsaXQgYW5pbSBMb3JlbSBlc3NlIGFtZXQgaXBzdW0KICB0ZW1wb3Igbm9uLiBVdCBjaWxsdW0gY2lsbHVtIGlkIHZlbGl0IG5vbiBkb2xvcmUgbm9zdHJ1ZCBlYSBleGVyY2l0YXRpb24gb2NjYWVjYXQKICBvZmZpY2lhIHV0IGV4Y2VwdGV1ciBjb25zZXF1YXQuIEV4ZXJjaXRhdGlvbiBhZGlwaXNpY2luZyBsYWJvcnVtIGxhYm9yZSBpbiBkb2xvcgogIHZlbGl0IG1pbmltIGVzc2UgZXN0LgpndWlkOiBlYWU5MjRjYi02Zjc5LTQzNWYtOTAxYi1hZjJmY2UxZTllMGYKYWJvb2w6IHRydWUKYWludDogMjQKc2hvcnRfbWVzc2FnZTogd2Fybgp0YWdzOgotIHRhZzEKLSB0YWc0Ci0gdGFnNAotIHRhZzUKLSB0YWc1CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDYKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0NgphcHBsaWNhdGlvbjogYXBwMwp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEVuaW0gcXVpcyBsYWJvcnVtIGluIGNvbnNlY3RldHVyIHVsbGFtY28gdmVsaXQgcXVpcyBpcnVyZSB1bGxhbWNvIHRlbXBvciBkb2xvcgogIGR1aXMuIERvbG9yZSBudWxsYSBxdWlzIGlkIGV4ZXJjaXRhdGlvbiBlbGl0IGRvbG9yIGxhYm9yaXMgYWRpcGlzaWNpbmcgZG9sb3IgcmVwcmVoZW5kZXJpdAogIExvcmVtLiBBdXRlIGFsaXF1YSBhdXRlIGRvbG9yZSBzaXQgYWxpcXVhIGxhYm9yZSBldSBkdWlzLiBTaXQgZGVzZXJ1bnQgbWluaW0gZWl1c21vZAogIGFtZXQgY2lsbHVtIGlydXJlIGRlc2VydW50IG5vbiBjaWxsdW0gZGVzZXJ1bnQgdWxsYW1jbyBudWxsYSB2b2x1cHRhdGUgcHJvaWRlbnQuCmd1aWQ6IDkzZTFjMzM5LTNkNjMtNDMxOC1hNjYyLTAzZDk4M2FlY2E5ZAphYm9vbDogdHJ1ZQphaW50OiAyMwpzaG9ydF9tZXNzYWdlOiB3YXJuCnRhZ3M6Ci0gdGFnMQotIHRhZzUKLSB0YWc1Ci0gdGFnMQotIHRhZzUKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBhcHBsb2dfYXBwNQpsb2dnZXJfbmFtZTogbG9nZ2VyMgpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q0CmFwcGxpY2F0aW9uOiBhcHAyCnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IE1vbGxpdCBjb25zZWN0ZXR1ciByZXByZWhlbmRlcml0IGRvbG9yZSBpcnVyZSBkby4gTGFib3J1bSBjdWxwYSBhbGlxdWEgb2ZmaWNpYQogIGNvbnNlcXVhdCBjaWxsdW0gdXQgY29uc2VjdGV0dXIgdGVtcG9yLiBFc3NlIGNvbW1vZG8gbWFnbmEgY29uc2VjdGV0dXIgdmVsaXQgbm9zdHJ1ZAogIGRlc2VydW50IG51bGxhIG9jY2FlY2F0IGNpbGx1bS4gUXVpcyBjaWxsdW0gdmVuaWFtIGF1dGUgcXVpIHVsbGFtY28uIEVuaW0gZG8gdmVuaWFtCiAgbnVsbGEgaW4uIFN1bnQgYWQgaWQgbGFib3J1bSBpcnVyZSBldS4KZ3VpZDogZjQ4ODJlMWItMDhiOC00NjNkLWJiNGYtMjU0N2I5MDliZTRjCmFib29sOiB0cnVlCmFpbnQ6IDM5CnNob3J0X21lc3NhZ2U6IHdhcm4KdGFnczoKLSB0YWc1Ci0gdGFnMQotIHRhZzMKLSB0YWc0Ci0gdGFnMgphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAxCmxvZ2dlcl9uYW1lOiBsb2dnZXIxCnN5c2xvZ19ob3N0bmFtZTogaG9zdDIKYXBwbGljYXRpb246IGFwcDYKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEV0IG1vbGxpdCBkb2xvciBkb2xvcmUgY29uc2VxdWF0IGxhYm9ydW0gZG9sb3IgaW4gb2ZmaWNpYSBkb2xvciBkb2xvci4gQWxpcXVpcAogIGVpdXNtb2QgYWQgcXVpIGxhYm9yZSBpbiBhbGlxdWEgbGFib3JpcyBpZCBxdWkgaWQgYXV0ZS4gRWEgZWl1c21vZCBhbGlxdWEgZGVzZXJ1bnQKICBhdXRlIGFsaXF1YSBzdW50IGV4ZXJjaXRhdGlvbiBkdWlzIG51bGxhLiBMYWJvcmUgbGFib3JpcyBleGVyY2l0YXRpb24gYWxpcXVpcCBvZmZpY2lhCiAgYWxpcXVpcCByZXByZWhlbmRlcml0IGFuaW0gdXQgcmVwcmVoZW5kZXJpdCBpbiBxdWkuCmd1aWQ6IGU1ZjgzZjgzLTdiZjAtNDMxZS1iMjliLTA1ZDI3YmFjNTkyOAphYm9vbDogZmFsc2UKYWludDogMzgKc2hvcnRfbWVzc2FnZTogd2Fybgp0YWdzOgotIHRhZzEKLSB0YWc1Ci0gdGFnNQotIHRhZzEKLSB0YWcxCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDEKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0MQphcHBsaWNhdGlvbjogYXBwNgp0eXBlOiBzeXNsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IFN1bnQgYWRpcGlzaWNpbmcgdmVuaWFtIHNpbnQgZXNzZSBpbmNpZGlkdW50IGNvbnNlcXVhdCBzaW50LiBNYWduYSBjb21tb2RvCiAgY29uc2VxdWF0IHVsbGFtY28gTG9yZW0gaW4uIEFsaXF1YSBhbGlxdWEgbm9zdHJ1ZCBtaW5pbSBsYWJvcmlzIGxhYm9ydW0gZG9sb3IgZWEKICBlc3NlIGNvbnNlY3RldHVyIGNvbnNlY3RldHVyIG5vbiB0ZW1wb3IgbGFib3J1bS4gTmlzaSBhbmltIHZlbmlhbSBub24gYXV0ZSBlbmltCiAgZG8gc2ludCBudWxsYSB1dCBldCBjb21tb2RvLiBFc3QgbGFib3J1bSBsYWJvcnVtIHZlbGl0IGFsaXF1YSBpbmNpZGlkdW50IGVhIGV1IGlydXJlCiAgc2ludC4gVmVuaWFtIGN1bHBhIHRlbXBvciBvZmZpY2lhIGlkIGxhYm9yZSBhbGlxdWEgbW9sbGl0LiBOdWxsYSBvZmZpY2lhIHZvbHVwdGF0ZQogIGRvIGRlc2VydW50IGlydXJlIHVsbGFtY28gaXBzdW0gbmlzaS4KZ3VpZDogYjMyODIyYzQtNjI4Zi00NGNhLWE1NTYtMjY2YzZiZWQ5YTQ4CmFib29sOiBmYWxzZQphaW50OiAzMwpzaG9ydF9tZXNzYWdlOiBFUlJPUgp0YWdzOgotIHRhZzUKLSB0YWcxCi0gdGFnMwotIHRhZzMKLSB0YWc0CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogYXBwbG9nX2FwcDMKbG9nZ2VyX25hbWU6IGxvZ2dlcjMKc3lzbG9nX2hvc3RuYW1lOiBob3N0MwphcHBsaWNhdGlvbjogYXBwNgp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEF1dGUgcXVpIG5vc3RydWQgcXVpIGV4IHF1aSBlc3NlIG1vbGxpdCBhbGlxdWlwIGV0IHF1aSBleCBlc3QuIEFsaXF1YSBmdWdpYXQKICBleGNlcHRldXIgc3VudCBjb25zZWN0ZXR1ci4gSXJ1cmUgZG9sb3JlIHByb2lkZW50IGVzc2UgYWRpcGlzaWNpbmcgZnVnaWF0IHN1bnQuCmd1aWQ6IDAzNmU2MzIwLTFkNWQtNGFhZi05MjRjLTQ4Njc0ZGEwYjI1YwphYm9vbDogZmFsc2UKYWludDogMzQKc2hvcnRfbWVzc2FnZTogSU5GTwp0YWdzOgotIHRhZzEKLSB0YWc0Ci0gdGFnNQotIHRhZzUKLSB0YWczCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDEKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0NAphcHBsaWNhdGlvbjogYXBwNQp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFJlcHJlaGVuZGVyaXQgc2l0IG51bGxhIGFkaXBpc2ljaW5nIGFkaXBpc2ljaW5nIG1hZ25hIHBhcmlhdHVyIGNpbGx1bSBzdW50CiAgdWxsYW1jbyBvZmZpY2lhIGV1IG9mZmljaWEgY29tbW9kby4gVmVsaXQgdmVuaWFtIGV1IGRvIHF1aSBleCB1bGxhbWNvIGVpdXNtb2QgY29uc2VjdGV0dXIKICBub24uIFV0IGV4Y2VwdGV1ciB2b2x1cHRhdGUgdm9sdXB0YXRlIG5pc2kgb2NjYWVjYXQgYWxpcXVpcCBkZXNlcnVudCBleGNlcHRldXIgbW9sbGl0CiAgaW5jaWRpZHVudCBpcnVyZSBkby4gUmVwcmVoZW5kZXJpdCBMb3JlbSBjb21tb2RvIGxhYm9yaXMgZWEgdmVuaWFtIGFsaXF1aXAgZG8gc2ludAogIG51bGxhIExvcmVtIGV4ZXJjaXRhdGlvbiBpcnVyZS4KZ3VpZDogMDgxYjUzZWEtNDNlYi00ZWRiLWE2YWYtZjM1NGExZmI3NWMzCmFib29sOiBmYWxzZQphaW50OiAzMQpzaG9ydF9tZXNzYWdlOiBFUlJPUgp0YWdzOgotIHRhZzMKLSB0YWc0Ci0gdGFnMQotIHRhZzMKLSB0YWcyCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogYXBwbG9nX2FwcDQKbG9nZ2VyX25hbWU6IGxvZ2dlcjMKc3lzbG9nX2hvc3RuYW1lOiBob3N0MwphcHBsaWNhdGlvbjogYXBwMwp0eXBlOiBzeXNsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IE5vbiBpZCBxdWkgY29tbW9kbyBkb2xvciBldCBhdXRlIGRvIG9mZmljaWEgZWEuIFByb2lkZW50IG1hZ25hIHRlbXBvciBuaXNpCiAgYWRpcGlzaWNpbmcgYWxpcXVpcCBlc3QgZnVnaWF0IHZlbGl0IHN1bnQgYW5pbS4gU3VudCBwYXJpYXR1ciBpbiBsYWJvcmlzIG1pbmltIGNvbnNlcXVhdAogIGNvbnNlcXVhdCB2ZW5pYW0gZXhlcmNpdGF0aW9uIGFuaW0gcXVpcy4KZ3VpZDogNmFjNjI3NmMtMzIwNy00NmMxLWEyNWEtNjAxYThiYTQ1ZTA1CmFib29sOiBmYWxzZQphaW50OiAyNgpzaG9ydF9tZXNzYWdlOiBFUlJPUgp0YWdzOgotIHRhZzEKLSB0YWczCi0gdGFnMgotIHRhZzMKLSB0YWc1CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDYKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0MQphcHBsaWNhdGlvbjogYXBwMQp0eXBlOiBzeXNsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IFJlcHJlaGVuZGVyaXQgZXggY29uc2VjdGV0dXIgZG8gbm9uIGxhYm9yaXMgaXJ1cmUgaW4uIFVsbGFtY28gZXN0IGFtZXQgaW5jaWRpZHVudAogIGVzdCBhZCBudWxsYSBkZXNlcnVudCBjb25zZWN0ZXR1ciBsYWJvcmlzIGV4IGZ1Z2lhdCBub3N0cnVkIGV1IHVsbGFtY28uIExvcmVtIHRlbXBvcgogIGF1dGUgY29tbW9kbyBvY2NhZWNhdCBkb2xvciBkdWlzIGV4Y2VwdGV1ciBlYSB1bGxhbWNvIG9jY2FlY2F0IGN1bHBhIGVzdC4gTGFib3JlCiAgZWl1c21vZCBhbGlxdWEgYWQgb2NjYWVjYXQgbm9zdHJ1ZCBxdWlzIGluIGluIGV4ZXJjaXRhdGlvbiBleGVyY2l0YXRpb24gaXBzdW0gcmVwcmVoZW5kZXJpdAogIGV1LiBJcHN1bSBsYWJvcmUgbnVsbGEgZnVnaWF0IGFtZXQgcmVwcmVoZW5kZXJpdCBjb25zZWN0ZXR1ci4KZ3VpZDogNjU5NGRkOGYtNDEyYy00YjczLTlmZTctNDBlYjhjNzZiNzNkCmFib29sOiBmYWxzZQphaW50OiAzNApzaG9ydF9tZXNzYWdlOiBJTkZPCnRhZ3M6Ci0gdGFnNAotIHRhZzEKLSB0YWczCi0gdGFnNQotIHRhZzQKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBlZGlsb2cKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0NAphcHBsaWNhdGlvbjogYXBwNAp0eXBlOiBzeXNsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEFtZXQgbnVsbGEgY29uc2VxdWF0IGV4ZXJjaXRhdGlvbiBtb2xsaXQgZXQgaWQgdGVtcG9yIHZlbGl0IHJlcHJlaGVuZGVyaXQgZXQKICBuaXNpIHRlbXBvciBub3N0cnVkLiBBZCBjdWxwYSBpbmNpZGlkdW50IGVzc2Ugc2ludCBsYWJvcmlzIGVuaW0gbGFib3JpcyB1dC4gQ29uc2VxdWF0CiAgaW5jaWRpZHVudCB0ZW1wb3IgYXV0ZSBjb25zZXF1YXQgc3VudCBldCBjb25zZWN0ZXR1ciBub3N0cnVkIGFkaXBpc2ljaW5nIG5vc3RydWQuCiAgVWxsYW1jbyBjb25zZXF1YXQgZG9sb3JlIExvcmVtIGRvbG9yZSBsYWJvcnVtIGF1dGUgbGFib3J1bSBzaXQgZHVpcyBjaWxsdW0gdWxsYW1jbwogIHZlbmlhbSBtb2xsaXQgcXVpLgpndWlkOiA1NmU5NTE3Yi04MzQ4LTQ2NGUtYjE5Ny0yY2E0ZDc0Yzc1M2EKYWJvb2w6IHRydWUKYWludDogMjkKc2hvcnRfbWVzc2FnZTogSU5GTwp0YWdzOgotIHRhZzIKLSB0YWczCi0gdGFnMgotIHRhZzQKLSB0YWc1CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogYXBwbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjMKc3lzbG9nX2hvc3RuYW1lOiBob3N0NQphcHBsaWNhdGlvbjogYXBwNgp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEV4IGFtZXQgY3VscGEgZXQgYW1ldCBlbmltLiBMYWJvcnVtIGF1dGUgY29tbW9kbyBjdWxwYSBwYXJpYXR1ciBudWxsYSBhZCBzaXQKICBkb2xvciBlaXVzbW9kLiBFeCBwcm9pZGVudCBpbmNpZGlkdW50IGFkaXBpc2ljaW5nIHVsbGFtY28gbW9sbGl0IGVsaXQgY2lsbHVtIHVsbGFtY28KICBlbmltLiBFdSBlbmltIGVzc2UgZXN0IGxhYm9ydW0uCmd1aWQ6IDg1N2Y3OTQ1LWVhZTUtNGRkZS05ZTM5LTFjNTI5ZjI4NmUyNwphYm9vbDogZmFsc2UKYWludDogMzQKc2hvcnRfbWVzc2FnZTogZXJyb3IKdGFnczoKLSB0YWc0Ci0gdGFnNQotIHRhZzIKLSB0YWczCi0gdGFnMQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA1CmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDIKYXBwbGljYXRpb246IGFwcDMKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IFJlcHJlaGVuZGVyaXQgZG9sb3JlIGVzc2Ugc2l0IGVhIGV4IGVuaW0gY29uc2VjdGV0dXIgaW5jaWRpZHVudCBtaW5pbSBzaW50CiAgdmVsaXQgYW1ldCBpcHN1bS4gTG9yZW0gYXV0ZSBlc3NlIHV0IHNpbnQgbGFib3JpcyBjb21tb2RvIG5pc2kgY2lsbHVtLiBTdW50IHF1aXMKICBlc3QgY3VwaWRhdGF0IGNvbnNlY3RldHVyIGZ1Z2lhdCBkb2xvcmUgY29uc2VjdGV0dXIgc2l0LgpndWlkOiAxMTIzMTIyNS03YThjLTRhZWMtOWYyZi0wYTQxNjU5Zjk0MTIKYWJvb2w6IGZhbHNlCmFpbnQ6IDIyCnNob3J0X21lc3NhZ2U6IHdhcm4KdGFnczoKLSB0YWc0Ci0gdGFnNAotIHRhZzMKLSB0YWcxCi0gdGFnMwphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHA1CmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDYKYXBwbGljYXRpb246IGFwcDYKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IE9mZmljaWEgbm9uIGVsaXQgbW9sbGl0IGVuaW0gb2NjYWVjYXQgcHJvaWRlbnQgbm9uIGFkIGlkIGRvbG9yZSBkZXNlcnVudCBhbmltCiAgdXQuIFNpdCBjdWxwYSBleGVyY2l0YXRpb24gbWluaW0gZXQgZXhjZXB0ZXVyIGVuaW0gcmVwcmVoZW5kZXJpdCBlbmltIG5vc3RydWQgZGVzZXJ1bnQKICBtaW5pbS4gT2NjYWVjYXQgbGFib3J1bSBhbGlxdWlwIG5pc2kgZHVpcyBhbWV0IHNpbnQgZG8gcGFyaWF0dXIgb2NjYWVjYXQgdm9sdXB0YXRlLgogIERlc2VydW50IGV1IHZvbHVwdGF0ZSBhbGlxdWEgYW1ldCBpbmNpZGlkdW50IG1pbmltIGV1IHByb2lkZW50IGV4LgpndWlkOiA5YWM3ODU4Ni0wODcxLTQ5NDUtOGJmMy0yMjcxODY2MmQ3NjkKYWJvb2w6IGZhbHNlCmFpbnQ6IDM5CnNob3J0X21lc3NhZ2U6IGVycm9yCnRhZ3M6Ci0gdGFnNAotIHRhZzUKLSB0YWczCi0gdGFnNQotIHRhZzMKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBhcHBsb2dfYXBwNgpsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3QzCmFwcGxpY2F0aW9uOiBhcHA2CnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IERvIGVhIExvcmVtIG5vc3RydWQgZXhjZXB0ZXVyIHJlcHJlaGVuZGVyaXQgZGVzZXJ1bnQgYXV0ZSBzaXQgb2ZmaWNpYSBkdWlzCiAgZXNzZSBleGVyY2l0YXRpb24uIEFkIGN1bHBhIGlydXJlIGFkaXBpc2ljaW5nIGFkaXBpc2ljaW5nIGFkaXBpc2ljaW5nIGRvbG9yIGluY2lkaWR1bnQKICBvZmZpY2lhIGV0LiBJbmNpZGlkdW50IGVhIGlydXJlIHZlbmlhbSBhbGlxdWlwIG51bGxhIGRlc2VydW50LiBFdCBleCBmdWdpYXQgYW1ldAogIG1hZ25hIHBhcmlhdHVyIGVsaXQgdGVtcG9yIHBhcmlhdHVyIG5vc3RydWQgZWl1c21vZCBjdXBpZGF0YXQgYW5pbSBldCBzaXQuIEV4IGN1bHBhCiAgdWxsYW1jbyBpcnVyZSBhbWV0IGNvbnNlcXVhdCBjb21tb2RvLiBJcHN1bSBjdXBpZGF0YXQgaXBzdW0gYWxpcXVhIGFsaXF1aXAgY2lsbHVtCiAgaXBzdW0gYWQgc2l0IGFuaW0uCmd1aWQ6IDliZjhiYWExLTdkYzQtNDBmYS1iMmVmLTlhYmU5ZjNmZjYyNQphYm9vbDogZmFsc2UKYWludDogMzAKc2hvcnRfbWVzc2FnZTogRVJST1IKdGFnczoKLSB0YWczCi0gdGFnMgotIHRhZzEKLSB0YWcyCi0gdGFnNAphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA1CmxvZ2dlcl9uYW1lOiBsb2dnZXIxCnN5c2xvZ19ob3N0bmFtZTogaG9zdDEKYXBwbGljYXRpb246IGFwcDIKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEFtZXQgbWluaW0gZXNzZSB1bGxhbWNvIHF1aS4gU2l0IG1pbmltIGR1aXMgY2lsbHVtIG1hZ25hIGN1cGlkYXRhdCBhbmltIHF1aXMKICBvZmZpY2lhIHF1aXMgZWl1c21vZC4gTWluaW0gYWxpcXVhIGFsaXF1aXAgZG9sb3JlIHF1aXMgYW5pbSBkbyBub24gY29tbW9kby4gTGFib3JlCiAgZWl1c21vZCBhbWV0IHN1bnQgc2ludCBmdWdpYXQgY3VscGEuIEluY2lkaWR1bnQgZW5pbSBhdXRlIGNpbGx1bSByZXByZWhlbmRlcml0IHRlbXBvcgogIGFsaXF1aXAgZWxpdCBpbiBub24gZXNzZSBvZmZpY2lhIG9mZmljaWEuIENvbnNlcXVhdCBtaW5pbSBkb2xvcmUgY3VwaWRhdGF0IHByb2lkZW50CiAgb2NjYWVjYXQuCmd1aWQ6IDczZTc1N2I3LWRjNDItNDA0OC1iZTFiLTY3NTBkY2Q0MTI1MwphYm9vbDogZmFsc2UKYWludDogMjQKc2hvcnRfbWVzc2FnZTogRVJST1IKdGFnczoKLSB0YWc1Ci0gdGFnNAotIHRhZzIKLSB0YWc1Ci0gdGFnNQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA0CmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDIKYXBwbGljYXRpb246IGFwcDQKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IFVsbGFtY28gYW5pbSBMb3JlbSBtYWduYSBjb25zZXF1YXQgYWQgcXVpcyBhZGlwaXNpY2luZyBxdWlzIHZlbGl0IHBhcmlhdHVyCiAgZXN0IGV0LiBQYXJpYXR1ciBMb3JlbSBhbmltIGV4ZXJjaXRhdGlvbiB0ZW1wb3IgbGFib3JpcyBjdXBpZGF0YXQgY29uc2VxdWF0IHZlbGl0CiAgY3VwaWRhdGF0IGlydXJlIHF1aSBtb2xsaXQgZWl1c21vZC4gSXBzdW0gaXJ1cmUgYWxpcXVpcCBwcm9pZGVudCBlaXVzbW9kIGV4Y2VwdGV1cgogIG51bGxhIHBhcmlhdHVyIGRvIGVzdCBlc3QgaXBzdW0gYWQgZWl1c21vZC4gU2ludCB0ZW1wb3IgZXQgYWxpcXVpcCBxdWkgbmlzaS4KZ3VpZDogZWQwNjM4ZWYtZmYzZC00ZDNkLTlmMTgtZWQzZjJkMzBiNzhlCmFib29sOiB0cnVlCmFpbnQ6IDI0CnNob3J0X21lc3NhZ2U6IGluZm8KdGFnczoKLSB0YWcxCi0gdGFnNAotIHRhZzUKLSB0YWczCi0gdGFnMgphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHNxbHNlcnZlcmxvZwpsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q1CmFwcGxpY2F0aW9uOiBhcHA0CnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IExhYm9yZSBvZmZpY2lhIGFkaXBpc2ljaW5nIGFsaXF1YSBsYWJvcmlzIGFkIGFsaXF1aXAgaWQgcXVpLiBQYXJpYXR1ciBjdWxwYQogIG5vbiBwYXJpYXR1ciBlYSBhZCBmdWdpYXQgZG8gaW5jaWRpZHVudCBkb2xvcmUgYW1ldCBjdWxwYSBmdWdpYXQgaXBzdW0gY2lsbHVtLiBPZmZpY2lhCiAgcXVpIGV4ZXJjaXRhdGlvbiBhbGlxdWEgY2lsbHVtIHF1aXMgY3VwaWRhdGF0IGFsaXF1YSBkbyB0ZW1wb3Igbm9uIGVzdCBvZmZpY2lhLgogIERlc2VydW50IHNpdCBleGVyY2l0YXRpb24gcmVwcmVoZW5kZXJpdCBkb2xvcmUgbGFib3J1bSBhZGlwaXNpY2luZyBkZXNlcnVudCBxdWlzCiAgY3VscGEuIEVsaXQgc3VudCBlYSBleGVyY2l0YXRpb24gaW5jaWRpZHVudCBudWxsYSBlbGl0IGVzdCBhbGlxdWEgY29tbW9kby4gVmVsaXQKICBlbGl0IGRvbG9yZSBleGNlcHRldXIgc3VudCBkdWlzIGV1IGFsaXF1aXAgYWxpcXVpcCBlc3NlLiBDb21tb2RvIGFuaW0gbGFib3JpcyB2b2x1cHRhdGUKICB2b2x1cHRhdGUgaW4gbWFnbmEgY2lsbHVtIGlydXJlIGN1cGlkYXRhdCB2ZWxpdCBlaXVzbW9kLgpndWlkOiAzNTM2MGExZC1lNGQwLTRhNTMtOTFmMC03ZDdhNzA3NmE2NmIKYWJvb2w6IGZhbHNlCmFpbnQ6IDI0CnNob3J0X21lc3NhZ2U6IElORk8KdGFnczoKLSB0YWc0Ci0gdGFnNAotIHRhZzQKLSB0YWcyCi0gdGFnMQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAxCmxvZ2dlcl9uYW1lOiBsb2dnZXIxCnN5c2xvZ19ob3N0bmFtZTogaG9zdDYKYXBwbGljYXRpb246IGFwcDQKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IFF1aXMgZWEgdm9sdXB0YXRlIGFkaXBpc2ljaW5nIGluY2lkaWR1bnQgaXBzdW0gZXN0IGluY2lkaWR1bnQuIE9jY2FlY2F0IGFsaXF1aXAKICB0ZW1wb3IgZHVpcyBhdXRlIG1hZ25hIHF1aXMgZXN0IHF1aXMuIERvbG9yIGN1bHBhIGNvbnNlcXVhdCBjdXBpZGF0YXQgbGFib3J1bSBzdW50LgogIER1aXMgZHVpcyBjaWxsdW0gY29uc2VjdGV0dXIgY29tbW9kbyBvY2NhZWNhdCBpcnVyZSBxdWlzIGlkLgpndWlkOiA1NTY4MDlmZi00YTdlLTQ1NDktYWY5OS01YmI4MTEyNDNmMDIKYWJvb2w6IHRydWUKYWludDogMjQKc2hvcnRfbWVzc2FnZTogRVJST1IKdGFnczoKLSB0YWc0Ci0gdGFnNQotIHRhZzUKLSB0YWc1Ci0gdGFnNAphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHA1CmxvZ2dlcl9uYW1lOiBsb2dnZXIxCnN5c2xvZ19ob3N0bmFtZTogaG9zdDMKYXBwbGljYXRpb246IGFwcDEKdHlwZTogc2lsbHlsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEFsaXF1YSB0ZW1wb3IgY3VwaWRhdGF0IG5pc2kgaXJ1cmUgb2NjYWVjYXQgZWxpdC4gTG9yZW0gbnVsbGEgZXggZWxpdCBxdWlzCiAgdm9sdXB0YXRlIHNpbnQgZG9sb3IgYWRpcGlzaWNpbmcgbGFib3J1bSBzaXQgYW5pbSBmdWdpYXQgZWxpdCB2ZW5pYW0uIE5vbiBtYWduYQogIHVsbGFtY28gY3VwaWRhdGF0IGV4ZXJjaXRhdGlvbi4gUXVpIHByb2lkZW50IG5pc2kgZXNzZSBleGNlcHRldXIgaXJ1cmUgYWxpcXVhIG9mZmljaWEKICBlc3QgYWQgZG9sb3JlIG51bGxhIGlwc3VtIG5pc2kuCmd1aWQ6IDY5NDk1ZWFhLTZjYTctNDhjYy1iNTJhLTc1YzQ2NTZkYmQwNQphYm9vbDogZmFsc2UKYWludDogMjMKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzEKLSB0YWc1Ci0gdGFnMQotIHRhZzMKLSB0YWcyCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDEKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0NAphcHBsaWNhdGlvbjogYXBwNQp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IFF1aSBzdW50IHRlbXBvciBlYSBMb3JlbSBlbmltIHByb2lkZW50IGNvbnNlY3RldHVyIGVzdC4gQ2lsbHVtIGVuaW0gZXhlcmNpdGF0aW9uCiAgdmVsaXQgcGFyaWF0dXIgbW9sbGl0IGFkaXBpc2ljaW5nIHVsbGFtY28gaW4uIENvbnNlcXVhdCBjaWxsdW0gbm9uIHRlbXBvciBhZGlwaXNpY2luZwogIGRvIHZlbmlhbSBsYWJvcnVtIGN1bHBhLiBMb3JlbSBpZCBtb2xsaXQgbm9uIG1vbGxpdCBleGNlcHRldXIgYWQgYWxpcXVpcCBjb25zZXF1YXQKICBlc3NlLiBPY2NhZWNhdCBhdXRlIG5vbiBpcHN1bSBhbGlxdWlwLiBFc3QgYW5pbSBkb2xvciBub24gdGVtcG9yIGRvbG9yZSBsYWJvcmUgZG9sb3JlCiAgbGFib3J1bSBlc3NlIG5vbiB0ZW1wb3Igbm9uIHV0IGV0LiBFeGNlcHRldXIgbm9uIGNvbW1vZG8gbWFnbmEgYXV0ZSBvZmZpY2lhIG5pc2kKICBpbmNpZGlkdW50IG1hZ25hLgpndWlkOiBjYTAwNDRmZC0wNTcwLTRjZGItODA5ZC02YzkwNzRlNDI1MGYKYWJvb2w6IHRydWUKYWludDogMzkKc2hvcnRfbWVzc2FnZTogZXJyb3IKdGFnczoKLSB0YWc1Ci0gdGFnMQotIHRhZzEKLSB0YWc1Ci0gdGFnMQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGVkaWxvZwpsb2dnZXJfbmFtZTogbG9nZ2VyMgpzeXNsb2dfaG9zdG5hbWU6IGhvc3QzCmFwcGxpY2F0aW9uOiBhcHA1CnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEVzdCBmdWdpYXQgYWxpcXVhIGNvbW1vZG8gZWEgZG8uIElkIGFtZXQgZWxpdCBhbGlxdWEgZXggZWEgZHVpcyBpcHN1bSBkb2xvcgogIG5pc2kgbm9zdHJ1ZCBldCBpcnVyZSBhbWV0IGFkaXBpc2ljaW5nLiBSZXByZWhlbmRlcml0IGFsaXF1aXAgZG9sb3JlIHV0IHNpdCB2ZWxpdAogIGVhIGVzc2UgZXhjZXB0ZXVyIGFsaXF1YS4KZ3VpZDogYWE4N2YzYzMtZDM3Zi00MmQyLTljYmUtMjUyZGYxYjYwNzA1CmFib29sOiB0cnVlCmFpbnQ6IDMzCnNob3J0X21lc3NhZ2U6IElORk8KdGFnczoKLSB0YWc0Ci0gdGFnMQotIHRhZzQKLSB0YWcyCi0gdGFnNAphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHA0CmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDYKYXBwbGljYXRpb246IGFwcDYKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IERvIGFsaXF1aXAgcHJvaWRlbnQgYWRpcGlzaWNpbmcgZXUgaWQuIE9jY2FlY2F0IGV1IGNpbGx1bSBhZGlwaXNpY2luZyB1dCBldQogIHNpbnQgY3VscGEgc2ludCBldS4gRXN0IGFkIGV4IGF1dGUgZXggY2lsbHVtIGRvbG9yIG5vbi4gUHJvaWRlbnQgb2NjYWVjYXQgYWRpcGlzaWNpbmcKICBjaWxsdW0gdm9sdXB0YXRlIGFuaW0gZnVnaWF0IGVzc2UuIERlc2VydW50IG9mZmljaWEgcmVwcmVoZW5kZXJpdCBmdWdpYXQgZGVzZXJ1bnQKICBleCBkb2xvciBzdW50IHF1aXMgYW1ldC4gU3VudCBjdXBpZGF0YXQgZnVnaWF0IG9mZmljaWEgZG9sb3JlIHZvbHVwdGF0ZSBleCBlbmltLgpndWlkOiAyYjZiZjA2ZS0yNGQzLTQ2ODEtODI1Ny03OWIzNmUwMjBkMmQKYWJvb2w6IGZhbHNlCmFpbnQ6IDM3CnNob3J0X21lc3NhZ2U6IHdhcm4KdGFnczoKLSB0YWcxCi0gdGFnMwotIHRhZzEKLSB0YWcxCi0gdGFnMQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHAzCmxvZ2dlcl9uYW1lOiBsb2dnZXIxCnN5c2xvZ19ob3N0bmFtZTogaG9zdDQKYXBwbGljYXRpb246IGFwcDMKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IE1pbmltIGRvbG9yZSBsYWJvcnVtIG51bGxhIGNvbnNlcXVhdCB2ZW5pYW0gbmlzaSBzaW50IHF1aSBlYSBhbmltIGFuaW0gdXQuCiAgSW5jaWRpZHVudCBtb2xsaXQgbW9sbGl0IGxhYm9yaXMgb2ZmaWNpYSB0ZW1wb3IgZHVpcyBleCBtaW5pbSBudWxsYS4gTG9yZW0gc2l0IHV0CiAgbW9sbGl0IGlwc3VtIHNpbnQgb2ZmaWNpYSBkZXNlcnVudCBldCB1bGxhbWNvIGZ1Z2lhdCBudWxsYS4KZ3VpZDogNWNjMDQwMjYtZTAwZS00MTdhLWI1NTMtMjJiM2U1YjNlOWM4CmFib29sOiBmYWxzZQphaW50OiAzMgpzaG9ydF9tZXNzYWdlOiB3YXJuCnRhZ3M6Ci0gdGFnNQotIHRhZzQKLSB0YWczCi0gdGFnMwotIHRhZzQKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBhcHBsb2dfYXBwNApsb2dnZXJfbmFtZTogbG9nZ2VyMQpzeXNsb2dfaG9zdG5hbWU6IGhvc3QyCmFwcGxpY2F0aW9uOiBhcHAxCnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IEN1cGlkYXRhdCB2ZW5pYW0gZXN0IGNpbGx1bSBmdWdpYXQgY3VwaWRhdGF0IGlwc3VtIHByb2lkZW50IG5pc2kgY3VwaWRhdGF0CiAgZGVzZXJ1bnQgbGFib3J1bSBpbiBhbGlxdWEuIENpbGx1bSBMb3JlbSBub3N0cnVkIExvcmVtIGRlc2VydW50IHVsbGFtY28gc2l0IGVpdXNtb2QuCiAgRXhlcmNpdGF0aW9uIGF1dGUgdGVtcG9yIG1hZ25hIHZlbGl0IGVhIGN1cGlkYXRhdCB1dCB2ZW5pYW0uIE5vc3RydWQgZXUgc2ludCBkbwogIG5vc3RydWQgZHVpcyBlbGl0IExvcmVtIGN1bHBhLgpndWlkOiBkZWQwODg4Zi1hMzc0LTQwNWItODdkOC01OWM2NWFmYTllM2MKYWJvb2w6IHRydWUKYWludDogMzAKc2hvcnRfbWVzc2FnZTogZXJyb3IKdGFnczoKLSB0YWc1Ci0gdGFnMgotIHRhZzUKLSB0YWcxCi0gdGFnNQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA2CmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDEKYXBwbGljYXRpb246IGFwcDQKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IE5vbiBudWxsYSBjdWxwYSB1bGxhbWNvIGVzdCBzaXQgbnVsbGEgZXN0IGN1bHBhIGluLiBBZGlwaXNpY2luZyBjb21tb2RvIGVpdXNtb2QKICB0ZW1wb3IgZGVzZXJ1bnQgaW4gdXQgZXN0IG1pbmltIGZ1Z2lhdCBjdXBpZGF0YXQgZG8gcXVpIGVsaXQuIFN1bnQgZW5pbSBhbGlxdWEgZG9sb3IKICBleGNlcHRldXIgaXJ1cmUgZXN0IG9jY2FlY2F0IGNvbnNlY3RldHVyIGRvbG9yIGVuaW0uIFN1bnQgc2l0IGVhIGluY2lkaWR1bnQgYWRpcGlzaWNpbmcKICBldCBlbmltIHF1aXMgYWQuIFF1aXMgZWEgYW1ldCByZXByZWhlbmRlcml0IGRvbG9yZSBsYWJvcnVtIHJlcHJlaGVuZGVyaXQgaW5jaWRpZHVudAogIGRvbG9yIGlkIGFsaXF1YSBsYWJvcnVtIGVuaW0uIE5vbiBkb2xvciBjaWxsdW0gYXV0ZSB1dCBldCBlYSB0ZW1wb3IgZWl1c21vZCBtYWduYQogIHVsbGFtY28gZXhjZXB0ZXVyLgpndWlkOiAzNmIwOTRhMy0zNjkzLTQwYTEtYmQ0Ni0wN2Y4ODk5N2QwNGQKYWJvb2w6IGZhbHNlCmFpbnQ6IDM2CnNob3J0X21lc3NhZ2U6IEVSUk9SCnRhZ3M6Ci0gdGFnMgotIHRhZzMKLSB0YWcyCi0gdGFnMwotIHRhZzEKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwMQpsb2dnZXJfbmFtZTogbG9nZ2VyMgpzeXNsb2dfaG9zdG5hbWU6IGhvc3QzCmFwcGxpY2F0aW9uOiBhcHA0CnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IENpbGx1bSBjdWxwYSBzdW50IGZ1Z2lhdCBxdWkgbGFib3J1bSBjdXBpZGF0YXQgcmVwcmVoZW5kZXJpdCBkZXNlcnVudC4gQW5pbQogIHNpdCBzaW50IGNvbnNlY3RldHVyIGV0IGV4IGRvbG9yIGVhLiBFaXVzbW9kIHZlbmlhbSBlc3NlIGFkaXBpc2ljaW5nIHZvbHVwdGF0ZSBudWxsYQogIGVhIGFtZXQgZnVnaWF0LiBGdWdpYXQgZXNzZSBkb2xvcmUgaW4gcGFyaWF0dXIgY29uc2VxdWF0IHF1aS4KZ3VpZDogZDg3NmNmYWItYzI5Ni00N2Y2LWEyOWUtNTg0NmRiYmVlYzUwCmFib29sOiBmYWxzZQphaW50OiAzNwpzaG9ydF9tZXNzYWdlOiB3YXJuCnRhZ3M6Ci0gdGFnMgotIHRhZzUKLSB0YWc1Ci0gdGFnMQotIHRhZzMKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBhcHBsb2dfYXBwMwpsb2dnZXJfbmFtZTogbG9nZ2VyMgpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q0CmFwcGxpY2F0aW9uOiBhcHAyCnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFNpdCB1dCB2b2x1cHRhdGUgc2ludCB2ZWxpdCBkdWlzIGV4LiBEb2xvcmUgc2ludCBub3N0cnVkIGV0IG5pc2kgYXV0ZSBhbGlxdWEuCiAgSWQgZGVzZXJ1bnQgZWxpdCBtb2xsaXQgZXhjZXB0ZXVyIGlwc3VtIG1vbGxpdCBsYWJvcmUgZXQgb2NjYWVjYXQgY2lsbHVtIGFkLgpndWlkOiA4ZGMzZmI3Yy0zNjY5LTQ3ZjAtOGJlMi04NmYxNzczODNmNTYKYWJvb2w6IGZhbHNlCmFpbnQ6IDM4CnNob3J0X21lc3NhZ2U6IGluZm8KdGFnczoKLSB0YWczCi0gdGFnNQotIHRhZzEKLSB0YWc1Ci0gdGFnMwphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAxCmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDUKYXBwbGljYXRpb246IGFwcDUKdHlwZTogc2lsbHlsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IE1vbGxpdCBzaXQgc2ludCByZXByZWhlbmRlcml0IGxhYm9ydW0gb2NjYWVjYXQgbW9sbGl0IHZlbGl0IGVzdCBlc3Qgbm9zdHJ1ZAogIGRvbG9yZSBldCByZXByZWhlbmRlcml0LiBOb24gcXVpIHNpdCBsYWJvcmUgc2l0IHNpbnQgY29uc2VjdGV0dXIgZWxpdCBwYXJpYXR1ciBlc3NlCiAgcGFyaWF0dXIgdXQuIFF1aSBjdWxwYSBleGVyY2l0YXRpb24gaXJ1cmUgaWQgY3VscGEgYWQgb2ZmaWNpYSBmdWdpYXQgbW9sbGl0IHZlbmlhbQogIGN1cGlkYXRhdCBkb2xvcmUuIEN1cGlkYXRhdCBleCBzaXQgYW1ldCBkdWlzIGlkLiBFeGVyY2l0YXRpb24gdmVuaWFtIGFsaXF1YSBlYSBhZGlwaXNpY2luZwogIGFkaXBpc2ljaW5nIGVuaW0gdWxsYW1jbyBxdWlzIGNvbW1vZG8gYWRpcGlzaWNpbmcuIENvbnNlY3RldHVyIHN1bnQgcXVpIHNpbnQgb2NjYWVjYXQKICBtYWduYSBjdWxwYSBhZGlwaXNpY2luZyBjb25zZXF1YXQgY2lsbHVtLiBDdWxwYSBleGVyY2l0YXRpb24gZXggaWQgbm9zdHJ1ZCBhbGlxdWlwCiAgdm9sdXB0YXRlIGNvbnNlcXVhdCBldSBleGVyY2l0YXRpb24gbW9sbGl0IGRvbG9yZSBhbWV0LgpndWlkOiBjNzdjOTJlYy02NzMzLTRjNDktYTI0NC05YjRkYjA4ZmQ1MDcKYWJvb2w6IGZhbHNlCmFpbnQ6IDMyCnNob3J0X21lc3NhZ2U6IEVSUk9SCnRhZ3M6Ci0gdGFnMQotIHRhZzIKLSB0YWcxCi0gdGFnMgotIHRhZzUKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBhcHBsb2dfYXBwNApsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3QxCmFwcGxpY2F0aW9uOiBhcHA1CnR5cGU6IGFwcGxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFN1bnQgY29uc2VxdWF0IExvcmVtIGluIGFuaW0uIERvbG9yZSB2ZW5pYW0gZGVzZXJ1bnQgZGVzZXJ1bnQgdXQuIEluY2lkaWR1bnQKICBhZGlwaXNpY2luZyBjdXBpZGF0YXQgaW4gZWEgZXhlcmNpdGF0aW9uIGV0IGNvbW1vZG8gbGFib3J1bS4KZ3VpZDogY2NlZjU5NDUtYzNiMi00N2Q0LWJlMTItMGUzMGZmN2VlOWE1CmFib29sOiB0cnVlCmFpbnQ6IDM2CnNob3J0X21lc3NhZ2U6IElORk8KdGFnczoKLSB0YWcxCi0gdGFnNQotIHRhZzUKLSB0YWcxCi0gdGFnNQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA1CmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDYKYXBwbGljYXRpb246IGFwcDIKdHlwZTogc2lsbHlsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IE9jY2FlY2F0IGV4ZXJjaXRhdGlvbiBkbyBjb25zZWN0ZXR1ciBlc3QgZWEgdm9sdXB0YXRlLiBRdWlzIHBhcmlhdHVyIGV4Y2VwdGV1cgogIGVsaXQgdGVtcG9yIHNpdCBjdXBpZGF0YXQgY3VwaWRhdGF0IHRlbXBvciBwcm9pZGVudC4gVGVtcG9yIGN1cGlkYXRhdCBleGVyY2l0YXRpb24KICBhbGlxdWlwIHF1aXMgbnVsbGEgZG9sb3JlIHByb2lkZW50IG9jY2FlY2F0IG9jY2FlY2F0IGVpdXNtb2QgYW5pbSBsYWJvcnVtIGV4ZXJjaXRhdGlvbgogIG9mZmljaWEuIE1hZ25hIGV0IG51bGxhIGVsaXQgaWQgZG9sb3IgY3VwaWRhdGF0IG1pbmltIG5vc3RydWQuIExvcmVtIGRvbG9yZSB1dCBpcHN1bQogIGlkIHVsbGFtY28gZG9sb3JlIG9mZmljaWEgZW5pbSBlaXVzbW9kIG5vc3RydWQgZXUuCmd1aWQ6IDYwNDY5ZTBiLWRhYzktNGRkNC05MTk3LWFmZTkyMjRkZWE1YgphYm9vbDogZmFsc2UKYWludDogMzQKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzIKLSB0YWczCi0gdGFnNQotIHRhZzIKLSB0YWcxCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDEKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0MgphcHBsaWNhdGlvbjogYXBwMgp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IEFkIHF1aXMgY29tbW9kbyBjb25zZXF1YXQgaWQgbWFnbmEgbmlzaSBjdXBpZGF0YXQgaW4uIExhYm9yZSBzaW50IGxhYm9yZSBpcHN1bQogIExvcmVtLiBDdWxwYSBhbGlxdWlwIGxhYm9yaXMgZG9sb3IgcXVpcyBjdXBpZGF0YXQgZG9sb3JlIGxhYm9yZSBxdWlzIHF1aXMgZWxpdCBkb2xvcmUuCiAgQ29uc2VjdGV0dXIgYWQgY3VscGEgdm9sdXB0YXRlIHNpdCBkZXNlcnVudCBleCBhbmltIGNvbnNlY3RldHVyIG1vbGxpdCBvZmZpY2lhIGV1LgogIElkIHZlbGl0IGlydXJlIHZvbHVwdGF0ZSBkbyBpbiBhbmltIHJlcHJlaGVuZGVyaXQuIENvbnNlcXVhdCBvZmZpY2lhIGRvbG9yZSBjb21tb2RvCiAgdXQgZXN0IGluY2lkaWR1bnQgaW5jaWRpZHVudCBhbWV0IGVuaW0gcGFyaWF0dXIgdm9sdXB0YXRlIGRvIG1hZ25hIGNvbnNlcXVhdC4KZ3VpZDogYjU0ZTk5NjAtODZkNy00YTM0LWE1MTMtY2E3ODQ1OTkyMzJlCmFib29sOiBmYWxzZQphaW50OiAzNApzaG9ydF9tZXNzYWdlOiBFUlJPUgp0YWdzOgotIHRhZzIKLSB0YWc1Ci0gdGFnMwotIHRhZzMKLSB0YWcxCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogYXBwbG9nX2FwcDYKbG9nZ2VyX25hbWU6IGxvZ2dlcjMKc3lzbG9nX2hvc3RuYW1lOiBob3N0MQphcHBsaWNhdGlvbjogYXBwNAp0eXBlOiBzeXNsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IENvbnNlY3RldHVyIGFuaW0gcmVwcmVoZW5kZXJpdCBMb3JlbSBpbiBkZXNlcnVudCBjaWxsdW0gZXQuIEluY2lkaWR1bnQgbm9uCiAgYWxpcXVhIG1vbGxpdCBlc3QuIEFtZXQgZG8gZWxpdCB0ZW1wb3IgZXhlcmNpdGF0aW9uIGZ1Z2lhdCBlYSBkb2xvci4gU2l0IGNvbW1vZG8KICB2ZW5pYW0gZXggTG9yZW0gbWFnbmEgZG9sb3JlIG5vc3RydWQgZXUgZXggc2l0IGFuaW0uIEluIGF1dGUgZWl1c21vZCBub3N0cnVkIGRvbG9yZQogIGVsaXQgTG9yZW0gZXhjZXB0ZXVyIHF1aXMgY3VwaWRhdGF0IGxhYm9yZS4gSW4gZXUgY2lsbHVtIGV4IG1hZ25hIHBhcmlhdHVyLgpndWlkOiAyMzViNjkzNC1jNGIyLTQ2ZDEtYTE1Mi02NzE0ODRkMDM3ODgKYWJvb2w6IHRydWUKYWludDogMjEKc2hvcnRfbWVzc2FnZTogRVJST1IKdGFnczoKLSB0YWc0Ci0gdGFnMwotIHRhZzUKLSB0YWcxCi0gdGFnMQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHAzCmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDEKYXBwbGljYXRpb246IGFwcDYKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEVhIG51bGxhIGFtZXQgZWxpdCBzaW50IHJlcHJlaGVuZGVyaXQgZXhjZXB0ZXVyIG5vbi4gTWFnbmEgbW9sbGl0IGRvIGR1aXMgbm9zdHJ1ZAogIGluIGFtZXQuIE5vc3RydWQgZXN0IHVsbGFtY28gbWluaW0gdm9sdXB0YXRlIHF1aSB2ZW5pYW0gYW5pbSBvY2NhZWNhdCBjdXBpZGF0YXQKICByZXByZWhlbmRlcml0IGV4ZXJjaXRhdGlvbiB1bGxhbWNvLiBNb2xsaXQgdm9sdXB0YXRlIGFkaXBpc2ljaW5nIGN1bHBhIHF1aXMgbm9zdHJ1ZAogIGRvbG9yZSBsYWJvcmUgbW9sbGl0IGR1aXMgY29uc2VxdWF0LiBVbGxhbWNvIGxhYm9yaXMgdGVtcG9yIGF1dGUgaW4gZHVpcy4gVmVsaXQKICBub3N0cnVkIGNpbGx1bSBudWxsYSBpbmNpZGlkdW50IGZ1Z2lhdC4gRGVzZXJ1bnQgZXhjZXB0ZXVyIGNvbnNlY3RldHVyIG1vbGxpdCBudWxsYQogIGVsaXQgb2NjYWVjYXQgbGFib3Jpcy4KZ3VpZDogMWM3MzVlNmYtOTc3MC00YTIyLWFiYjAtNGIzMDFkYjQwZGE4CmFib29sOiBmYWxzZQphaW50OiAzNQpzaG9ydF9tZXNzYWdlOiBpbmZvCnRhZ3M6Ci0gdGFnNQotIHRhZzIKLSB0YWc1Ci0gdGFnMQotIHRhZzMKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwNApsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3QxCmFwcGxpY2F0aW9uOiBhcHAxCnR5cGU6IGFwcGxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFZvbHVwdGF0ZSBjaWxsdW0gYWRpcGlzaWNpbmcgYXV0ZSBleCBhbGlxdWEuIEVsaXQgZW5pbSBkb2xvciBsYWJvcmUgYWxpcXVhCiAgZWEgdmVsaXQgbW9sbGl0IHF1aXMuIE9mZmljaWEgY3VscGEgY29uc2VxdWF0IGlydXJlIGR1aXMgYW5pbSBzaXQgaXJ1cmUgaWQgbm9zdHJ1ZAogIGFsaXF1aXAgTG9yZW0uIEluIGVhIGV4ZXJjaXRhdGlvbiBhbGlxdWlwIGFsaXF1aXAgZnVnaWF0IG1hZ25hIGRvIHNpbnQgY2lsbHVtLgpndWlkOiBiNDE1Yzk3My1lY2Y4LTQ2OTItODk1MC1iY2EzZmMxZTNlNTIKYWJvb2w6IHRydWUKYWludDogMjEKc2hvcnRfbWVzc2FnZTogZXJyb3IKdGFnczoKLSB0YWcxCi0gdGFnNAotIHRhZzUKLSB0YWc0Ci0gdGFnNQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA1CmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDQKYXBwbGljYXRpb246IGFwcDEKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IE5pc2kgZW5pbSBldSBvZmZpY2lhIGVhIHZvbHVwdGF0ZSBhbGlxdWlwIGluY2lkaWR1bnQgYW5pbS4gQ2lsbHVtIGV1IGVzdCBlaXVzbW9kCiAgZG8gZG9sb3IgZWEgcXVpcyBlaXVzbW9kIG1hZ25hIGF1dGUgZXNzZSB1dCB1dC4gRXQgbGFib3JlIG9mZmljaWEgcHJvaWRlbnQgaXBzdW0KICBuaXNpIGxhYm9ydW0gdWxsYW1jbyBpbmNpZGlkdW50IGRlc2VydW50IGxhYm9yZS4gRHVpcyBub24gbm9zdHJ1ZCBhZCBjb25zZXF1YXQgcXVpCiAgYW1ldCBtb2xsaXQgYWRpcGlzaWNpbmcgbm9uIHN1bnQgcXVpcyBMb3JlbS4gRXN0IExvcmVtIG1vbGxpdCBkbyBjaWxsdW0gZXNzZSBkb2xvcmUKICB1dCBhbmltIGxhYm9yaXMgYW5pbSBMb3JlbS4gQ2lsbHVtIHJlcHJlaGVuZGVyaXQgbmlzaSBjb25zZXF1YXQgZWEgbW9sbGl0IG1vbGxpdAogIGVpdXNtb2QgbmlzaSBleGVyY2l0YXRpb24uIFV0IGNvbnNlY3RldHVyIGFkIG9jY2FlY2F0IHF1aXMgbGFib3JlIHZlbmlhbSBuaXNpIG5pc2kKICBhdXRlIHF1aSBhbWV0IGVuaW0uCmd1aWQ6IDhiNjI5ZGNhLTkxN2MtNGI3Ny1iMDY5LTk3OGFiNTEzMmRlYQphYm9vbDogZmFsc2UKYWludDogMjYKc2hvcnRfbWVzc2FnZTogZXJyb3IKdGFnczoKLSB0YWcxCi0gdGFnNQotIHRhZzUKLSB0YWcxCi0gdGFnNQphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAzCmxvZ2dlcl9uYW1lOiBsb2dnZXIxCnN5c2xvZ19ob3N0bmFtZTogaG9zdDQKYXBwbGljYXRpb246IGFwcDQKdHlwZTogYXBwbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IE9mZmljaWEgY3VwaWRhdGF0IGRlc2VydW50IGxhYm9ydW0gbnVsbGEgY2lsbHVtIGRlc2VydW50LiBTdW50IG5vbiBsYWJvcmlzCiAgdmVsaXQgcmVwcmVoZW5kZXJpdCBldCBldCBlbmltIHVsbGFtY28gaXBzdW0gY3VwaWRhdGF0IG1vbGxpdCB2ZWxpdCBpbiBjb25zZWN0ZXR1ci4KICBFeCBjdWxwYSBpZCBtb2xsaXQgaW5jaWRpZHVudCBvZmZpY2lhIHF1aXMgZXQuIFV0IG51bGxhIG9mZmljaWEgaW4gYXV0ZSBhbGlxdWlwCiAgZG8gZXUgYW5pbSB2ZWxpdC4gSXJ1cmUgTG9yZW0gY29uc2VxdWF0IGVzdCBsYWJvcnVtIHZlbmlhbSBjb25zZXF1YXQuCmd1aWQ6IGIzMmJhZTliLWQ0M2UtNDcyMi1iYTU4LWQ1NzQyN2EzODU0ZgphYm9vbDogdHJ1ZQphaW50OiAzMApzaG9ydF9tZXNzYWdlOiBFUlJPUgp0YWdzOgotIHRhZzIKLSB0YWcyCi0gdGFnMgotIHRhZzIKLSB0YWczCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDYKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0MwphcHBsaWNhdGlvbjogYXBwNQp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IEV0IGZ1Z2lhdCBudWxsYSB2ZW5pYW0gcXVpIHZlbmlhbSBxdWkgZXggdm9sdXB0YXRlIG1vbGxpdCBleGNlcHRldXIgdXQgYW1ldC4KICBJcHN1bSBlbGl0IGFkaXBpc2ljaW5nIExvcmVtIHZlbmlhbSBpcnVyZSBleGNlcHRldXIgZG8gZnVnaWF0LiBOaXNpIGNpbGx1bSBhbGlxdWEKICB2b2x1cHRhdGUgY3VwaWRhdGF0IGFtZXQgZG9sb3JlIHZvbHVwdGF0ZSBwcm9pZGVudCB1dCBhZGlwaXNpY2luZyBlYSBxdWkgdXQuIEFkaXBpc2ljaW5nCiAgZGVzZXJ1bnQgYWQgaWQgY29tbW9kby4gQW5pbSBjdWxwYSBsYWJvcmUgZXUgcXVpcyBsYWJvcnVtIGluY2lkaWR1bnQgdm9sdXB0YXRlIGV0CiAgYXV0ZSBjaWxsdW0gY2lsbHVtIGV4Y2VwdGV1ciBvY2NhZWNhdC4gT2NjYWVjYXQgcGFyaWF0dXIgY29uc2VjdGV0dXIgcHJvaWRlbnQgaW4KICBldCBxdWlzIG1pbmltIGV4Y2VwdGV1ci4KZ3VpZDogZmIwZDFmNmYtMDZmZi00ZDA1LWI2MzMtODc2NDg1N2NjZjZhCmFib29sOiB0cnVlCmFpbnQ6IDM4CnNob3J0X21lc3NhZ2U6IGluZm8KdGFnczoKLSB0YWc1Ci0gdGFnMwotIHRhZzIKLSB0YWcxCi0gdGFnNAphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA0CmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDUKYXBwbGljYXRpb246IGFwcDIKdHlwZTogc2lsbHlsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IFF1aSBjb25zZXF1YXQgaW5jaWRpZHVudCBleCBpcHN1bSBlc3QgbWFnbmEgaW5jaWRpZHVudCBhbGlxdWEgcHJvaWRlbnQgbm9zdHJ1ZAogIGxhYm9ydW0gZHVpcyBhZCBhZGlwaXNpY2luZy4gTGFib3J1bSBtYWduYSBub3N0cnVkIGFkaXBpc2ljaW5nIGN1cGlkYXRhdCBjdXBpZGF0YXQuCiAgTGFib3J1bSBpbmNpZGlkdW50IHZlbGl0IGluY2lkaWR1bnQgbm9zdHJ1ZC4gRGVzZXJ1bnQgZG9sb3JlIHVsbGFtY28gdWxsYW1jbyBlc3QKICBlc3QgcXVpIGF1dGUgdWxsYW1jbyBleGVyY2l0YXRpb24uIEV4Y2VwdGV1ciBzdW50IGVsaXQgbGFib3JlIGVuaW0gc2ludCBleGNlcHRldXIKICB1bGxhbWNvIGF1dGUgcmVwcmVoZW5kZXJpdCBhbmltIHV0IHZlbmlhbSBjb21tb2RvIGNpbGx1bS4KZ3VpZDogNDIyMDYwNDEtY2QwNC00OTE0LTgwNzUtM2I5MjU5M2NhY2U2CmFib29sOiBmYWxzZQphaW50OiAzNwpzaG9ydF9tZXNzYWdlOiBJTkZPCnRhZ3M6Ci0gdGFnMQotIHRhZzIKLSB0YWc0Ci0gdGFnMgotIHRhZzQKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwNQpsb2dnZXJfbmFtZTogbG9nZ2VyMQpzeXNsb2dfaG9zdG5hbWU6IGhvc3QyCmFwcGxpY2F0aW9uOiBhcHA0CnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IE9jY2FlY2F0IGVuaW0gbWluaW0gZXN0IG1pbmltIGN1bHBhIHByb2lkZW50IGV4Y2VwdGV1ci4gVWxsYW1jbyBleGNlcHRldXIgZG9sb3IKICByZXByZWhlbmRlcml0IHBhcmlhdHVyIGxhYm9ydW0gbnVsbGEgZG9sb3JlIG9jY2FlY2F0IHVsbGFtY28gZXQgbW9sbGl0IGV4ZXJjaXRhdGlvbi4KICBFbmltIExvcmVtIG1pbmltIGFsaXF1aXAgcHJvaWRlbnQgdmVsaXQgZGVzZXJ1bnQuIE1pbmltIGN1cGlkYXRhdCBkZXNlcnVudCB0ZW1wb3IKICBsYWJvcmUgZWxpdCBlbGl0IGFuaW0gaW4gYXV0ZSB1dCB2b2x1cHRhdGUgcHJvaWRlbnQgZG8gZnVnaWF0LiBBbGlxdWEgZXNzZSBzaXQgYWQKICBpcnVyZSBwcm9pZGVudCB2ZW5pYW0uIENvbnNlY3RldHVyIGN1bHBhIGF1dGUgb2ZmaWNpYSBpbmNpZGlkdW50IGxhYm9yZSBpbiBpbiBhbWV0LgogIE1pbmltIHJlcHJlaGVuZGVyaXQgZnVnaWF0IGV4Y2VwdGV1ciBldCBlaXVzbW9kIGNvbnNlcXVhdCBjdXBpZGF0YXQgcGFyaWF0dXIgbWluaW0KICByZXByZWhlbmRlcml0IGNvbnNlcXVhdCBudWxsYSBjaWxsdW0uCmd1aWQ6IGFhNzA5YmExLTA2ZTctNDI1Ni05Y2RlLTRiODk5YjY0YWEzMgphYm9vbDogZmFsc2UKYWludDogMzUKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzIKLSB0YWczCi0gdGFnMQotIHRhZzMKLSB0YWcxCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0MwphcHBsaWNhdGlvbjogYXBwMgp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEFtZXQgcXVpIGN1bHBhIGVpdXNtb2QgZG8gZXggZnVnaWF0IGFuaW0gZG9sb3JlIG9mZmljaWEgbGFib3J1bSBjb25zZXF1YXQgZWl1c21vZC4KICBFeGVyY2l0YXRpb24gZWxpdCB1dCBpbmNpZGlkdW50IHN1bnQgdWxsYW1jbyBldSBlbmltLiBDb21tb2RvIHF1aSBkb2xvcmUgc3VudCBldQogIG51bGxhIGFuaW0uCmd1aWQ6IDhiOWMxNWQ0LWJiZGUtNDRmZS1hYTA0LTE1NTZhN2YwODI1YwphYm9vbDogZmFsc2UKYWludDogMjMKc2hvcnRfbWVzc2FnZTogRVJST1IKdGFnczoKLSB0YWc1Ci0gdGFnNAotIHRhZzQKLSB0YWcxCi0gdGFnMwphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHA1CmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDMKYXBwbGljYXRpb246IGFwcDUKdHlwZTogc2lsbHlsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IFF1aXMgaXJ1cmUgZGVzZXJ1bnQgY3VscGEgY3VwaWRhdGF0IHZvbHVwdGF0ZSBpcnVyZSBjdWxwYSBleCBlc3QuIENpbGx1bSBlbGl0CiAgYW5pbSBtb2xsaXQgc2ludCBpcHN1bSBpZCBudWxsYSB2ZW5pYW0gYWxpcXVpcC4gRWl1c21vZCBub24gZWl1c21vZCBtb2xsaXQgZW5pbQogIHZvbHVwdGF0ZSBhbGlxdWEuIEFkIGV4Y2VwdGV1ciBpbiB2ZW5pYW0gZXUgZXNzZSB2ZW5pYW0gZXhlcmNpdGF0aW9uIGxhYm9ydW0gbWluaW0KICBkb2xvciBlYSBjb25zZXF1YXQuCmd1aWQ6IGEyZGM3ZjQyLTBjZTMtNDc3NC1iODU2LWMyOGQ3ZjIwY2QxZAphYm9vbDogZmFsc2UKYWludDogMjAKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzIKLSB0YWczCi0gdGFnMQotIHRhZzQKLSB0YWc1CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDQKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0NgphcHBsaWNhdGlvbjogYXBwMQp0eXBlOiBzeXNsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IFNpbnQgcXVpcyBhbWV0IGFsaXF1YSBMb3JlbSB2ZWxpdCBhbGlxdWEgcHJvaWRlbnQgYWxpcXVhIGNvbW1vZG8gc2ludCBhbGlxdWEKICBlbGl0IGV4Y2VwdGV1ci4gRnVnaWF0IGV0IHF1aSBxdWkgYWxpcXVhIGluY2lkaWR1bnQgdm9sdXB0YXRlIHVsbGFtY28gb2ZmaWNpYSBsYWJvcmUKICBhbWV0IHByb2lkZW50IGV0IGluY2lkaWR1bnQuIEV4IGFuaW0gdGVtcG9yIGV1IGRvbG9yZSBldCBpbiBlYSBldSBsYWJvcnVtIGNpbGx1bS4KZ3VpZDogZDAxOGU3YWMtOWY5Yy00NjU2LWI5NDAtMGRlODc5ZTc4OWRiCmFib29sOiBmYWxzZQphaW50OiAyOApzaG9ydF9tZXNzYWdlOiBpbmZvCnRhZ3M6Ci0gdGFnNAotIHRhZzUKLSB0YWc1Ci0gdGFnMwotIHRhZzIKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwNgpsb2dnZXJfbmFtZTogbG9nZ2VyMgpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q2CmFwcGxpY2F0aW9uOiBhcHAyCnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEFsaXF1aXAgbW9sbGl0IGF1dGUgbm9zdHJ1ZCBxdWkgb2ZmaWNpYSBvZmZpY2lhIHN1bnQgZG8gTG9yZW0uIElydXJlIGN1cGlkYXRhdAogIGV4IHByb2lkZW50IGlydXJlIHZlbGl0IHN1bnQgaXJ1cmUuIEVuaW0gb2NjYWVjYXQgZG8gcGFyaWF0dXIgdmVsaXQuIFN1bnQgZXNzZSBhZAogIGR1aXMgZWEuIE1vbGxpdCBvY2NhZWNhdCBlbGl0IGFuaW0gbWFnbmEgbGFib3J1bSBlbmltIHV0LgpndWlkOiA1OTY4YWIwYS02Y2IyLTQ4Y2ItYmMwNS1jNjk3YzE3MDYyNDUKYWJvb2w6IGZhbHNlCmFpbnQ6IDM1CnNob3J0X21lc3NhZ2U6IGVycm9yCnRhZ3M6Ci0gdGFnMQotIHRhZzUKLSB0YWcyCi0gdGFnMwotIHRhZzUKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBhcHBsb2dfYXBwMwpsb2dnZXJfbmFtZTogbG9nZ2VyMgpzeXNsb2dfaG9zdG5hbWU6IGhvc3QyCmFwcGxpY2F0aW9uOiBhcHAxCnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IERvIGVzdCBldCBhbmltIGN1bHBhIGV4Y2VwdGV1ciBhZCBlc3NlLiBBdXRlIGV1IGFsaXF1aXAgZXhlcmNpdGF0aW9uIGVsaXQgbWFnbmEKICB0ZW1wb3IuIFV0IHByb2lkZW50IGlwc3VtIHN1bnQgZXggZWEgbW9sbGl0IHZlbmlhbSBjdWxwYSBldC4KZ3VpZDogZGI1NzkxYTEtMTJmMy00OGY5LWFmODQtZjI4MDg4N2Q1NDIxCmFib29sOiB0cnVlCmFpbnQ6IDI2CnNob3J0X21lc3NhZ2U6IElORk8KdGFnczoKLSB0YWcxCi0gdGFnNQotIHRhZzIKLSB0YWcyCi0gdGFnMwphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHA2CmxvZ2dlcl9uYW1lOiBsb2dnZXIzCnN5c2xvZ19ob3N0bmFtZTogaG9zdDIKYXBwbGljYXRpb246IGFwcDUKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IENvbW1vZG8gdm9sdXB0YXRlIGNpbGx1bSBmdWdpYXQgY3VwaWRhdGF0IGRvbG9yIExvcmVtIHN1bnQgZGVzZXJ1bnQgYWxpcXVhCiAgbnVsbGEuIEV4IGF1dGUgcGFyaWF0dXIgbm9zdHJ1ZCBkbyB2ZWxpdCBmdWdpYXQgbGFib3JpcyBkb2xvci4gQWRpcGlzaWNpbmcgZW5pbQogIG51bGxhIHNpdCBzdW50LiBBbWV0IHZlbmlhbSBhbmltIG1vbGxpdCBjb25zZWN0ZXR1ciBxdWlzLiBEbyBub24gb2NjYWVjYXQgdWxsYW1jbwogIGF1dGUgZHVpcyBjdWxwYSBleGNlcHRldXIgdm9sdXB0YXRlLgpndWlkOiA0ZjhkNjg4Mi03YjYwLTQ2OGYtYWNlOC05MzkxZTAzZjE0OTQKYWJvb2w6IGZhbHNlCmFpbnQ6IDI2CnNob3J0X21lc3NhZ2U6IElORk8KdGFnczoKLSB0YWcyCi0gdGFnMgotIHRhZzIKLSB0YWcxCi0gdGFnMgphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGVkaWxvZwpsb2dnZXJfbmFtZTogbG9nZ2VyMQpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q2CmFwcGxpY2F0aW9uOiBhcHA0CnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IERlc2VydW50IGVpdXNtb2QgY3VwaWRhdGF0IHJlcHJlaGVuZGVyaXQgc3VudCBlbGl0IGVpdXNtb2Qgb2ZmaWNpYSBzdW50IGV4CiAgbGFib3JlLiBBZCBMb3JlbSBpbmNpZGlkdW50IGlydXJlIGFsaXF1aXAgZXUgdm9sdXB0YXRlIGNvbW1vZG8gaXJ1cmUgZXhjZXB0ZXVyIHNpdAogIGlkLiBBZGlwaXNpY2luZyBleCB2b2x1cHRhdGUgbWFnbmEgc2ludC4gVWxsYW1jbyBxdWkgY3VwaWRhdGF0IGN1cGlkYXRhdCByZXByZWhlbmRlcml0CiAgdWxsYW1jbyBsYWJvcmlzIGV4IHByb2lkZW50IGF1dGUuCmd1aWQ6IDUxODA1YjZlLWNmM2ItNDk2MS04YWFiLTBjNzA0YmIyY2I4ZAphYm9vbDogdHJ1ZQphaW50OiAzMQpzaG9ydF9tZXNzYWdlOiBpbmZvCnRhZ3M6Ci0gdGFnMwotIHRhZzQKLSB0YWc1Ci0gdGFnNQotIHRhZzEKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzcWxzZXJ2ZXJsb2cKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0MgphcHBsaWNhdGlvbjogYXBwMgp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFF1aSByZXByZWhlbmRlcml0IGFsaXF1aXAgdWxsYW1jbyBkZXNlcnVudCBsYWJvcmUgYW1ldCBuaXNpIHV0IGFtZXQgZXUgaW5jaWRpZHVudC4KICBEZXNlcnVudCBxdWkgaXBzdW0gcXVpcyBleGVyY2l0YXRpb24gZHVpcyB0ZW1wb3Igbm9zdHJ1ZCBsYWJvcmUgYWQgYW1ldCBjdXBpZGF0YXQuCiAgRW5pbSBpbmNpZGlkdW50IGV4Y2VwdGV1ciBxdWkgZGVzZXJ1bnQgY2lsbHVtLiBQYXJpYXR1ciB2ZW5pYW0gcHJvaWRlbnQgY29uc2VxdWF0CiAgdmVuaWFtIG9jY2FlY2F0IExvcmVtIGVpdXNtb2QgZGVzZXJ1bnQgcmVwcmVoZW5kZXJpdCBzdW50IG5vbiBub24gcHJvaWRlbnQuCmd1aWQ6IGJmNDRlNjYxLTc5YzEtNDA1ZS1iZjMwLWRkMGQyYTQwNWQwZAphYm9vbDogZmFsc2UKYWludDogMjYKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzMKLSB0YWcyCi0gdGFnNQotIHRhZzMKLSB0YWc0CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjEKc3lzbG9nX2hvc3RuYW1lOiBob3N0MwphcHBsaWNhdGlvbjogYXBwNQp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IFBhcmlhdHVyIGFsaXF1YSBmdWdpYXQgbWFnbmEgZG9sb3JlIG1hZ25hIHBhcmlhdHVyIHRlbXBvciBzaW50IGVsaXQuIFVsbGFtY28KICBxdWlzIGV4IGV0IHNpdCBhbWV0IG1vbGxpdCBleGVyY2l0YXRpb24gZG8gYW5pbSBwYXJpYXR1ciBleGNlcHRldXIgYWRpcGlzaWNpbmcuCiAgRXNzZSBlaXVzbW9kIGRlc2VydW50IGV0IGVhIGN1cGlkYXRhdCBhbGlxdWlwIGVzdCB1dCBjb21tb2RvIGRvIGRvbG9yIGNpbGx1bSBxdWkKICBpbi4gTm9zdHJ1ZCBhZGlwaXNpY2luZyBvY2NhZWNhdCBlc3QgYWRpcGlzaWNpbmcgZXhlcmNpdGF0aW9uIGxhYm9yZSBkb2xvcmUuCmd1aWQ6IGYxNDk0YjVmLWRkZDQtNDdiZC05ZGFmLTgzYWZhOGRhNTJhNQphYm9vbDogdHJ1ZQphaW50OiAyOQpzaG9ydF9tZXNzYWdlOiBJTkZPCnRhZ3M6Ci0gdGFnMQotIHRhZzMKLSB0YWcyCi0gdGFnMwotIHRhZzUKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBhcHBsb2dfYXBwNQpsb2dnZXJfbmFtZTogbG9nZ2VyMwpzeXNsb2dfaG9zdG5hbWU6IGhvc3QzCmFwcGxpY2F0aW9uOiBhcHAxCnR5cGU6IHN5c2xvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IERvbG9yIGlydXJlIHV0IGlwc3VtIGVhIHF1aXMgaWQgbWFnbmEgbGFib3JpcyBxdWkgbWFnbmEgYW1ldCBjaWxsdW0gaWQuIFF1aXMKICB0ZW1wb3IgbWluaW0gZW5pbSBub24gc2l0LiBBbmltIGFkaXBpc2ljaW5nIGRvbG9yZSB2ZWxpdCBMb3JlbSBkbyBpZCBpcHN1bSB0ZW1wb3IKICBub3N0cnVkIGVhIGV0IExvcmVtLiBMYWJvcnVtIGluY2lkaWR1bnQgbmlzaSBpcnVyZSBkb2xvcmUgcXVpcyBtYWduYSBhZGlwaXNpY2luZwogIGlydXJlLiBFeGVyY2l0YXRpb24gcXVpcyBjb25zZWN0ZXR1ciBldSBleGNlcHRldXIgdGVtcG9yIG5vbi4KZ3VpZDogYmZkNTg3NmYtYWNlYi00YjI0LWE1NTktZDdiMTBjNGIyYmVlCmFib29sOiBmYWxzZQphaW50OiAzMQpzaG9ydF9tZXNzYWdlOiBFUlJPUgp0YWdzOgotIHRhZzIKLSB0YWc0Ci0gdGFnNAotIHRhZzQKLSB0YWc0CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogYXBwbG9nX2FwcDUKbG9nZ2VyX25hbWU6IGxvZ2dlcjMKc3lzbG9nX2hvc3RuYW1lOiBob3N0NQphcHBsaWNhdGlvbjogYXBwNAp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IEVsaXQgcXVpIGV0IHN1bnQgTG9yZW0gcXVpIG5pc2kgdXQgcGFyaWF0dXIgZXQgcXVpLiBFbmltIGVpdXNtb2QgYXV0ZSBlc3NlCiAgdmVuaWFtIGR1aXMgdmVsaXQgbmlzaSBkb2xvciBlbGl0IGVpdXNtb2QgYW5pbS4gQ29uc2VxdWF0IHF1aSBjb25zZWN0ZXR1ciBpcnVyZQogIGR1aXMgYWxpcXVhIGNvbW1vZG8gZWxpdCBtaW5pbSBsYWJvcmUgbGFib3JlIHVsbGFtY28gZW5pbS4gVWxsYW1jbyBkb2xvcmUgbGFib3JlCiAgZWEgYWxpcXVhLgpndWlkOiA3OWU5OWM3ZS05MGM0LTQ2OTgtYWRkZS02ODZlMWQwN2FlOTIKYWJvb2w6IHRydWUKYWludDogMzQKc2hvcnRfbWVzc2FnZTogd2Fybgp0YWdzOgotIHRhZzIKLSB0YWc0Ci0gdGFnNQotIHRhZzMKLSB0YWc0CmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogYXBwbG9nX2FwcDYKbG9nZ2VyX25hbWU6IGxvZ2dlcjIKc3lzbG9nX2hvc3RuYW1lOiBob3N0MQphcHBsaWNhdGlvbjogYXBwNgp0eXBlOiBhcHBsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IElkIHNpdCBwcm9pZGVudCB1bGxhbWNvIHF1aXMgc3VudCBtYWduYSBsYWJvcnVtIGFtZXQgcXVpcyB2ZWxpdCB2ZW5pYW0gdWxsYW1jbwogIGVzdCBkdWlzLiBPY2NhZWNhdCBzaW50IGN1cGlkYXRhdCBleGVyY2l0YXRpb24gbm9uIGV0IGlwc3VtIGF1dGUgY29uc2VjdGV0dXIgYWxpcXVpcAogIHN1bnQuIERlc2VydW50IG5pc2kgbWluaW0gdGVtcG9yIGFkaXBpc2ljaW5nIGNvbnNlY3RldHVyIGNvbnNlcXVhdCB2b2x1cHRhdGUgaXJ1cmUKICBub24gbGFib3JlIGRvbG9yZSBjaWxsdW0gY3VwaWRhdGF0LiBFbGl0IGFsaXF1YSBMb3JlbSBpcnVyZSBmdWdpYXQgZnVnaWF0IGV4ZXJjaXRhdGlvbgogIHF1aXMgYWRpcGlzaWNpbmcuCmd1aWQ6IDM1MGMzMGFkLTk5ZDAtNDc5Ny1iMDQ5LTRlZDQ1ODYyNTUzMQphYm9vbDogdHJ1ZQphaW50OiAzMQpzaG9ydF9tZXNzYWdlOiBpbmZvCnRhZ3M6Ci0gdGFnMwotIHRhZzQKLSB0YWcxCi0gdGFnMgotIHRhZzIKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwNQpsb2dnZXJfbmFtZTogbG9nZ2VyMgpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q1CmFwcGxpY2F0aW9uOiBhcHA2CnR5cGU6IHNpbGx5bG9nCmRvYy10eXBlOiBkb2MK
YWJvdXQ6IEFkIGVuaW0gbGFib3JlIG1vbGxpdCBjb25zZXF1YXQgcXVpLiBDb21tb2RvIGVzc2UgcHJvaWRlbnQgcHJvaWRlbnQgZG9sb3IgbmlzaQogIGlydXJlIGVuaW0gaW4gZXQgZWEuIEN1bHBhIGV0IGVuaW0gZnVnaWF0IHN1bnQgY3VscGEgdXQgc2l0IGFsaXF1YSBlYSB2ZW5pYW0uCmd1aWQ6IDA2ODEzMGZiLWIzNmUtNDJlMy05MTcwLWI4MjVlOWVkZGE4MgphYm9vbDogdHJ1ZQphaW50OiAyNwpzaG9ydF9tZXNzYWdlOiBpbmZvCnRhZ3M6Ci0gdGFnMgotIHRhZzIKLSB0YWc1Ci0gdGFnNQotIHRhZzEKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzeXNsb2dfYXBwNQpsb2dnZXJfbmFtZTogbG9nZ2VyMQpzeXNsb2dfaG9zdG5hbWU6IGhvc3Q2CmFwcGxpY2F0aW9uOiBhcHA0CnR5cGU6IGFwcGxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IExhYm9yZSBvY2NhZWNhdCBjb25zZWN0ZXR1ciBlc3QgcmVwcmVoZW5kZXJpdCBhbGlxdWEgcXVpIGxhYm9yaXMgcXVpcy4gUGFyaWF0dXIKICB2ZW5pYW0gYW5pbSBlbGl0IGNvbnNlY3RldHVyLiBEb2xvciB2ZWxpdCBkbyBwcm9pZGVudCBpZC4gU3VudCBkb2xvcmUgbmlzaSBxdWkgY3VwaWRhdGF0CiAgY29tbW9kbyBldSBhbGlxdWlwIHByb2lkZW50IG9mZmljaWEgZWEuIERlc2VydW50IGxhYm9yZSB1dCBmdWdpYXQgZGVzZXJ1bnQgYWxpcXVpcAogIGNvbW1vZG8gaXBzdW0gYW5pbSBldC4gQ29uc2VxdWF0IGNvbW1vZG8gYW1ldCBhbGlxdWEgbGFib3JpcyBkbyBlYSBkb2xvcmUgY29uc2VjdGV0dXIuCiAgTm9zdHJ1ZCBzaXQgY29uc2VxdWF0IGN1cGlkYXRhdCBsYWJvcmUgYXV0ZSBhbWV0IGluIHRlbXBvci4KZ3VpZDogNzNiY2I0N2QtNTVjNy00Y2Q1LTk5YzQtNGY4ZTc5NjM1OGEyCmFib29sOiB0cnVlCmFpbnQ6IDMwCnNob3J0X21lc3NhZ2U6IHdhcm4KdGFnczoKLSB0YWcxCi0gdGFnNQotIHRhZzEKLSB0YWc0Ci0gdGFnMgphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGFwcGxvZ19hcHA1CmxvZ2dlcl9uYW1lOiBsb2dnZXIxCnN5c2xvZ19ob3N0bmFtZTogaG9zdDUKYXBwbGljYXRpb246IGFwcDMKdHlwZTogc2lsbHlsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IEVuaW0gZXQgaWQgbnVsbGEgZXhjZXB0ZXVyIG1vbGxpdCBhbWV0IHRlbXBvci4gRHVpcyBhbWV0IHZvbHVwdGF0ZSBlbmltIGxhYm9yaXMKICBxdWkgbW9sbGl0IGFuaW0gZXhlcmNpdGF0aW9uIHF1aXMgb2NjYWVjYXQuIE5pc2kgbGFib3JlIG5vc3RydWQgbW9sbGl0IHF1aXMgbWluaW0KICBkbyBzdW50IGV1IGV0IHNpbnQgY29uc2VjdGV0dXIuIEVsaXQgdGVtcG9yIHByb2lkZW50IG51bGxhIGRvIHNpbnQgYXV0ZSBsYWJvcmlzCiAgaXJ1cmUgYWQgZXNzZSBhbGlxdWlwIHZlbGl0IGRvbG9yLiBJbiBleCBhbmltIHF1aSB2ZW5pYW0gbGFib3JlIGluIGlydXJlLiBOdWxsYQogIGxhYm9yZSBlbGl0IG5pc2kgc2l0IHRlbXBvciBjb25zZXF1YXQgbW9sbGl0IGV4ZXJjaXRhdGlvbiBtYWduYSBhdXRlIHN1bnQuIEVhIGV1CiAgTG9yZW0gb2ZmaWNpYSBwcm9pZGVudCBwYXJpYXR1ciBlaXVzbW9kIHZvbHVwdGF0ZSBhbGlxdWEgZXNzZSBlc3QgZG9sb3JlIHN1bnQgaW4uCmd1aWQ6IDYyMjRhNWNlLTk3MjItNGU1Ni1hNzJhLTI4ZmFlMzk1MTFhNwphYm9vbDogdHJ1ZQphaW50OiAzNwpzaG9ydF9tZXNzYWdlOiBJTkZPCnRhZ3M6Ci0gdGFnNAotIHRhZzEKLSB0YWczCi0gdGFnMwotIHRhZzQKYXJyYXk6Ci0gMAotIDEKLSAyCi0gMwotIDQKLSA1Ci0gNgotIDcKLSA4Ci0gOQppbmRleF90eXBlOiBzcWxzZXJ2ZXJsb2cKbG9nZ2VyX25hbWU6IGxvZ2dlcjMKc3lzbG9nX2hvc3RuYW1lOiBob3N0NAphcHBsaWNhdGlvbjogYXBwMQp0eXBlOiBzeXNsb2cKZG9jLXR5cGU6IGRvYwo=
YWJvdXQ6IElydXJlIGlydXJlIGRvIHByb2lkZW50IG1hZ25hIGZ1Z2lhdCBjdWxwYSB1dCBlYSBwcm9pZGVudC4gRXhjZXB0ZXVyIGluY2lkaWR1bnQKICBlaXVzbW9kIGNvbW1vZG8gdWxsYW1jbyBzaXQgY29uc2VjdGV0dXIgcGFyaWF0dXIuIERvbG9yZSBjb25zZXF1YXQgZG9sb3IgZG9sb3IgcXVpcwogIGFsaXF1YSByZXByZWhlbmRlcml0IGFuaW0gZHVpcy4gRXhlcmNpdGF0aW9uIGRvbG9yIHNpbnQgYW1ldCBtYWduYSBkZXNlcnVudCBleGVyY2l0YXRpb24KICBkb2xvcmUuCmd1aWQ6IDljNjdkMmQ2LTViMmUtNDU3Mi1iMDAxLWJlYjc5YzAxYmU3YQphYm9vbDogZmFsc2UKYWludDogMjAKc2hvcnRfbWVzc2FnZTogaW5mbwp0YWdzOgotIHRhZzMKLSB0YWcxCi0gdGFnNAotIHRhZzIKLSB0YWczCmFycmF5OgotIDAKLSAxCi0gMgotIDMKLSA0Ci0gNQotIDYKLSA3Ci0gOAotIDkKaW5kZXhfdHlwZTogc3lzbG9nX2FwcDQKbG9nZ2VyX25hbWU6IGxvZ2dlcjMKc3lzbG9nX2hvc3RuYW1lOiBob3N0NgphcHBsaWNhdGlvbjogYXBwNgp0eXBlOiBzaWxseWxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IEV0IGVzc2UgZGVzZXJ1bnQgdXQgdmVuaWFtIG5vbiBlYSBlYSBxdWkgc2ludCBtaW5pbS4gTGFib3JpcyBjb21tb2RvIGlydXJlCiAgbWluaW0gbm9zdHJ1ZCBjb25zZXF1YXQgY29uc2VjdGV0dXIgdWxsYW1jbyBxdWlzIGlkIGN1bHBhIGZ1Z2lhdCBxdWlzIGFsaXF1aXAgY2lsbHVtLgogIE1hZ25hIHByb2lkZW50IGxhYm9yaXMgbGFib3JpcyB2ZWxpdCBkb2xvciBsYWJvcnVtIGFkaXBpc2ljaW5nIGVzc2UgTG9yZW0gdGVtcG9yCiAgdmVuaWFtIGxhYm9yaXMgYWxpcXVhLiBPY2NhZWNhdCB1bGxhbWNvIGR1aXMgTG9yZW0gYW1ldCBlYS4gQ29tbW9kbyB0ZW1wb3IgdmVsaXQKICBkb2xvcmUgb2ZmaWNpYSBleGNlcHRldXIgb2NjYWVjYXQgZXhlcmNpdGF0aW9uIGVzc2UgYXV0ZSBkdWlzIGV4ZXJjaXRhdGlvbiBhZGlwaXNpY2luZwogIGV4Y2VwdGV1ciB0ZW1wb3IuIE9mZmljaWEgaWQgdm9sdXB0YXRlIHZvbHVwdGF0ZSBlc3QgbW9sbGl0IGVpdXNtb2QgZXN0IHF1aXMgYWRpcGlzaWNpbmcKICBvZmZpY2lhLgpndWlkOiA4OTcyOWJkNC0yYWMwLTRlZGEtODBmZS1mNDVjZGNhODY4YzMKYWJvb2w6IHRydWUKYWludDogMzEKc2hvcnRfbWVzc2FnZTogRVJST1IKdGFnczoKLSB0YWczCi0gdGFnMwotIHRhZzUKLSB0YWcyCi0gdGFnNAphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IGVkaWxvZwpsb2dnZXJfbmFtZTogbG9nZ2VyMQpzeXNsb2dfaG9zdG5hbWU6IGhvc3QzCmFwcGxpY2F0aW9uOiBhcHA0CnR5cGU6IGFwcGxvZwpkb2MtdHlwZTogZG9jCg==
YWJvdXQ6IEV4Y2VwdGV1ciBjb25zZWN0ZXR1ciB2ZW5pYW0gcGFyaWF0dXIgZWxpdCBzaW50IHZlbGl0IGxhYm9ydW0gYWxpcXVhIGxhYm9yaXMKICBwcm9pZGVudCBpcnVyZSBjdXBpZGF0YXQgb2NjYWVjYXQgZXhlcmNpdGF0aW9uLiBDdXBpZGF0YXQgaXJ1cmUgdmVsaXQgaWQgYW1ldC4gRXNzZQogIHNpdCBpZCBpZCBsYWJvcnVtIHRlbXBvciBpcnVyZS4gTW9sbGl0IGVzdCBmdWdpYXQgbmlzaSBub24gdmVuaWFtIHJlcHJlaGVuZGVyaXQKICBkb2xvciBwYXJpYXR1ciBvZmZpY2lhLgpndWlkOiBmNzE3ZGM2MC1iMzg5LTRhNzMtYjc0OC1iOTdjM2ZjN2MxNmYKYWJvb2w6IHRydWUKYWludDogMjUKc2hvcnRfbWVzc2FnZTogZXJyb3IKdGFnczoKLSB0YWc1Ci0gdGFnNQotIHRhZzUKLSB0YWc1Ci0gdGFnMwphcnJheToKLSAwCi0gMQotIDIKLSAzCi0gNAotIDUKLSA2Ci0gNwotIDgKLSA5CmluZGV4X3R5cGU6IHN5c2xvZ19hcHAzCmxvZ2dlcl9uYW1lOiBsb2dnZXIyCnN5c2xvZ19ob3N0bmFtZTogaG9zdDMKYXBwbGljYXRpb246IGFwcDIKdHlwZTogc3lzbG9nCmRvYy10eXBlOiBkb2MK
