#
# Testing system metrics
#
# Test Logic:
# - have a pipeline and a sink and source connector report metrics every 3 seconds
# - exit the flow when we collected metrics for a certain amount of events that passed through source, pipeline and sink
define flow main
flow
  use integration;
  use std::time::nanos;
  use tremor::connectors;

  # connector definitions
  define connector in from metronome
  with
    metrics_interval_s = 3,
    config = { "interval": nanos::from_seconds(1) }
  end;

  define connector out from file
  with
    metrics_interval_s = 3,
    codec = {"name": "json", "config": {"mode": "sorted"}},
    postprocessors = ["separate"],
    config = {
      "path": "events.log",
      "mode": "write"
    }
  end;

  # pipeline definitions
  define pipeline main
  args
    metrics_interval_s = 3
  pipeline
    #!config metrics_interval_s = 3

    define script process
    script
      let event.ingest_ns = null;
      event
    end;

    create script process;

    #select event from in into out;
    select event from in into process;
    select event from process/out into out;
    select event from process/err into err;

  end;
  
  define pipeline metrics
  into 
    out, err, exit
  pipeline
    define script process
    script
      let event.timestamp = null; # for testing

      # initialize state
      let state = match state of
        # state is initialized
        case %{
          present source_out,
          present pipeline_in,
          present pipeline_out,
          present sink_in
        } => state
        # initialize state
        case _ => {
          "source_out": 0,   # source port `out`
          "source_err": 0,   # source port `err`
          "pipeline_in": 0,  # pipeline port `in`
          "pipeline_out": 0, # pipeline port `out`
          "sink_in": 0       # sink port `in`
        }
      end;
      # update state counters
      match event of 
        case matched = %{ tags ~= %{`pipeline` == "main1::main1", port == "in" }, fields ~= %{ present count } } =>
          let state.pipeline_in = matched.fields.count
        case matched = %{ tags ~= %{ `pipeline` == "main1::main1", port == "out"}, fields ~= %{ present count } } =>
          let state.pipeline_out = matched.fields.count
        case matched = %{ tags ~= %{ `connector` == "main1::in_here", port == "out" }, fields ~= %{ present count } } => 
          let state.source_out = matched.fields.count
        case matched = %{ tags ~= %{ `connector` == "main1::in_here", port == "err" }, fields ~= %{ present count } } => 
          let state.source_err = matched.fields.count
        case matched = %{ tags ~= %{ `connector` == "main1::out_here", port == "in" }, fields ~= %{ present count } } => 
          let state.sink_in = matched.fields.count
        case _ => null
      end;

      # exit if we have at least 10 events
      match state of
        case %{ source_out >= 10, source_err == 0, pipeline_in >= 10, pipeline_in >= 10, sink_in >= 10} =>
          emit {"EXIT": "NOW"} => "exit"
        case _ =>
          emit state => "out"
      end
    end;

    create script process;

    select event from in into process;
    select event from process/out into out;
    select event from process/exit into exit;
    select event from process/err into err;

  end;

  # creating connectors
  create connector in_here from in;
  create connector out_here from out;

  create connector exit from connectors::exit;
  create connector metrics from connectors::metrics;
  create connector stdio from connectors::console;

  # creating pipelines
  create pipeline main1 from main;
  create pipeline metrics;

  # connects
  connect /connector/in_here to  /pipeline/main1;
  connect /pipeline/main1/out to /connector/out_here;

  connect /connector/metrics to /pipeline/metrics;
  # catching other outputs, just in case
  connect /pipeline/metrics/out to /connector/stdio/stdout;
  connect /pipeline/metrics/err to /connector/stdio/stderr;

  # exit when we have all events
  connect /pipeline/metrics/exit to /connector/exit;
  connect /pipeline/metrics/exit to /connector/stdio/stdout;

end;

deploy flow main1 from main;
