define flow main
flow
  use integration;
  use troy::pipelines;
  use troy::connectors;

  define connector tcp_client from tcp_client
  with
    postprocessors = ["lines"],
    config = {
      "host": "127.0.0.1",
      "port": 65535,
      "ttl": 64,
      "no_delay": false,
      "buf_size": 1024,
      "tls": {
        "cafile": "./before/localhost.cert",
        "domain": "localhost",
      }
    },
    reconnect = {
      "custom": {
        "interval_ms": 100,
        "growth_rate": 2,
        "max_retries": 3,
      }
    }
  end;

  define connector tcp_server from tcp_server
  with
    preprocessors = ["lines"],
    config = {
      "host": "0.0.0.0",
      "port": 65535,
      "buf_size": 1024,
      "tls": {
        "cert": "./before/localhost.cert",
        "key": "./before/localhost.key",
      }
    }
  end;

  create connector in from integration::read_file;
  create connector out from integration::write_file;
  create connector exit from integration::exit;
  create connector stdio from connectors::tty;
  create connector tcp_client;
  create connector tcp_server;

  create pipeline server_side from integration::out_or_exit;
  create pipeline to_client from pipelines::passthrough;
  create pipeline debug from pipelines::passthrough;

  connect /connector/in to /pipeline/to_client;
  connect /connector/in/err to /pipeline/debug;
  connect /pipeline/to_client to /connector/tcp_client;
  # send out any responses to stdout
  connect /connector/tcp_client to /pipeline/debug;
  connect /connector/tcp_client/err to /pipeline/debug;
  connect /pipeline/debug to /connector/stdio;
  # flow from tcp_server to file
  connect /connector/tcp_server to /pipeline/server_side;
  connect /connector/tcp_server/err to /pipeline/debug;
  connect /pipeline/server_side to /connector/out;
  # aaaand echo it back
  connect /pipeline/server_side to /connector/tcp_server;
  connect /pipeline/server_side to /connector/exit;

end;

deploy flow main;

# connector:
#   - id: tcp_client
#     type: tcp_client
#     codec: json
#     postprocessors:
#       - lines
#     config:
#       host: "127.0.0.1"
#       port: 65535
#       ttl: 64
#       no_delay: false
#       buf_size: 1024
#       tls:
#         cafile: "./before/localhost.cert"
#         domain: "localhost"
#     reconnect:
#       custom:
#         interval_ms: 100
#         growth_rate: 2
#         max_retries: 3
#   - id: tcp_server
#     type: tcp_server
#     codec: json
#     preprocessors:
#       - lines
#     config:
#       host: "0.0.0.0"
#       port: 65535
#       buf_size: 1024
#       tls:
#         cert: "./before/localhost.cert"
#         key: "./before/localhost.key"
#   - id: exit
#     type: exit

# binding:
#   - id: tcp_tls
#     links:
#       # flow from file to tcp_client
#       "/connector/input_file/{instance}/out":
#         - "/pipeline/system::passthrough/{instance}_to_client/in"
#       "/connector/input_file/{instance}/err":
#         - "/pipeline/system::passthrough/{instance}_debug/in"
#       "/pipeline/system::passthrough/{instance}_to_client/out":
#         - "/connector/tcp_client/{instance}/in"
#       # send out any responses to stdout
#       "/connector/tcp_client/{instance}/out":
#         - "/pipeline/system::passthrough/{instance}_debug/in"
#       "/connector/tcp_client/{instance}/err":
#         - "/pipeline/system::passthrough/{instance}_debug/in"
#       "/pipeline/system::passthrough/{instance}_debug/out":
#         - "/connector/system::stdio/{instance}/in"

#       # flow from tcp_server to file
#       "/connector/tcp_server/{instance}/out":
#         - "/pipeline/server_side/{instance}/in"
#       "/connector/tcp_server/{instance}/err":
#         - "/pipeline/system::passthrough/{instance}_debug/in"
#       "/pipeline/server_side/{instance}/out":
#         - "/connector/output_file/{instance}/in"
#         # aaaand echo it back
#         - "/connector/tcp_server/{instance}/in"
#       "/pipeline/server_side/{instance}/exit":
#         - "/connector/exit/{instance}/in"

# mapping:
#   /binding/tcp_tls/01:
#     instance: "01"