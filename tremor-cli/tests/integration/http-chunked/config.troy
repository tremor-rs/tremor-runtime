define flow server
flow
  use integration;
  use tremor::{connectors, pipelines};

  define connector http_server from http_server
  with
    config = {
      "url": "http://localhost:65535/",
      "mime_mapping": {
        "text/plain": "string",
        "*/*": "string"
      }
    }
  end;

  define pipeline instrument
  pipeline
    use std::array;
    define window four from tumbling
    with
      size = 4
    end;
    select { "event": array::sort(aggr::win::collect_flattened(event)), "meta": array::sort(aggr::win::collect_flattened($)) } from in[four] into out;
  end;
  create pipeline instrument;

  define pipeline request_handling
  pipeline
    use std::time::nanos;

    define script chunk
    script
      let $http_server.response = {
        "status": 200,
        "headers": {
          "transfer-encoding": "chunked"
        }
      };
      emit event;
    end;
    create script chunk;

    select event from in into chunk;
    select event from chunk into out;
    select event from chunk/err into err;
  end;
  create pipeline request_handling;
  create pipeline debug from pipelines::passthrough;

  create connector stdio from connectors::console;
  create connector http_server from http_server;


  # Echo http server: <http:req> -> server -> server_side -> <http:resp>
  connect /connector/http_server to /pipeline/request_handling;
  connect /pipeline/request_handling to /connector/http_server;
  connect /pipeline/request_handling/err to /connector/stdio/stderr;
  connect /pipeline/debug to /connector/stdio;

  connect /connector/http_server to /pipeline/instrument;
  connect /pipeline/instrument to /connector/stdio/stderr;
end;

define flow client
flow
  use integration;
  use tremor::{connectors, pipelines};

  define connector http_client from http_client
  with
    config = {
      "url": "http://localhost:65535/",
      "headers": {
        "transfer-encoding": ["chunked"]
      },
      "mime_mapping": {
        "text/plain": "string",
        "*/*": "string"
      }
    },
    reconnect = {
      "retry": {
        "interval_ms": 100,
        "growth_rate": 2,
        "max_retries": 3,
      }
    }
  end;

  # pipeline that batches into 5 events or whatever came after 1 second
  define pipeline main
  pipeline
    use std::time::nanos;

    define operator batch from generic::batch
    with
      count = 5,
      timeout = nanos::from_seconds(1)
    end;
    create operator batch;

    select event from in into batch;
    select event from batch into out;
  end;
  create pipeline main;

  define pipeline debug
  pipeline
    use std::path;
    select path::try_default($http_client.response.headers, ["transfer-encoding"], null) from in into out;
  end;
  create pipeline debug;
  create pipeline out_or_exit from integration::out_or_exit;

  create connector data_in from integration::read_file;
  create connector data_out from integration::write_file;
  create connector exit from integration::exit;
  create connector stdio from connectors::console;
  create connector http_client from http_client;
  create connector exit from connectors::exit;

  connect /connector/data_in to /pipeline/main;
  connect /pipeline/main to /connector/http_client;
  connect /connector/http_client/out to /pipeline/out_or_exit;
  connect /connector/http_client/out to /pipeline/debug;

  connect /pipeline/out_or_exit to /connector/data_out;
  connect /pipeline/debug to /connector/stdio;
  # Terminate at end via `exit` event
  connect /pipeline/out_or_exit/exit to /connector/exit;
end;

deploy flow server;
deploy flow client;