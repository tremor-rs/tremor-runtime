define pipeline in
pipeline
    define script process
    script
        use std::json;
        let $kv = event[0].kv;
        let event = event[1];
        let $correlation = json::encode(event);
        event
    end;

    create script process;

    define script diverge
    script
        # direct some events to batch, some not
        let port = match $ of
            case %{ batch == true } => emit event => "batch"
            case _ => emit event => "out"
        end;
    end;

    create script diverge;

    define operator batch from generic::batch with
    count = 2
    end;
    create operator batch;

    select event from in into process;

    select event from process into diverge;
    select event from process/err into err;

    select event from diverge/batch into batch;
    select event from batch into out;

    select event from diverge/out into out;
end;

define pipeline out
into out, exit, err
pipeline
    use std::string;
    use helpers;
    select {
        "event": event,
        "meta": match $ of
                case %{kv ~= %{present ok}} => patch $ of merge "kv" => {"ok": string::from_utf8_lossy($kv.ok)} end
                case _ => $
            end
    } from in where !helpers::is_put_exit(event, $) into out;

    select event from in where helpers::is_put_exit(event, $) into exit;
end;

define pipeline err
pipeline
    select {"error": true, "meta": $, "event": event} from in into out;
end